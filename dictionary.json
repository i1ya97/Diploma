["The software uses a cookie to store sensitive information, but\n\t\t\t\t\tthe cookie is not marked with the HttpOnly flag.\nThe HttpOnly flag directs compatible browsers to prevent client-side\n\t\t\t\t\t\tscript from accessing cookies. Including the HttpOnly flag in the Set-Cookie\n\t\t\t\t\t\tHTTP response header helps mitigate the risk associated with Cross-Site\n\t\t\t\t\t\tScripting (XSS) where an attacker's script code might attempt to read the\n\t\t\t\t\t\tcontents of a cookie and exfiltrate information obtained. When set, browsers\n\t\t\t\t\t\tthat support the flag will not reveal the contents of the cookie to a third\n\t\t\t\t\t\tparty via client-side script executed via XSS.","If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.\nIf the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.","An HTTP cookie is a small piece of data attributed to a specific website\n\t\t\t\t\t\tand stored on the user's computer by the user's web browser. This data can\n\t\t\t\t\t\tbe leveraged for a variety of purposes including saving information entered\n\t\t\t\t\t\tinto form fields, recording user activity, and for authentication purposes.\n\t\t\t\t\t\tCookies used to save or record information generated by the user are\n\t\t\t\t\t\taccessed and modified by script code embedded in a web page. While cookies\n\t\t\t\t\t\tused for authentication are created by the website's server and sent to the\n\t\t\t\t\t\tuser to be attached to future requests. These authentication cookies are\n\t\t\t\t\t\toften not meant to be accessed by the web page sent to the user, and are\n\t\t\t\t\t\tinstead just supposed to be attached to future requests to verify\n\t\t\t\t\t\tauthentication details.","In this example, a cookie is used to store a session ID for a\n\t\t\t\t\t\tclient's interaction with a website. The intention is that the cookie will\n\t\t\t\t\t\tbe sent to the website with each request made by the client.\n","The application uses multiple validation forms with the same\n\t\t\t\t\tname, which might cause the Struts Validator to validate a form that the\n\t\t\t\t\tprogrammer does not expect.\nIf two validation forms have the same name, the Struts Validator\n\t\t\t\t\t\tarbitrarily chooses one of the forms to use for input validation and\n\t\t\t\t\t\tdiscards the other. This decision might not correspond to the programmer's\n\t\t\t\t\t\texpectations, possibly leading to resultant weaknesses. Moreover, it\n\t\t\t\t\t\tindicates that the validation logic is not up-to-date, and can indicate that\n\t\t\t\t\t\tother, more subtle validation errors are present.","Two validation forms with the same name.\n","The application has a validator form that either does not\n\t\t\t\t\tdefine a validate() method, or defines a validate() method but does not call\n\t\t\t\t\tsuper.validate().\nIf you do not call super.validate(), the Validation Framework cannot check\n\t\t\t\t\t\tthe contents of the form against a validation form. In other words, the\n\t\t\t\t\t\tvalidation framework will be disabled for the given form.","Disabling the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","The Struts Validator uses a form's validate() method to check the contents\n\t\t\t\t\t\tof the form properties against the constraints specified in the associated\n\t\t\t\t\t\tvalidation form. That means the following classes have a validate() method\n\t\t\t\t\t\tthat is part of the validation framework: ValidatorForm,\n\t\t\t\t\t\tValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If you\n\t\t\t\t\t\tcreate a class that extends one of these classes, and if your class\n\t\t\t\t\t\timplements custom validation logic by overriding the validate() method, you\n\t\t\t\t\t\tmust call super.validate() in your validate() implementation.","The current description implies a loose composite of two separate\n\t\t\t\t\t\tweaknesses, so this node might need to be split or converted into a\n\t\t\t\t\t\tlow-level category.","In the following Java example the class RegistrationForm is a Struts\n\t\t\t\t\t\tframework ActionForm Bean that will maintain user input data from a\n\t\t\t\t\t\tregistration webpage for an online business site. The user will enter\n\t\t\t\t\t\tregistration data and the RegistrationForm bean in the Struts framework will\n\t\t\t\t\t\tmaintain the user data. Tthe RegistrationForm class implements the validate\n\t\t\t\t\t\tmethod to validate the user input entered into the form.\n","If a form bean does not extend an ActionForm subclass of the\n\t\t\t\t\tValidator framework, it can expose the application to other weaknesses related\n\t\t\t\t\tto insufficient input validation.\n","Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process errol, and SQL injection.\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","In order to use the Struts Validator, a form must extend one of the\n\t\t\t\t\t\tfollowing: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and\n\t\t\t\t\t\tDynaValidatorForm. You must extend one of these classes because the Struts\n\t\t\t\t\t\tValidator ties in to your application by implementing the validate() method\n\t\t\t\t\t\tin these classes. Forms derived from the ActionForm and DynaActionForm\n\t\t\t\t\t\tclasses cannot use the Struts Validator.","In the following Java example the class RegistrationForm is a Struts\n\t\t\t\t\t\tframework ActionForm Bean that will maintain user information from a\n\t\t\t\t\t\tregistration webpage for an online business site. The user will enter\n\t\t\t\t\t\tregistration data and through the Struts framework the RegistrationForm bean\n\t\t\t\t\t\twill maintain the user data.\n","The application has a form field that is not validated by a\n\t\t\t\t\tcorresponding validation form, which can introduce other weaknesses related to\n\t\t\t\t\tinsufficient input validation.\nOmitting validation for even a single input field may give attackers the\n\t\t\t\t\t\tleeway they need to compromise the application. Although J2EE applications\n\t\t\t\t\t\tare not generally susceptible to memory corruption attacks, if a J2EE\n\t\t\t\t\t\tapplication interfaces with native code that does not perform array bounds\n\t\t\t\t\t\tchecking, an attacker may be able to use an input validation mistake in the\n\t\t\t\t\t\tJ2EE application to launch a buffer overflow attack. ","\nIf unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.","In the following example the Java class RegistrationForm is a Struts\n\t\t\t\t\t\tframework ActionForm Bean that will maintain user input data from a\n\t\t\t\t\t\tregistration webpage for an online business site. The user will enter\n\t\t\t\t\t\tregistration data and, through the Struts framework, the RegistrationForm\n\t\t\t\t\t\tbean will maintain the user data in the form fields using the private member\n\t\t\t\t\t\tvariables. The RegistrationForm class uses the Struts validation capability\n\t\t\t\t\t\tby extending the ValidatorForm class and including the validation for the\n\t\t\t\t\t\tform fields within the validator XML file, validator.xml.\n","When an application does not use an input validation framework\n\t\t\t\t\tsuch as the Struts Validator, there is a greater risk of introducing weaknesses\n\t\t\t\t\trelated to insufficient input validation.\n Unchecked input is the leading cause of vulnerabilities in J2EE\n\t\t\t\t\t\tapplications. Unchecked input leads to cross-site scripting, process\n\t\t\t\t\t\tcontrol, and SQL injection vulnerabilities, among others. ","In the following Java example the class RegistrationForm is a Struts\n\t\t\t\t\t\tframework ActionForm Bean that will maintain user input data from a\n\t\t\t\t\t\tregistration webpage for an online business site. The user will enter\n\t\t\t\t\t\tregistration data and, through the Struts framework, the RegistrationForm\n\t\t\t\t\t\tbean will maintain the user data.\n","An unused validation form indicates that validation logic is\n\t\t\t\t\tnot up-to-date.\nIt is easy for developers to forget to update validation logic when they\n\t\t\t\t\t\tremove or rename action form mappings. One indication that validation logic\n\t\t\t\t\t\tis not being properly maintained is the presence of an unused validation\n\t\t\t\t\t\tform.","In the following example the class RegistrationForm is a Struts\n\t\t\t\t\t\tframework ActionForm Bean that will maintain user input data from a\n\t\t\t\t\t\tregistration webpage for an online business site. The user will enter\n\t\t\t\t\t\tregistration data and, through the Struts framework, the RegistrationForm\n\t\t\t\t\t\tbean will maintain the user data in the form fields using the private member\n\t\t\t\t\t\tvariables. The RegistrationForm class uses the Struts validation capability\n\t\t\t\t\t\tby extending the ValidatorForm class and including the validation for the\n\t\t\t\t\t\tform fields within the validator XML file, validator.xml.\n","Every Action Form must have a corresponding validation\n\t\t\t\t\tform.\nIf a Struts Action Form Mapping specifies a form, it must have a\n\t\t\t\t\t\tvalidation form defined under the Struts Validator.","If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.","\n","Automatic filtering via a Struts bean has been turned off,\n\t\t\t\t\twhich disables the Struts Validator and custom validation logic. This exposes\n\t\t\t\t\tthe application to other weaknesses related to insufficient input\n\t\t\t\t\tvalidation.\n","This mapping defines an action for a download form:\n","Debugging messages help attackers learn about the system and\n\t\t\t\t\tplan a form of attack.\nASP .NET applications can be configured to produce debug binaries. These\n\t\t\t\t\t\tbinaries give detailed debugging messages and should not be used in\n\t\t\t\t\t\tproduction environments. Debug binaries are meant to be used in a\n\t\t\t\t\t\tdevelopment or testing environment and can pose a security risk if they are\n\t\t\t\t\t\tdeployed to production."," Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.","The debug attribute of the <compilation> tag defines whether\n\t\t\t\t\t\tcompiled binaries should include debugging information. The use of debug\n\t\t\t\t\t\tbinaries causes an application to provide as much information about itself\n\t\t\t\t\t\tas possible to the user.","The file web.config contains the debug mode setting. Setting debug\n\t\t\t\t\t\tto \"true\" will let the browser display debugging information.\n","Validation fields that do not appear in forms they are\n\t\t\t\t\tassociated with indicate that the validation logic is out of\n\t\t\t\t\tdate.\nIt is easy for developers to forget to update validation logic when they\n\t\t\t\t\t\tmake changes to an ActionForm class. One indication that validation logic is\n\t\t\t\t\t\tnot being properly maintained is inconsistencies between the action form and\n\t\t\t\t\t\tthe validation form.","It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.\n\t\t\t\t\t\t","An action form with two fields.\n","When a Java application uses the Java Native Interface (JNI) to\n\t\t\t\t\tcall code written in another programming language, it can expose the application\n\t\t\t\t\tto weaknesses in that code, even if those weaknesses cannot occur in\n\t\t\t\t\tJava.\nMany safety features that programmers may take for granted simply do not\n\t\t\t\t\t\tapply for native code, so you must carefully review all such code for\n\t\t\t\t\t\tpotential problems. The languages used to implement native code may be more\n\t\t\t\t\t\tsusceptible to buffer overflows and other attacks. Native code is\n\t\t\t\t\t\tunprotected by the security features enforced by the runtime environment,\n\t\t\t\t\t\tsuch as strong typing and array bounds checking.","The following code defines a class named Echo. The class declares\n\t\t\t\t\t\tone native method (defined below), which uses C to echo commands entered on\n\t\t\t\t\t\tthe console back to the user. The following C code defines the native method\n\t\t\t\t\t\timplemented in the Echo class:\n","The software accepts XML from an untrusted source but does not\n\t\t\t\t\tvalidate the XML against the proper schema.\nMost successful attacks begin with a violation of the programmer's\n\t\t\t\t\t\tassumptions. By accepting an XML document without validating it against a\n\t\t\t\t\t\tDTD or XML schema, the programmer leaves a door open for attackers to\n\t\t\t\t\t\tprovide unexpected, unreasonable, or malicious input.","The following code loads and parses an XML file.\n","The software receives data from an upstream component, but does\n\t\t\t\t\tnot neutralize or incorrectly neutralizes CR and LF characters before the data\n\t\t\t\t\tis included in outgoing HTTP headers.\nIncluding unvalidated data in an HTTP header allows an attacker to specify\n\t\t\t\t\t\tthe entirety of the HTTP response rendered by the browser. When an HTTP\n\t\t\t\t\t\trequest contains unexpected CR (carriage return, also given by %0d or \\r)\n\t\t\t\t\t\tand LF (line feed, also given by %0a or \\n) characters the server may\n\t\t\t\t\t\trespond with an output stream that is interpreted as two different HTTP\n\t\t\t\t\t\tresponses (instead of one). An attacker can control the second response and\n\t\t\t\t\t\tmount attacks such as cross-site scripting and cache poisoning\n\t\t\t\t\t\tattacks."," CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the response the application intends to send, as well as allowing them to create additional responses entirely under their control. ","The following code segment reads the name of the author of a weblog\n\t\t\t\t\t\tentry, author, from an HTTP request and sets it in a cookie header of an\n\t\t\t\t\t\tHTTP response.\n","Executing commands or loading libraries from an untrusted\n\t\t\t\t\tsource or in an untrusted environment can cause an application to execute\n\t\t\t\t\tmalicious commands (and payloads) on behalf of an\n\t\t\t\t\tattacker.\nProcess control vulnerabilities take two forms: 1. An attacker can change\n\t\t\t\t\t\tthe command that the program executes: the attacker explicitly controls what\n\t\t\t\t\t\tthe command is. 2. An attacker can change the environment in which the\n\t\t\t\t\t\tcommand executes: the attacker implicitly controls what the command means.\n\t\t\t\t\t\tProcess control vulnerabilities of the first type occur when either data\n\t\t\t\t\t\tenters the application from an untrusted source and the data is used as part\n\t\t\t\t\t\tof a string representing a command that is executed by the application. By\n\t\t\t\t\t\texecuting the command, the application gives an attacker a privilege or\n\t\t\t\t\t\tcapability that the attacker would not otherwise have.","The following code uses System.loadLibrary() to load code from a\n\t\t\t\t\t\tnative library named library.dll, which is normally found in a standard\n\t\t\t\t\t\tsystem directory.\n","The software misinterprets an input, whether from an attacker\n\t\t\t\t\tor another product, in a security-relevant fashion.\n","\n","The software prepares a structured message for communication\n\t\t\t\t\twith another component, but encoding or escaping of the data is either missing\n\t\t\t\t\tor done incorrectly. As a result, the intended structure of the message is not\n\t\t\t\t\tpreserved.\nImproper encoding or escaping can allow attackers to change the commands\n\t\t\t\t\t\tthat are sent to another component, inserting malicious commands\n\t\t\t\t\t\tinstead.","The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.","This code displays an email address that was submitted as part of a\n\t\t\t\t\t\tform.\n","The software does not neutralize or incorrectly neutralizes\n\t\t\t\t\toutput that is written to logs.\nThis can allow an attacker to forge log entries or inject malicious\n\t\t\t\t\t\tcontent into logs.","Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.","Applications typically use log files to store a history of events or\n\t\t\t\t\t\ttransactions for later review, statistics gathering, or debugging. Depending\n\t\t\t\t\t\ton the nature of the application, the task of reviewing log files may be\n\t\t\t\t\t\tperformed manually on an as-needed basis or automated with a tool that\n\t\t\t\t\t\tautomatically culls logs for important events or trending\n\t\t\t\t\t\tinformation.","The following web application code attempts to read an integer value\n\t\t\t\t\t\tfrom a request object. If the parseInt call fails, then the input is logged\n\t\t\t\t\t\twith an error message indicating what happened.\n","The software does not restrict or incorrectly restricts\n\t\t\t\t\toperations within the boundaries of a resource that is accessed using an index\n\t\t\t\t\tor pointer, such as memory or files.\n","\n","The software performs operations on a memory buffer, but it can\n\t\t\t\t\tread from or write to a memory location that is outside of the intended boundary\n\t\t\t\t\tof the buffer.\nCertain languages allow direct addressing of memory locations and do not\n\t\t\t\t\t\tautomatically ensure that these locations are valid for the memory buffer\n\t\t\t\t\t\tthat is being referenced. This can cause read or write operations to be\n\t\t\t\t\t\tperformed on memory locations that may be associated with other variables,\n\t\t\t\t\t\tdata structures, or internal program data.","If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nIn the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.","This example takes an IP address from a user, verifies that it is\n\t\t\t\t\t\twell formed and then looks up the hostname and copies it into a\n\t\t\t\t\t\tbuffer.\n","An ASP .NET application must enable custom error pages in order\n\t\t\t\t\tto prevent attackers from mining information from the framework's built-in\n\t\t\t\t\tresponses.\n","Default error pages gives detailed information about the error that occurred, and should not be used in production environments.","The mode attribute of the <customErrors> tag defines whether\n\t\t\t\t\t\tcustom or default error pages are used.","An insecure ASP.NET application setting: \n","The program copies an input buffer to an output buffer without\n\t\t\t\t\tverifying that the size of the input buffer is less than the size of the output\n\t\t\t\t\tbuffer, leading to a buffer overflow.\nA buffer overflow condition exists when a program attempts to put more\n\t\t\t\t\t\tdata in a buffer than it can hold, or when a program attempts to put data in\n\t\t\t\t\t\ta memory area outside of the boundaries of a buffer. The simplest type of\n\t\t\t\t\t\terror, and the most common cause of buffer overflows, is the \"classic\" case\n\t\t\t\t\t\tin which the program copies the buffer without restricting how much is\n\t\t\t\t\t\tcopied. Other variants exist, but the existence of a classic overflow\n\t\t\t\t\t\tstrongly suggests that the programmer is not considering even the most basic\n\t\t\t\t\t\tof security protections.","Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.\nBuffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.","The following code asks the user to enter their last name and then\n\t\t\t\t\t\tattempts to store the value entered in the last_name array. \n","A stack-based buffer overflow condition is a condition where\n\t\t\t\t\tthe buffer being overwritten is allocated on the stack (i.e., is a local\n\t\t\t\t\tvariable or, rarely, a parameter to a function).\n","Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.","There are generally several security-critical data on an execution stack\n\t\t\t\t\t\tthat can lead to arbitrary code execution. The most prominent is the stored\n\t\t\t\t\t\treturn address, the memory address at which execution should continue once\n\t\t\t\t\t\tthe current function is finished executing. The attacker can overwrite this\n\t\t\t\t\t\tvalue with some memory address to which the attacker also has write access,\n\t\t\t\t\t\tinto which he places arbitrary code to be run with the full privileges of\n\t\t\t\t\t\tthe vulnerable program. Alternately, the attacker can supply the address of\n\t\t\t\t\t\tan important call, for instance the POSIX system() call, leaving arguments\n\t\t\t\t\t\tto the call on the stack. This is often called a return into libc exploit,\n\t\t\t\t\t\tsince the attacker generally forces the program to jump at return time into\n\t\t\t\t\t\tan interesting routine in the C standard library (libc). Other important\n\t\t\t\t\t\tdata commonly on the stack include the stack pointer and frame pointer, two\n\t\t\t\t\t\tvalues that indicate offsets for computing memory addresses. Modifying those\n\t\t\t\t\t\tvalues can often be leveraged into a \"write-what-where\" condition.","While buffer overflow examples can be rather complex, it is possible\n\t\t\t\t\t\tto have very simple, yet still exploitable, stack-based buffer\n\t\t\t\t\t\toverflows:\n","A heap overflow condition is a buffer overflow, where the\n\t\t\t\t\tbuffer that can be overwritten is allocated in the heap portion of memory,\n\t\t\t\t\tgenerally meaning that the buffer was allocated using a routine such as\n\t\t\t\t\tmalloc().\n","Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.","While buffer overflow examples can be rather complex, it is possible\n\t\t\t\t\t\tto have very simple, yet still exploitable, heap-based buffer\n\t\t\t\t\t\toverflows:\n","Any condition where the attacker has the ability to write an\n\t\t\t\t\tarbitrary value to an arbitrary location, often as the result of a buffer\n\t\t\t\t\toverflow.\n","Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.\nMany memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.","The classic example of a write-what-where condition occurs when the\n\t\t\t\t\t\taccounting information for memory allocations is overwritten in a particular\n\t\t\t\t\t\tfashion. Here is an example of potentially vulnerable code:\n","The software writes to a buffer using an index or pointer that\n\t\t\t\t\treferences a memory location prior to the beginning of the buffer. \nThis typically occurs when a pointer or its index is decremented to a\n\t\t\t\t\t\tposition before the buffer, when pointer arithmetic results in a position\n\t\t\t\t\t\tbefore the beginning of the valid memory location, or when a negative index\n\t\t\t\t\t\tis used.","Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.\nIf the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.","In the following C/C++ example, a utility function is used to trim\n\t\t\t\t\t\ttrailing whitespace from a character string. The function copies the input\n\t\t\t\t\t\tstring to a local character string and uses a while statement to remove the\n\t\t\t\t\t\ttrailing whitespace by moving backward through the string and overwriting\n\t\t\t\t\t\twhitespace with a NUL character.\n","The software reads data past the end, or before the beginning,\n\t\t\t\t\tof the intended buffer.\n This typically occurs when the pointer or its index is incremented or\n\t\t\t\t\t\tdecremented to a position beyond the bounds of the buffer or when pointer\n\t\t\t\t\t\tarithmetic results in a position outside of the valid memory location to\n\t\t\t\t\t\tname a few. This may result in corruption of sensitive information, a crash,\n\t\t\t\t\t\tor code execution among other things.","In the following code, the method retrieves a value from an array at\n\t\t\t\t\t\ta specific array index location that is given as an input parameter to the\n\t\t\t\t\t\tmethod\n"," The software reads from a buffer using buffer access\n\t\t\t\t\tmechanisms such as indexes or pointers that reference memory locations after the\n\t\t\t\t\ttargeted buffer.\nThis typically occurs when the pointer or its index is incremented to a\n\t\t\t\t\t\tposition beyond the bounds of the buffer or when pointer arithmetic results\n\t\t\t\t\t\tin a position outside of the valid memory location to name a few. This may\n\t\t\t\t\t\tresult in exposure of sensitive information or possibly a crash. ","In the following C/C++ example the method processMessageFromSocket()\n\t\t\t\t\t\twill get a message from a socket, placed into a buffer, and will parse the\n\t\t\t\t\t\tcontents of the buffer into a structure that contains the message length and\n\t\t\t\t\t\tthe message body. A for loop is used to copy the message body into a local\n\t\t\t\t\t\tcharacter string which will be passed to another method for\n\t\t\t\t\t\tprocessing.\n"," The software reads from a buffer using buffer access\n\t\t\t\t\tmechanisms such as indexes or pointers that reference memory locations prior to\n\t\t\t\t\tthe targeted buffer. \n This typically occurs when the pointer or its index is decremented to a\n\t\t\t\t\t\tposition before the buffer, when pointer arithmetic results in a position\n\t\t\t\t\t\tbefore the beginning of the valid memory location, or when a negative index\n\t\t\t\t\t\tis used. This may result in exposure of sensitive information or possibly a\n\t\t\t\t\t\tcrash. ","\n","Wrap around errors occur whenever a value is incremented past\n\t\t\t\t\tthe maximum value for its type and therefore \"wraps around\" to a very small,\n\t\t\t\t\tnegative, or undefined value.\n","This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.","Due to how addition is performed by computers, if a primitive is\n\t\t\t\t\t\tincremented past the maximum value possible for its storage space, the\n\t\t\t\t\t\tsystem will not recognize this, and therefore increment each bit as if it\n\t\t\t\t\t\tstill had extra space. Because of how negative numbers are represented in\n\t\t\t\t\t\tbinary, primitives interpreted as signed may \"wrap\" to very large negative\n\t\t\t\t\t\tvalues.","The following image processing code allocates a table for\n\t\t\t\t\t\timages.\n","The product uses untrusted input when calculating or using an\n\t\t\t\t\tarray index, but the product does not validate or incorrectly validates the\n\t\t\t\t\tindex to ensure the index references a valid position within the array.\n\t\t\t\t\n","Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area.\nIf the memory corrupted is data, rather than instructions, the system will continue to function with improper values.\nUse of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., \"buffer overflows\" are not always the result. This may result in the exposure or modification of sensitive data.\nIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled.\nA single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution.","In the code snippet below, an untrusted integer value is used to\n\t\t\t\t\t\treference an object in an array.\n","Storing a plaintext password in a configuration file allows\n\t\t\t\t\tanyone who can read the file access to the password-protected resource making\n\t\t\t\t\tthem an easy target for attackers.\n","The following excerpt from an XML configuration file defines a\n\t\t\t\t\t\tconnectionString for connecting to a database.\n","The software parses a formatted message or structure, but it\n\t\t\t\t\tdoes not handle or incorrectly handles a length field that is inconsistent with\n\t\t\t\t\tthe actual length of the associated data.\nIf an attacker can manipulate the length parameter associated with an\n\t\t\t\t\t\tinput such that it is inconsistent with the actual length of the input, this\n\t\t\t\t\t\tcan be leveraged to cause the target application to behave in unexpected,\n\t\t\t\t\t\tand possibly, malicious ways. One of the possible motives for doing so is to\n\t\t\t\t\t\tpass in arbitrarily large input to the application. Another possible\n\t\t\t\t\t\tmotivation is the modification of application state by including invalid\n\t\t\t\t\t\tdata for subsequent properties of the application. Such weaknesses commonly\n\t\t\t\t\t\tlead to attacks such as buffer overflows and execution of arbitrary\n\t\t\t\t\t\tcode.","In the following C/C++ example the method processMessageFromSocket()\n\t\t\t\t\t\twill get a message from a socket, placed into a buffer, and will parse the\n\t\t\t\t\t\tcontents of the buffer into a structure that contains the message length and\n\t\t\t\t\t\tthe message body. A for loop is used to copy the message body into a local\n\t\t\t\t\t\tcharacter string which will be passed to another method for\n\t\t\t\t\t\tprocessing.\n","The software does not correctly calculate the size to be used\n\t\t\t\t\twhen allocating a buffer, which could lead to a buffer\n\t\t\t\t\toverflow.\n","If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data.","This is a broad category. Some examples include:","The following code allocates memory for a maximum number of widgets.\n\t\t\t\t\t\tIt then gets a user-specified number of widgets, making sure that the user\n\t\t\t\t\t\tdoes not request too many. It then initializes the elements of the array\n\t\t\t\t\t\tusing InitializeWidget(). Because the number of widgets can vary for each\n\t\t\t\t\t\trequest, the code inserts a NULL pointer to signify the location of the last\n\t\t\t\t\t\twidget.\n","This entry has been deprecated because it was a duplicate of\n\t\t\t\t\tCWE-170. All content has been transferred to CWE-170.\n","\n","The software uses a function that accepts a format string as an\n\t\t\t\t\targument, but the format string originates from an external\n\t\t\t\t\tsource.\nWhen an attacker can modify an externally-controlled format string, this\n\t\t\t\t\t\tcan lead to buffer overflows, denial of service, or data representation\n\t\t\t\t\t\tproblems.","Format string problems allow for information disclosure which can severely simplify exploitation of the program.\nFormat string problems can result in the execution of arbitrary code.","The following program prints a string provided as an\n\t\t\t\t\t\targument.\n","The software does not correctly calculate the length of strings\n\t\t\t\t\tthat can contain wide or multi-byte characters.\n","This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nIn the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.","The following example would be exploitable if any of the commented\n\t\t\t\t\t\tincorrect malloc calls were used.\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as control elements or syntactic markers when they are sent to a\n\t\t\t\t\tdownstream component.\nMost languages and protocols have their own special elements such as\n\t\t\t\t\t\tcharacters and reserved words. These special elements can carry control\n\t\t\t\t\t\timplications. If software does not prevent external control or influence\n\t\t\t\t\t\tover the inclusion of such special elements, the control flow of the program\n\t\t\t\t\t\tmay be altered from what was intended. For example, both Unix and Windows\n\t\t\t\t\t\tinterpret the symbol < (\"less than\") as meaning \"read input from a\n\t\t\t\t\t\tfile\".","\n","Sensitive memory is cleared according to the source code, but\n\t\t\t\t\tcompiler optimizations leave the memory untouched when it is not read from\n\t\t\t\t\tagain, aka \"dead store removal.\"\nThis compiler optimization error occurs when:","This weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms.","The following code reads a password from the user, uses the password\n\t\t\t\t\t\tto connect to a back-end mainframe and then attempts to scrub the password\n\t\t\t\t\t\tfrom memory using memset().\n","The software does not neutralize or incorrectly neutralizes\n\t\t\t\t\tdelimiters.\n","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as parameter or argument delimiters when they are sent to a\n\t\t\t\t\tdownstream component.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as value delimiters when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as record delimiters when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as line delimiters when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as section delimiters when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as expression or command delimiters when they are sent to a\n\t\t\t\t\tdownstream component.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as input terminators when they are sent to a downstream\n\t\t\t\t\tcomponent.\nFor example, a \".\" in SMTP signifies the end of mail message data, whereas\n\t\t\t\t\t\ta null character can be used for the end of a string.","\n","The application does not properly handle when a leading\n\t\t\t\t\tcharacter or sequence (\"leader\") is missing or malformed, or if multiple leaders\n\t\t\t\t\tare used when only one should be allowed.\n","\n","Quotes injected into an application can be used to compromise a\n\t\t\t\t\tsystem. As data are parsed, an injected/absent/duplicate/malformed use of quotes\n\t\t\t\t\tmay cause the process to take unexpected actions.\n","\n","One or more system settings or configuration elements can be\n\t\t\t\t\texternally controlled by a user.\nAllowing external control of system settings can disrupt service or cause\n\t\t\t\t\t\tan application to behave in unexpected, and potentially malicious\n\t\t\t\t\t\tways.","The following C code accepts a number as one of its command line\n\t\t\t\t\t\tparameters and sets it as the host ID of the current machine.\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as escape, meta, or control character sequences when they are sent\n\t\t\t\t\tto a downstream component.\nAs data is parsed, an injected/absent/malformed delimiter may cause the\n\t\t\t\t\t\tprocess to take unexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as comment delimiters when they are sent to a downstream\n\t\t\t\t\tcomponent.\n","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as macro symbols when they are sent to a downstream\n\t\t\t\t\tcomponent.\n","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as substitution characters when they are sent to a downstream\n\t\t\t\t\tcomponent.\n","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as variable name delimiters when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, an injected delimiter may cause the process to take\n\t\t\t\t\t\tunexpected actions that result in an attack. Example: \"$\" for an environment\n\t\t\t\t\t\tvariable.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as wildcards or matching symbols when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, an injected element may cause the process to take\n\t\t\t\t\t\tunexpected actions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special elements that could be\n\t\t\t\t\tinterpreted as whitespace when they are sent to a downstream\n\t\t\t\t\tcomponent.\nThis can include space, tab, etc.","\n","The software does not properly handle the characters that are\n\t\t\t\t\tused to mark the beginning and ending of a group of entities, such as\n\t\t\t\t\tparentheses, brackets, and braces.\nPaired delimiters might include:","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes NUL characters or null bytes when\n\t\t\t\t\tthey are sent to a downstream component.\nAs data is parsed, an injected NUL character or null byte may cause the\n\t\t\t\t\t\tsoftware to believe the input is terminated earlier than it actually is, or\n\t\t\t\t\t\totherwise cause the input to be misinterpreted. This could then be used to\n\t\t\t\t\t\tinject potentially dangerous input that occurs after the null byte or\n\t\t\t\t\t\totherwise bypass validation routines and other protection mechanisms.","\n","Weaknesses in this attack-focused category do not properly\n\t\t\t\t\tfilter and interpret special elements in user-controlled input which could cause\n\t\t\t\t\tadverse effect on the software behavior and integrity.\n","The list of children for this entry is far from complete.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes leading special elements that\n\t\t\t\t\tcould be interpreted in unexpected ways when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, improperly handled leading special elements may cause\n\t\t\t\t\t\tthe process to take unexpected actions that result in an attack.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes multiple leading special elements\n\t\t\t\t\tthat could be interpreted in unexpected ways when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, improperly handled multiple leading special elements\n\t\t\t\t\t\tmay cause the process to take unexpected actions that result in an attack.\n\t\t\t\t\t","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes trailing special elements that\n\t\t\t\t\tcould be interpreted in unexpected ways when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, improperly handled trailing special elements may cause\n\t\t\t\t\t\tthe process to take unexpected actions that result in an attack.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes multiple trailing special\n\t\t\t\t\telements that could be interpreted in unexpected ways when they are sent to a\n\t\t\t\t\tdownstream component.\nAs data is parsed, improperly handled multiple trailing special elements\n\t\t\t\t\t\tmay cause the process to take unexpected actions that result in an\n\t\t\t\t\t\tattack.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes internal special elements that\n\t\t\t\t\tcould be interpreted in unexpected ways when they are sent to a downstream\n\t\t\t\t\tcomponent.\nAs data is parsed, improperly handled internal special elements may cause\n\t\t\t\t\t\tthe process to take unexpected actions that result in an attack.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes multiple internal special\n\t\t\t\t\telements that could be interpreted in unexpected ways when they are sent to a\n\t\t\t\t\tdownstream component.\nAs data is parsed, improperly handled multiple internal special elements\n\t\t\t\t\t\tmay cause the process to take unexpected actions that result in an\n\t\t\t\t\t\tattack.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not handle or incorrectly handles when an expected special element is\n\t\t\t\t\tmissing.\n","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not handle or incorrectly handles when an additional unexpected special\n\t\t\t\t\telement is missing.\n","\n","The software does not handle when an inconsistency exists\n\t\t\t\t\tbetween two or more special characters or reserved words.\nAn example of this problem would be if paired characters appear in the\n\t\t\t\t\t\twrong order, or if the special characters are not properly nested.","\n","The software does not terminate or incorrectly terminates a\n\t\t\t\t\tstring or array with a null character or equivalent\n\t\t\t\t\tterminator.\nNull termination errors frequently occur in two different ways. An\n\t\t\t\t\t\toff-by-one error could cause a null to be written out of bounds, leading to\n\t\t\t\t\t\tan overflow. Or, a program could use a strncpy() function call incorrectly,\n\t\t\t\t\t\twhich prevents a null terminator from being added at all. Other scenarios\n\t\t\t\t\t\tare possible.","The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code. \nIf a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could:\nMisplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory.\nShould the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code.","As currently described, this entry is more like a category than a\n\t\t\t\t\t\tweakness.","The following code reads from cfgfile and copies the input into\n\t\t\t\t\t\tinputbuf using strcpy(). The code mistakenly assumes that inputbuf will\n\t\t\t\t\t\talways contain a NULL terminator.\n","The software does not properly encode or decode the data,\n\t\t\t\t\tresulting in unexpected values.\n","This is more like a category than a weakness.","\n","The software does not properly handle when an input uses an\n\t\t\t\t\talternate encoding that is valid for the control sphere to which the input is\n\t\t\t\t\tbeing sent.\n","\n","The software decodes the same input twice, which can limit the\n\t\t\t\t\teffectiveness of any protection mechanism that occurs in between the decoding\n\t\t\t\t\toperations.\n","\n","The software does not properly handle when the same input uses\n\t\t\t\t\tseveral different (mixed) encodings.\n","\n","The software does not properly handle when an input contains\n\t\t\t\t\tUnicode encoding.\n","Windows provides the MultiByteToWideChar(), WideCharToMultiByte(),\n\t\t\t\t\t\tUnicodeToBytes(), and BytesToUnicode() functions to convert between\n\t\t\t\t\t\tarbitrary multibyte (usually ANSI) character strings and Unicode (wide\n\t\t\t\t\t\tcharacter) strings. The size arguments to these functions are specified in\n\t\t\t\t\t\tdifferent units, (one in bytes, the other in characters) making their use\n\t\t\t\t\t\tprone to error.\n","The software does not properly handle when all or part of an\n\t\t\t\t\tinput has been URL encoded.\n","\n","The software does not properly account for differences in case\n\t\t\t\t\tsensitivity when accessing or determining the properties of a resource, leading\n\t\t\t\t\tto inconsistent results.\nImproperly handled case sensitive data can lead to several possible\n\t\t\t\t\t\tconsequences, including:","In the following example, an XSS neutralization method replaces\n\t\t\t\t\t\tscript tags in user supplied input with a safe equivalent:\n","The software validates input before applying protection\n\t\t\t\t\tmechanisms that modify the input, which could allow an attacker to bypass the\n\t\t\t\t\tvalidation via dangerous inputs that only arise after the\n\t\t\t\t\tmodification.\nSoftware needs to validate data at the proper time, after data has been\n\t\t\t\t\t\tcanonicalized and cleansed. Early validation is susceptible to various\n\t\t\t\t\t\tmanipulations that result in dangerous inputs that are produced by\n\t\t\t\t\t\tcanonicalization and cleansing.","An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior.","The following code attempts to validate a given input path by\n\t\t\t\t\t\tchecking it against a whitelist and then return the canonical path. In this\n\t\t\t\t\t\tspecific case, the path is considered valid if it starts with the string\n\t\t\t\t\t\t\"/safe_dir/\".\n","The software validates input before it is canonicalized, which\n\t\t\t\t\tprevents the software from detecting data that becomes invalid after the\n\t\t\t\t\tcanonicalization step.\nThis can be used by an attacker to bypass the validation and launch\n\t\t\t\t\t\tattacks that expose weaknesses that would otherwise be prevented, such as\n\t\t\t\t\t\tinjection.","The following code attempts to validate a given input path by\n\t\t\t\t\t\tchecking it against a whitelist and then return the canonical path. In this\n\t\t\t\t\t\tspecific case, the path is considered valid if it starts with the string\n\t\t\t\t\t\t\"/safe_dir/\".\n","The software validates data before it has been filtered, which\n\t\t\t\t\tprevents the software from detecting data that becomes invalid after the\n\t\t\t\t\tfiltering step.\nThis can be used by an attacker to bypass the validation and launch\n\t\t\t\t\t\tattacks that expose weaknesses that would otherwise be prevented, such as\n\t\t\t\t\t\tinjection."," This script creates a subdirectory within a user directory and sets\n\t\t\t\t\t\tthe user as the owner. \n","The software filters data in a way that causes it to be reduced\n\t\t\t\t\tor \"collapsed\" into an unsafe value that violates an expected security\n\t\t\t\t\tproperty.\n","\n","An application uses a \"whitelist\" of acceptable values, but the\n\t\t\t\t\twhitelist includes at least one unsafe value, leading to resultant\n\t\t\t\t\tweaknesses.\n","\n","An application uses a \"blacklist\" of prohibited values, but the\n\t\t\t\t\tblacklist is incomplete.\nIf an incomplete blacklist is used as a security mechanism, then the\n\t\t\t\t\t\tsoftware may allow unintended values to pass into the application logic.\n\t\t\t\t\t","The following code attempts to stop XSS attacks by removing all\n\t\t\t\t\t\toccurences of \"script\" in an input string.\n","The software specifies a regular expression in a way that\n\t\t\t\t\tcauses data to be improperly matched or compared.\nWhen the regular expression is used in protection mechanisms such as\n\t\t\t\t\t\tfiltering or validation, this may allow an attacker to bypass the intended\n\t\t\t\t\t\trestrictions on the incoming data.","When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors.\nIn PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses.","The following code takes phone numbers as input, and uses a regular\n\t\t\t\t\t\texpression to reject invalid phone numbers.\n","A regular expression is overly restrictive, which prevents\n\t\t\t\t\tdangerous values from being detected.\n","\n","The software performs a comparison that only examines a portion\n\t\t\t\t\tof a factor before determining whether there is a match, such as a substring,\n\t\t\t\t\tleading to resultant weaknesses.\nFor example, an attacker might succeed in authentication by providing a\n\t\t\t\t\t\tsmall password that matches the associated portion of the larger, correct\n\t\t\t\t\t\tpassword.","This example defines a fixed username and password. The\n\t\t\t\t\t\tAuthenticateUser() function is intended to accept a username and a password\n\t\t\t\t\t\tfrom an untrusted user, and check to ensure that it matches the username and\n\t\t\t\t\t\tpassword. If the username and password match, AuthenticateUser() is intended\n\t\t\t\t\t\tto indicate that authentication succeeded. \n","The software makes invalid assumptions about how protocol data\n\t\t\t\t\tor memory is organized at a lower level, resulting in unintended program\n\t\t\t\t\tbehavior.\nWhen changing platforms or protocol versions, data may move in unintended\n\t\t\t\t\t\tways. For example, some architectures may place local variables A and B\n\t\t\t\t\t\tright next to each other with A on top; some may place them next to each\n\t\t\t\t\t\tother with B on top; and others may add some padding to each. The padding\n\t\t\t\t\t\tsize may vary to ensure that each variable is aligned to a proper word size. ","Can result in unintended modifications or exposure of sensitive memory.","In this example function, the memory address of variable b is\n\t\t\t\t\t\tderived by adding 1 to the address of variable a. This derived address is\n\t\t\t\t\t\tthen used to assign the value 0 to b. \n","The software performs a calculation that can produce an integer\n\t\t\t\t\toverflow or wraparound, when the logic assumes that the resulting value will\n\t\t\t\t\talways be larger than the original value. This can introduce other weaknesses\n\t\t\t\t\twhen the calculation is used for resource management or execution\n\t\t\t\t\tcontrol.\nAn integer overflow or wraparound occurs when an integer value is\n\t\t\t\t\t\tincremented to a value that is too large to store in the associated\n\t\t\t\t\t\trepresentation. When this occurs, the value may wrap to become a very small\n\t\t\t\t\t\tor negative number. While this may be intended behavior in circumstances\n\t\t\t\t\t\tthat rely on wrapping, it can have security consequences if the wrap is\n\t\t\t\t\t\tunexpected. This is especially the case if the integer overflow can be\n\t\t\t\t\t\ttriggered using user-supplied inputs. This becomes security-critical when\n\t\t\t\t\t\tthe result is used to control looping, make a security decision, or\n\t\t\t\t\t\tdetermine the offset or size in behaviors such as memory allocation,\n\t\t\t\t\t\tcopying, concatenation, etc.","This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.","The following image processing code allocates a table for\n\t\t\t\t\t\timages.\n","The product subtracts one value from another, such that the\n\t\t\t\t\tresult is less than the minimum allowable integer value, which produces a value\n\t\t\t\t\tthat is not equal to the correct result.\nThis can happen in signed and unsigned cases.","This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.","The following example subtracts from a 32 bit signed\n\t\t\t\t\t\tinteger.\n","A product calculates or uses an incorrect maximum or minimum\n\t\t\t\t\tvalue that is 1 more, or 1 less, than the correct value.\n","This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.","The following code allocates memory for a maximum number of widgets.\n\t\t\t\t\t\tIt then gets a user-specified number of widgets, making sure that the user\n\t\t\t\t\t\tdoes not request too many. It then initializes the elements of the array\n\t\t\t\t\t\tusing InitializeWidget(). Because the number of widgets can vary for each\n\t\t\t\t\t\trequest, the code inserts a NULL pointer to signify the location of the last\n\t\t\t\t\t\twidget.\n","The software performs an operation on a number that causes it\n\t\t\t\t\tto be sign extended when it is transformed into a larger data type. When the\n\t\t\t\t\toriginal number is negative, this can produce unexpected values that lead to\n\t\t\t\t\tresultant weaknesses.\n","When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range.","This entry is closely associated with signed-to-unsigned conversion errors\n\t\t\t\t\t\t(CWE-195) and other numeric errors. These relationships need to be more\n\t\t\t\t\t\tclosely examined within CWE.","The following code reads a maximum size and performs a sanity check\n\t\t\t\t\t\ton that size. It then performs a strncpy, assuming it will not exceed the\n\t\t\t\t\t\tboundaries of the array. While the use of \"short s\" is forced in this\n\t\t\t\t\t\tparticular example, short int's are frequently used within real-world code,\n\t\t\t\t\t\tsuch as code that processes structured data.\n","The software uses a signed primitive and performs a cast to an\n\t\t\t\t\tunsigned primitive, which can produce an unexpected value if the value of the\n\t\t\t\t\tsigned primitive can not be represented using an unsigned\n\t\t\t\t\tprimitive.\n It is dangerous to rely on implicit casts between signed and unsigned\n\t\t\t\t\t\tnumbers because the result can take on an unexpected value and violate\n\t\t\t\t\t\tassumptions made by the program. ","Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities.","In this example the variable amount can hold a negative value when\n\t\t\t\t\t\tit is returned. Because the function is declared to return an unsigned int,\n\t\t\t\t\t\tamount will be implicitly converted to unsigned.\n","The software uses an unsigned primitive and performs a cast to\n\t\t\t\t\ta signed primitive, which can produce an unexpected value if the value of the\n\t\t\t\t\tunsigned primitive can not be represented using a signed\n\t\t\t\t\tprimitive.\nAlthough less frequent an issue than signed-to-unsigned conversion,\n\t\t\t\t\t\tunsigned-to-signed conversion can be the perfect precursor to dangerous\n\t\t\t\t\t\tbuffer underwrite conditions that allow attackers to move down the stack\n\t\t\t\t\t\twhere they otherwise might not have access in a normal buffer overflow\n\t\t\t\t\t\tcondition. Buffer underwrites occur frequently when large unsigned values\n\t\t\t\t\t\tare cast to signed values, and then used as indexes into a buffer or for\n\t\t\t\t\t\tpointer arithmetic.","Incorrect sign conversions generally lead to undefined behavior, and therefore crashes.\nIf a poor cast lead to a buffer overflow or similar condition, data integrity may be affected.\nImproper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.","\n","Truncation errors occur when a primitive is cast to a primitive\n\t\t\t\t\tof a smaller size and data is lost in the conversion.\nWhen a primitive is cast to a smaller primitive, the high order bits of\n\t\t\t\t\t\tthe large value are lost in the conversion, potentially resulting in an\n\t\t\t\t\t\tunexpected value that is not equal to the original value. This value may be\n\t\t\t\t\t\trequired as an index into a buffer, a loop iterator, or simply necessary\n\t\t\t\t\t\tstate data. In any case, the value cannot be trusted and the system will be\n\t\t\t\t\t\tin an undefined state. While this method may be employed viably to isolate\n\t\t\t\t\t\tthe low bits of a value, this usage is rare, and truncation usually implies\n\t\t\t\t\t\tthat an implementation error has occurred.","The true value of the data is lost and corrupted data is used.","This example, while not exploitable, shows the possible mangling of\n\t\t\t\t\t\tvalues associated with truncation errors:\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not account for byte ordering (e.g. big-endian and little-endian) when\n\t\t\t\t\tprocessing the input, causing an incorrect number or value to be\n\t\t\t\t\tused.\n","\n","The product does not validate or incorrectly validates input\n\t\t\t\t\tthat can affect the control flow or data flow of a\n\t\t\t\t\tprogram.\nWhen software does not validate input properly, an attacker is able to\n\t\t\t\t\t\tcraft the input in a form that is not expected by the rest of the\n\t\t\t\t\t\tapplication. This will lead to parts of the system receiving unintended\n\t\t\t\t\t\tinput, which may result in altered control flow, arbitrary control of a\n\t\t\t\t\t\tresource, or arbitrary code execution.","An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.\nAn attacker could read confidential data if they are able to control resource references.\nAn attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.","Input validation - whether missing or incorrect - is such an essential and\n\t\t\t\t\t\twidespread part of secure development that it is implicit in many different\n\t\t\t\t\t\tweaknesses. Traditionally, problems such as buffer overflows and XSS have\n\t\t\t\t\t\tbeen classified as input validation problems by many security professionals.\n\t\t\t\t\t\tHowever, input validation is not necessarily the only protection mechanism\n\t\t\t\t\t\tavailable for avoiding such problems, and in some cases it is not even\n\t\t\t\t\t\tsufficient. The CWE team has begun capturing these subtleties in chains\n\t\t\t\t\t\twithin the Research Concepts view (CWE-1000), but more work is\n\t\t\t\t\t\tneeded.","This example demonstrates a shopping interaction in which the user\n\t\t\t\t\t\tis free to specify the quantity of items to be purchased and a total is\n\t\t\t\t\t\tcalculated.\n","An information exposure is the intentional or unintentional\n\t\t\t\t\tdisclosure of information to an actor that is not explicitly authorized to have\n\t\t\t\t\taccess to that information.\nThe information either","\n","The accidental exposure of sensitive information through sent\n\t\t\t\t\tdata refers to the transmission of data which are either sensitive in and of\n\t\t\t\t\titself or useful in the further exploitation of the system through standard data\n\t\t\t\t\tchannels.\n","Sensitive data may be exposed to attackers.","The following is an actual MySQL error statement:\n","When trying to keep information confidential, an attacker can\n\t\t\t\t\toften infer some of the information by using statistics.\nIn situations where data should not be tied to individual users, but a\n\t\t\t\t\t\tlarge number of users should be able to make queries that \"scrub\" the\n\t\t\t\t\t\tidentity of users, it may be possible to get information about a user --\n\t\t\t\t\t\te.g., by specifying search terms that are known to be unique to that\n\t\t\t\t\t\tuser.","Sensitive information may possibly be leaked through data queries accidentally.","See the book Translucent Databases for examples.\n","The product behaves differently or sends different responses in\n\t\t\t\t\ta way that exposes security-relevant information about the state of the product,\n\t\t\t\t\tsuch as whether a particular operation was successful or\n\t\t\t\t\tnot.\n","An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system.","The following code checks validity of the supplied username and\n\t\t\t\t\t\tpassword and notifies the user of a successful or failed login. \n","The software provides different responses to incoming requests\n\t\t\t\t\tin a way that allows an actor to determine system state information that is\n\t\t\t\t\toutside of that actor's control sphere.\nThis issue frequently occurs during authentication, where a difference in\n\t\t\t\t\t\tfailed-login messages could allow an attacker to determine if the username\n\t\t\t\t\t\tis valid or not. These exposures can be inadvertent (bug) or intentional\n\t\t\t\t\t\t(design).","The following code checks validity of the supplied username and\n\t\t\t\t\t\tpassword and notifies the user of a successful or failed login. \n","The product's actions indicate important differences based on\n\t\t\t\t\t(1) the internal state of the product or (2) differences from other products in\n\t\t\t\t\tthe same class.\nFor example, attacks such as OS fingerprinting rely heavily on both\n\t\t\t\t\t\tbehavioral and response discrepancies.","\n","Two separate operations in a product cause the product to\n\t\t\t\t\tbehave differently in a way that is observable to an attacker and reveals\n\t\t\t\t\tsecurity-relevant information about the internal state of the product, such as\n\t\t\t\t\twhether a particular operation was successful or not.\n","\n","The product behaves differently than other products like it, in\n\t\t\t\t\ta way that is observable to an attacker and exposes security-relevant\n\t\t\t\t\tinformation about which product is being used.\n","\n","Two separate operations in a product require different amounts\n\t\t\t\t\tof time to complete, in a way that is observable to an actor and reveals\n\t\t\t\t\tsecurity-relevant information about the state of the product, such as whether a\n\t\t\t\t\tparticular operation was successful or not.\n","\n","The software generates an error message that includes sensitive\n\t\t\t\t\tinformation about its environment, users, or associated\n\t\t\t\t\tdata.\nThe sensitive information may be valuable information on its own (such as\n\t\t\t\t\t\ta password), or it may be useful for launching other, more deadly attacks.\n\t\t\t\t\t\tIf an attack fails, an attacker may use error information provided by the\n\t\t\t\t\t\tserver to launch another more focused attack. For example, an attempt to\n\t\t\t\t\t\texploit a path traversal weakness (CWE-22) might yield the full pathname of\n\t\t\t\t\t\tthe installed application. In turn, this could be used to select the proper\n\t\t\t\t\t\tnumber of \"..\" sequences to navigate to the targeted file. An attack using\n\t\t\t\t\t\tSQL injection (CWE-89) might not initially succeed, but an error message\n\t\t\t\t\t\tcould reveal the malformed query, which would expose query logic and\n\t\t\t\t\t\tpossibly even passwords or other sensitive information used within the\n\t\t\t\t\t\tquery.","Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.","In the following example, sensitive information might be printed\n\t\t\t\t\t\tdepending on the exception that occurs.\n","The software identifies an error condition and creates its own\n\t\t\t\t\tdiagnostic or error messages that contain sensitive\n\t\t\t\t\tinformation.\n","The following code uses custom configuration files for each user in\n\t\t\t\t\t\tthe application. It checks to see if the file exists on the system before\n\t\t\t\t\t\tattempting to open and use the file. If the configuration file does not\n\t\t\t\t\t\texist, then an error is generated, and the application exits. \n","The software performs an operation that triggers an external\n\t\t\t\t\tdiagnostic or error message that is not directly generated by the software, such\n\t\t\t\t\tas an error generated by the programming language interpreter that the software\n\t\t\t\t\tuses. The error can contain sensitive system information.\n","\n","The software uses a resource that contains sensitive data, but\n\t\t\t\t\tit does not properly remove that data before it stores, transfers, or shares the\n\t\t\t\t\tresource with actors in another control sphere. \nResources that may contain sensitive data include documents, packets,\n\t\t\t\t\t\tmessages, databases, etc. While this data may be useful to an individual\n\t\t\t\t\t\tuser or small set of users who share the resource, it may need to be removed\n\t\t\t\t\t\tbefore the resource can be shared outside of the trusted group. The process\n\t\t\t\t\t\tof removal is sometimes called cleansing or scrubbing. ","Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.","This code either generates a public HTML user information page or a\n\t\t\t\t\t\tJSON response containing the same user information. \n","A product's design or configuration explicitly requires the\n\t\t\t\t\tpublication of information that could be regarded as sensitive by an\n\t\t\t\t\tadministrator.\n","This code displays some information on a web page.\n","A process is invoked with sensitive arguments, environment\n\t\t\t\t\tvariables, or other elements that can be seen by other processes on the\n\t\t\t\t\toperating system.\nMany operating systems allow a user to list information about processes\n\t\t\t\t\t\tthat are owned by other users. This information could include command line\n\t\t\t\t\t\targuments or environment variable settings. When this data contains\n\t\t\t\t\t\tsensitive information such as credentials, it might allow other users to\n\t\t\t\t\t\tlaunch an attack against the software or related resources.","In the example below, the password for a keystore file is read from\n\t\t\t\t\t\ta system property.\n","The application contains debugging code that can expose\n\t\t\t\t\tsensitive information to untrusted parties.\n","The following program changes its behavior based on a debug\n\t\t\t\t\t\tflag.\n","This tries to cover various problems in which improper data are\n\t\t\t\t\tincluded within a \"container.\"\n","This entry is closely associated with others related to encapsulation and\n\t\t\t\t\t\tpermissions, and might ultimately prove to be a duplicate.","\n","This weakness has been deprecated because it incorporated and\n\t\t\t\t\tconfused multiple weaknesses. The issues formerly covered in this weakness can\n\t\t\t\t\tbe found at CWE-766 and CWE-767.\n","\n","This weakness has been deprecated because it was a duplicate of\n\t\t\t\t\tCWE-493. All content has been transferred to CWE-493.\n","\n","The application stores sensitive data under the web document\n\t\t\t\t\troot with insufficient access control, which might make it accessible to\n\t\t\t\t\tuntrusted parties.\n","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tis intended to identify a file or directory that is located underneath a\n\t\t\t\t\trestricted parent directory, but the software does not properly neutralize\n\t\t\t\t\tspecial elements within the pathname that can cause the pathname to resolve to a\n\t\t\t\t\tlocation that is outside of the restricted directory.\nMany file operations are intended to take place within a restricted\n\t\t\t\t\t\tdirectory. By using special elements such as \"..\" and \"/\" separators,\n\t\t\t\t\t\tattackers can escape outside of the restricted location to access files or\n\t\t\t\t\t\tdirectories that are elsewhere on the system. One of the most common special\n\t\t\t\t\t\telements is the \"../\" sequence, which in most modern operating systems is\n\t\t\t\t\t\tinterpreted as the parent directory of the current location. This is\n\t\t\t\t\t\treferred to as relative path traversal. Path traversal also covers the use\n\t\t\t\t\t\tof absolute pathnames such as \"/usr/local/bin\", which may also be useful in\n\t\t\t\t\t\taccessing unexpected files. This is referred to as absolute path\n\t\t\t\t\t\ttraversal.","The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","The following code could be for a social networking application in\n\t\t\t\t\t\twhich each user's profile information is stored in a separate file. All\n\t\t\t\t\t\tfiles are stored in a single directory.\n","The application stores sensitive data under the FTP document\n\t\t\t\t\troot with insufficient access control, which might make it accessible to\n\t\t\t\t\tuntrusted parties.\n","Various Unix FTP servers require a password file that is under the FTP\n\t\t\t\t\t\troot, due to use of chroot.","\n","The software does not record, or improperly records,\n\t\t\t\t\tsecurity-relevant information that leads to an incorrect decision or hampers\n\t\t\t\t\tlater analysis.\nThis can be resultant, e.g. a buffer overflow might trigger a crash before\n\t\t\t\t\t\tthe product can log the event.","\n","The application truncates the display, recording, or processing\n\t\t\t\t\tof security-relevant information in a way that can obscure the source or nature\n\t\t\t\t\tof an attack.\n","The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.","\n","The application does not record or display information that\n\t\t\t\t\twould be important for identifying the source or nature of an attack, or\n\t\t\t\t\tdetermining if an action is safe.\n","The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice."," This code logs suspicious multiple login attempts. \n","The software records security-relevant information according to\n\t\t\t\t\tan alternate name of the affected entity, instead of the canonical\n\t\t\t\t\tname.\n"," This code prints the contents of a file if a user has permission. \n","This weakness can be found at CWE-199.\n","\n","The software does not fully clear previously used information\n\t\t\t\t\tin a data structure, file, or other resource, before making that resource\n\t\t\t\t\tavailable to a party in another control sphere.\nThis typically results from new data that is not as long as the old data,\n\t\t\t\t\t\twhich leaves portions of the old data still available. Equivalent errors can\n\t\t\t\t\t\toccur in other situations where the length of data is variable but the\n\t\t\t\t\t\tassociated data structure is not. If memory is not cleared after use, it may\n\t\t\t\t\t\tallow unintended actors to read the data when the memory is reallocated.\n\t\t\t\t\t","This entry needs modification to clarify the differences with CWE-212. The\n\t\t\t\t\t\tdescription also combines two problems that are distinct from the CWE\n\t\t\t\t\t\tresearch perspective - the inadvertent transfer of information to another\n\t\t\t\t\t\tsphere, and improper initialization/shutdown. Some of the associated\n\t\t\t\t\t\ttaxonomy mappings reflect these different uses.","\n","The software uses an API in a manner contrary to its intended\n\t\t\t\t\tuse.\nAn API is a contract between a caller and a callee. The most common forms\n\t\t\t\t\t\tof API misuse occurs when the caller does not honor its end of this\n\t\t\t\t\t\tcontract. For example, if a program does not call chdir() after calling\n\t\t\t\t\t\tchroot(), it violates the contract that specifies how to change the active\n\t\t\t\t\t\troot directory in a secure fashion. Another good example of library abuse is\n\t\t\t\t\t\texpecting the callee to return trustworthy DNS information to the caller. In\n\t\t\t\t\t\tthis case, the caller misuses the callee API by making certain assumptions\n\t\t\t\t\t\tabout its behavior (that the return value can be used for authentication\n\t\t\t\t\t\tpurposes). One can also violate the caller-callee contract from the other\n\t\t\t\t\t\tside. For example, if a coder subclasses SecureRandom and returns a\n\t\t\t\t\t\tnon-random value, the contract is violated.","\n","The product does not handle or incorrectly handles input that\n\t\t\t\t\tis not syntactically well-formed with respect to the associated specification.\n\t\t\t\t\n","If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors.","This entry needs more investigation. Public vulnerability research\n\t\t\t\t\t\tgenerally focuses on the manipulations that generate invalid structure,\n\t\t\t\t\t\tinstead of the weaknesses that are exploited by those manipulations. For\n\t\t\t\t\t\texample, a common attack involves making a request that omits a required\n\t\t\t\t\t\tfield, which can trigger a crash in some cases. The crash could be due to a\n\t\t\t\t\t\tnamed chain such as CWE-690 (Unchecked Return Value to NULL Pointer\n\t\t\t\t\t\tDereference), but public reports rarely cover this aspect of a\n\t\t\t\t\t\tvulnerability.","This application has registered to handle a URL when sent an\n\t\t\t\t\t\tintent:\n","The software does not properly handle when the expected number\n\t\t\t\t\tof values for parameters, fields, or arguments is not provided in input, or if\n\t\t\t\t\tthose values are undefined.\n","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\tsequences such as \"..\" that can resolve to a location that is outside of that\n\t\t\t\t\tdirectory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","The following URLs are vulnerable to this attack:\n","The software does not handle or incorrectly handles when a\n\t\t\t\t\tparameter, field, or argument name is specified, but the associated value is\n\t\t\t\t\tmissing, i.e. it is empty, blank, or null.\n","This application has registered to handle a URL when sent an\n\t\t\t\t\t\tintent:\n","The software does not handle or incorrectly handles when more\n\t\t\t\t\tvalues are provided than expected.\n","\n","The software does not handle or incorrectly handles when a\n\t\t\t\t\tvalue is not defined or supported for the associated parameter, field, or\n\t\t\t\t\targument name.\n","In this example, an address parameter is read and trimmed of\n\t\t\t\t\t\twhitespace.\n"," The software does not properly handle when the expected number\n\t\t\t\t\tof parameters, fields, or arguments is not provided in input, or if those\n\t\t\t\t\tparameters are undefined. \n","This application has registered to handle a URL when sent an\n\t\t\t\t\t\tintent:\n","If too few arguments are sent to a function, the function will\n\t\t\t\t\tstill pop the expected number of arguments from the stack. Potentially, a\n\t\t\t\t\tvariable number of arguments could be exhausted in a function as\n\t\t\t\t\twell.\n","There is the potential for arbitrary code execution with privileges of the vulnerable program if function parameter list is exhausted.\nPotentially a program could fail if it needs more arguments then are available.","This entry will be deprecated in a future version of CWE. The term\n\t\t\t\t\t\t\"missing parameter\" was used in both PLOVER and CLASP, with completely\n\t\t\t\t\t\tdifferent meanings. However, data from both taxonomies was merged into this\n\t\t\t\t\t\tentry. In PLOVER, it was meant to cover malformed inputs that do not contain\n\t\t\t\t\t\trequired parameters, such as a missing parameter in a CGI request. This\n\t\t\t\t\t\tentry's observed examples and classification came from PLOVER. However, the\n\t\t\t\t\t\tdescription, demonstrative example, and other information are derived from\n\t\t\t\t\t\tCLASP. They are related to an incorrect number of function arguments, which\n\t\t\t\t\t\tis already covered by CWE-685.","\n","The software does not handle or incorrectly handles when the\n\t\t\t\t\tnumber of parameters, fields, or arguments with the same name exceeds the\n\t\t\t\t\texpected amount.\n","\n","The software does not handle or incorrectly handles when a\n\t\t\t\t\tparticular parameter, field, or argument name is not defined or supported by the\n\t\t\t\t\tproduct.\n","\n","The software does not handle or incorrectly handles inputs that\n\t\t\t\t\tare related to complex structures.\n","\n","The software does not handle or incorrectly handles when a\n\t\t\t\t\tparticular structural element is not completely specified.\n","\n","The software does not properly handle when a particular element\n\t\t\t\t\tis not completely specified.\n","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t\"../\" sequences that can resolve to a location that is outside of that\n\t\t\t\t\tdirectory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The software does not handle or incorrectly handles when two or\n\t\t\t\t\tmore structural elements should be consistent, but are\n\t\t\t\t\tnot.\n","\n","The software does not handle or incorrectly handles when a\n\t\t\t\t\tparticular element is not the expected type, e.g. it expects a digit (0-9) but\n\t\t\t\t\tis provided with a letter (A-Z).\n","\n","The program calls a function that can never be guaranteed to\n\t\t\t\t\twork safely.\nCertain functions behave in dangerous ways regardless of how they are\n\t\t\t\t\t\tused. Functions in this category were often implemented without taking\n\t\t\t\t\t\tsecurity concerns into account. The gets() function is unsafe because it\n\t\t\t\t\t\tdoes not perform bounds checking on the size of its input. An attacker can\n\t\t\t\t\t\teasily send arbitrarily-sized input to gets() and overflow the destination\n\t\t\t\t\t\tbuffer. Similarly, the >> operator is unsafe to use when\n\t\t\t\t\t\treading into a statically-allocated character array because it does not\n\t\t\t\t\t\tperform bounds checking on the size of its input. An attacker can easily\n\t\t\t\t\t\tsend arbitrarily-sized input to the >> operator and overflow\n\t\t\t\t\t\tthe destination buffer.","The code below calls gets() to read information into a\n\t\t\t\t\t\tbuffer.\n","The program uses the chroot() system call to create a jail, but\n\t\t\t\t\tdoes not change the working directory afterward. This does not prevent access to\n\t\t\t\t\tfiles outside of the jail.\nImproper use of chroot() may allow attackers to escape from the chroot\n\t\t\t\t\t\tjail. The chroot() function call does not change the process's current\n\t\t\t\t\t\tworking directory, so relative paths may still refer to file system\n\t\t\t\t\t\tresources outside of the chroot jail after chroot() has been called.","The chroot() system call allows a process to change its perception of the\n\t\t\t\t\t\troot directory of the file system. After properly invoking chroot(), a\n\t\t\t\t\t\tprocess cannot access any files outside the directory tree defined by the\n\t\t\t\t\t\tnew root directory. Such an environment is called a chroot jail and is\n\t\t\t\t\t\tcommonly used to prevent the possibility that a processes could be subverted\n\t\t\t\t\t\tand used to access unauthorized files. For instance, many FTP servers run in\n\t\t\t\t\t\tchroot jails to prevent an attacker who discovers a new vulnerability in the\n\t\t\t\t\t\tserver from being able to download the password file or other sensitive\n\t\t\t\t\t\tfiles on the system.","Consider the following source code from a (hypothetical) FTP\n\t\t\t\t\t\tserver:\n","Using realloc() to resize buffers that store sensitive\n\t\t\t\t\tinformation can leave the sensitive information exposed to attack, because it is\n\t\t\t\t\tnot removed from memory.\nWhen sensitive data such as a password or an encryption key is not removed\n\t\t\t\t\t\tfrom memory, it could be exposed to an attacker using a \"heap inspection\"\n\t\t\t\t\t\tattack that reads the sensitive data using memory dumps or other methods.\n\t\t\t\t\t\tThe realloc() function is commonly used to increase the size of a block of\n\t\t\t\t\t\tallocated memory. This operation often requires copying the contents of the\n\t\t\t\t\t\told memory block into a new and larger block. This operation leaves the\n\t\t\t\t\t\tcontents of the original block intact but inaccessible to the program,\n\t\t\t\t\t\tpreventing the program from being able to scrub sensitive data from memory.\n\t\t\t\t\t\tIf an attacker can later examine the contents of a memory dump, the\n\t\t\t\t\t\tsensitive data could be exposed.","Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use.","The following code calls realloc() on a buffer containing sensitive\n\t\t\t\t\t\tdata:\n","The J2EE application directly manages connections, instead of\n\t\t\t\t\tusing the container's connection management facilities.\n The J2EE standard forbids the direct management of connections. It\n\t\t\t\t\t\trequires that applications use the container's resource management\n\t\t\t\t\t\tfacilities to obtain connections to resources. Every major web application\n\t\t\t\t\t\tcontainer provides pooled database connection management as part of its\n\t\t\t\t\t\tresource management framework. Duplicating this functionality in an\n\t\t\t\t\t\tapplication is difficult and error prone, which is part of the reason it is\n\t\t\t\t\t\tforbidden under the J2EE standard.","In the following example, the class DatabaseConnection opens and\n\t\t\t\t\t\tmanages a connection to a database for a J2EE application. The method\n\t\t\t\t\t\topenDatabaseConnection opens a connection to the database using a\n\t\t\t\t\t\tDriverManager to create the Connection object conn to the database specified\n\t\t\t\t\t\tin the string constant CONNECT_STRING.\n","The J2EE application directly uses sockets instead of using\n\t\t\t\t\tframework method calls.\n The J2EE standard permits the use of sockets only for the purpose of\n\t\t\t\t\t\tcommunication with legacy systems when no higher-level protocol is\n\t\t\t\t\t\tavailable. Authoring your own communication protocol requires wrestling with\n\t\t\t\t\t\tdifficult security issues.","The following example opens a socket to connect to a remote\n\t\t\t\t\t\tserver.\n","This entry has been deprecated because it was a duplicate of\n\t\t\t\t\tCWE-350. All content has been transferred to CWE-350.\n","\n","An exception is thrown from a function, but it is not\n\t\t\t\t\tcaught.\nWhen an exception is not caught, it may cause the program to crash or\n\t\t\t\t\t\texpose sensitive information.","An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.","The following example attempts to resolve a hostname.\n","This entry has been deprecated because of name confusion and an\n\t\t\t\t\taccidental combination of multiple weaknesses. Most of its content has been\n\t\t\t\t\ttransferred to CWE-785.\n","This entry was deprecated for several reasons. The primary reason is\n\t\t\t\t\t\tover-loading of the \"path manipulation\" term and the description. The\n\t\t\t\t\t\toriginal description for this entry was the same as that for the \"Often\n\t\t\t\t\t\tMisused: File System\" item in the original Seven Pernicious Kingdoms paper.\n\t\t\t\t\t\tHowever, Seven Pernicious Kingdoms also has a \"Path Manipulation\" phrase\n\t\t\t\t\t\tthat is for external control of pathnames (CWE-73), which is a factor in\n\t\t\t\t\t\tsymbolic link following and path traversal, neither of which is explicitly\n\t\t\t\t\t\tmentioned in 7PK. Fortify uses the phrase \"Often Misused: Path Manipulation\"\n\t\t\t\t\t\tfor a broader range of problems, generally for issues related to buffer\n\t\t\t\t\t\tmanagement. Given the multiple conflicting uses of this term, there is a\n\t\t\t\t\t\tchance that CWE users may have incorrectly mapped to this entry. ","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t\"/../\" sequences that can resolve to a location that is outside of that\n\t\t\t\t\tdirectory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The software performs an operation at a privilege level that is\n\t\t\t\t\thigher than the minimum level required, which creates new weaknesses or\n\t\t\t\t\tamplifies the consequences of other weaknesses.\nNew weaknesses can be exposed because running with extra privileges, such\n\t\t\t\t\t\tas root or Administrator, can disable the normal security checks being\n\t\t\t\t\t\tperformed by the operating system or surrounding environment. Other\n\t\t\t\t\t\tpre-existing weaknesses can turn into security vulnerabilities if they occur\n\t\t\t\t\t\twhile operating at raised privileges.","An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data.","CWE-271, CWE-272, and CWE-250 are all closely related and possibly\n\t\t\t\t\t\toverlapping. CWE-271 is probably better suited as a category. Both CWE-272\n\t\t\t\t\t\tand CWE-250 are in active use by the community. The \"least privilege\" phrase\n\t\t\t\t\t\thas multiple interpretations.","This code temporarily raises the program's privileges to allow\n\t\t\t\t\t\tcreation of a new user folder.\n","The software does not check the return value from a method or\n\t\t\t\t\tfunction, which can prevent it from detecting unexpected states and\n\t\t\t\t\tconditions.\nTwo common programmer assumptions are \"this function call can never fail\"\n\t\t\t\t\t\tand \"it doesn't matter if this function call fails\". If an attacker can\n\t\t\t\t\t\tforce the function to fail or otherwise return a value that is not expected,\n\t\t\t\t\t\tthen the subsequent program logic could lead to a vulnerability, because the\n\t\t\t\t\t\tsoftware is not in a state that the programmer assumes. For example, if the\n\t\t\t\t\t\tprogram calls a function to drop privileges but does not check the return\n\t\t\t\t\t\tcode to ensure that privileges were successfully dropped, then the program\n\t\t\t\t\t\twill continue to operate with the higher privileges.","An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.","Many functions will return some value about the success of their actions.\n\t\t\t\t\t\tThis will alert the program whether or not to handle any errors caused by\n\t\t\t\t\t\tthat function.","Consider the following code segment:\n","The software incorrectly checks a return value from a function,\n\t\t\t\t\twhich prevents the software from detecting errors or exceptional\n\t\t\t\t\tconditions.\nImportant and common functions will return some value about the success of\n\t\t\t\t\t\tits actions. This will alert the program whether or not to handle any errors\n\t\t\t\t\t\tcaused by that function.","An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.","This code attempts to allocate memory for 4 integers and checks if\n\t\t\t\t\t\tthe allocation succeeds.\n","Storing a password in plaintext may result in a system\n\t\t\t\t\tcompromise.\n Password management issues occur when a password is stored in plaintext\n\t\t\t\t\t\tin an application's properties or configuration file. Storing a plaintext\n\t\t\t\t\t\tpassword in a configuration file allows anyone who can read the file access\n\t\t\t\t\t\tto the password-protected resource.","The following code reads a password from a properties file and uses\n\t\t\t\t\t\tthe password to connect to a database.\n"," The storage of passwords in a recoverable format makes them\n\t\t\t\t\tsubject to password reuse attacks by malicious users. In fact, it should be\n\t\t\t\t\tnoted that recoverable encrypted passwords provide no significant benefit over\n\t\t\t\t\tplaintext passwords since they are subject not only to reuse by malicious\n\t\t\t\t\tattackers but also by malicious insiders. If a system administrator can recover\n\t\t\t\t\ta password directly, or use a brute force search on the available information,\n\t\t\t\t\tthe administrator can use the password on other accounts.\n","User's passwords may be revealed.\nRevealed passwords may be reused elsewhere to impersonate the users in question.","The meaning of this node needs to be investigated more closely, especially\n\t\t\t\t\t\twith respect to what is meant by \"recoverable.\"","Both of these examples verify a password by comparing it to a stored\n\t\t\t\t\t\tcompressed version.\n","Using an empty string as a password is\n\t\t\t\t\tinsecure.\n","The following examples show a portion of properties and\n\t\t\t\t\t\tconfiguration files for Java and ASP.NET applications. The files include\n\t\t\t\t\t\tusername and password information but the password is provided as an empty\n\t\t\t\t\t\tstring.\n","The software contains a hard-coded password, which it uses for\n\t\t\t\t\tits own inbound authentication or for outbound communication to external\n\t\t\t\t\tcomponents.\nA hard-coded password typically leads to a significant authentication\n\t\t\t\t\t\tfailure that can be difficult for the system administrator to detect. Once\n\t\t\t\t\t\tdetected, it can be difficult to fix, so the administrator may be forced\n\t\t\t\t\t\tinto disabling the product entirely. There are two main variations:","If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question.","This entry should probably be split into multiple variants: an inbound\n\t\t\t\t\t\tvariant (as seen in the second demonstrative example) and an outbound\n\t\t\t\t\t\tvariant (as seen in the first demonstrative example). These variants are\n\t\t\t\t\t\tlikely to have different consequences, detectability, etc. See extended\n\t\t\t\t\t\tdescription.","The following code uses a hard-coded password to connect to a\n\t\t\t\t\t\tdatabase:\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t\"/dir/../filename\" sequences that can resolve to a location that is outside of\n\t\t\t\t\tthat directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The software stores a password in a configuration file that\n\t\t\t\t\tmight be accessible to actors who do not know the\n\t\t\t\t\tpassword.\nThis can result in compromise of the system for which the password is\n\t\t\t\t\t\tused. An attacker could gain access to this file and learn the stored\n\t\t\t\t\t\tpassword or worse yet, change the password to one of their choosing.","Below is a snippet from a Java properties file.\n","Obscuring a password with a trivial encoding does not protect\n\t\t\t\t\tthe password.\n","The following code reads a password from a properties file and uses\n\t\t\t\t\t\tthe password to connect to a database.\n","If no mechanism is in place for managing password aging, users\n\t\t\t\t\twill have no incentive to update passwords in a timely\n\t\t\t\t\tmanner.\n","As passwords age, the probability that they are compromised grows.","A common example is not having a system to terminate old employee\n\t\t\t\t\t\taccounts.\n","Allowing password aging to occur unchecked can result in the\n\t\t\t\t\tpossibility of diminished password integrity.\nJust as neglecting to include functionality for the management of password\n\t\t\t\t\t\taging is dangerous, so is allowing password aging to continue unchecked.\n\t\t\t\t\t\tPasswords must be given a maximum life span, after which a user is required\n\t\t\t\t\t\tto update with a new and different password.","As passwords age, the probability that they are compromised grows.","A common example is not having a system to terminate old employee\n\t\t\t\t\t\taccounts.\n","A product incorrectly assigns a privilege to a particular\n\t\t\t\t\tactor, creating an unintended sphere of control for that\n\t\t\t\t\tactor.\n","A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.","Evidence of privilege change:\n","A particular privilege, role, capability, or right can be used\n\t\t\t\t\tto perform unsafe actions that were not intended, even when it is assigned to\n\t\t\t\t\tthe correct entity.\n","A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.","This overlaps authorization and access control problems."," This code intends to allow only Administrators to print debug\n\t\t\t\t\t\tinformation about a system. \n","Two distinct privileges, roles, capabilities, or rights can be\n\t\t\t\t\tcombined in a way that allows an entity to perform unsafe actions that would not\n\t\t\t\t\tbe allowed without that combination.\n","A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.","This code allows someone with the role of \"ADMIN\" or \"OPERATOR\" to\n\t\t\t\t\t\treset a user's password. The role of \"OPERATOR\" is intended to have less\n\t\t\t\t\t\tprivileges than an \"ADMIN\", but still be able to help users with small\n\t\t\t\t\t\tissues such as forgotten passwords.\n","The software does not properly assign, modify, track, or check\n\t\t\t\t\tprivileges for an actor, creating an unintended sphere of control for that\n\t\t\t\t\tactor.\n","The relationships between privileges, permissions, and actors (e.g. users\n\t\t\t\t\t\tand groups) need further refinement within the Research view. One\n\t\t\t\t\t\tcomplication is that these concepts apply to two different pillars, related\n\t\t\t\t\t\tto control of resources (CWE-664) and protection mechanism failures\n\t\t\t\t\t\t(CWE-396).","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\tmultiple internal \"../\" sequences that can resolve to a location that is outside\n\t\t\t\t\tof that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The software does not properly manage privileges while it is\n\t\t\t\t\tswitching between different contexts that have different privileges or spheres\n\t\t\t\t\tof control.\n","A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users.","\n","The software does not drop privileges before passing control of\n\t\t\t\t\ta resource to an actor that does not have those\n\t\t\t\t\tprivileges.\nIn some contexts, a system executing with elevated permissions will hand\n\t\t\t\t\t\toff a process/file/etc. to another process or user. If the privileges of an\n\t\t\t\t\t\tentity are not reduced, then elevated privileges are spread throughout a\n\t\t\t\t\t\tsystem and possibly to an attacker.","If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.\nIf privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.","CWE-271, CWE-272, and CWE-250 are all closely related and possibly\n\t\t\t\t\t\toverlapping. CWE-271 is probably better suited as a category.","The following code calls chroot() to restrict the application to a\n\t\t\t\t\t\tsubset of the filesystem below APP_HOME in order to prevent an attacker from\n\t\t\t\t\t\tusing the program to gain unauthorized access to files located elsewhere.\n\t\t\t\t\t\tThe code then opens a file specified by the user and processes the contents\n\t\t\t\t\t\tof the file.\n","The elevated privilege level required to perform operations\n\t\t\t\t\tsuch as chroot() should be dropped immediately after the operation is\n\t\t\t\t\tperformed.\n","An attacker may be able to access resources with the elevated privilege that he should not have been able to access. This is particularly likely in conjunction with another flaw -- e.g., a buffer overflow.","CWE-271, CWE-272, and CWE-250 are all closely related and possibly\n\t\t\t\t\t\toverlapping. CWE-271 is probably better suited as a category.","\n","The software attempts to drop privileges but does not check or\n\t\t\t\t\tincorrectly checks to see if the drop succeeded.\nIf the drop fails, the software will continue to run with the raised\n\t\t\t\t\t\tprivileges, which might provide additional access to unprivileged\n\t\t\t\t\t\tusers.","If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.\nIf privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator."," In Windows based environments that have access control, impersonation is\n\t\t\t\t\t\tused so that access checks can be performed on a client identity by a server\n\t\t\t\t\t\twith higher privileges. By impersonating the client, the server is\n\t\t\t\t\t\trestricted to client-level security -- although in different threads it may\n\t\t\t\t\t\thave much higher privileges. ","This code attempts to take on the privileges of a user before\n\t\t\t\t\t\tcreating a file, thus avoiding performing the action with unnecessarily high\n\t\t\t\t\t\tprivileges:\n","The software does not handle or incorrectly handles when it has\n\t\t\t\t\tinsufficient privileges to perform an operation, leading to resultant\n\t\t\t\t\tweaknesses.\n","CWE-280 and CWE-274 are too similar. It is likely that CWE-274 will be\n\t\t\t\t\t\tdeprecated in the future.","\n","The software, upon installation, sets incorrect permissions for\n\t\t\t\t\tan object that exposes it to an unintended actor.\n","\n","A product defines a set of insecure permissions that are\n\t\t\t\t\tinherited by objects that are created by the program.\n","\n","A product inherits a set of insecure permissions for an object,\n\t\t\t\t\te.g. when copying from an archive file, without user awareness or\n\t\t\t\t\tinvolvement.\n","\n","While it is executing, the software sets the permissions of an\n\t\t\t\t\tobject in a way that violates the intended permissions that have been specified\n\t\t\t\t\tby the user.\n","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t\"..\\\" sequences that can resolve to a location that is outside of that\n\t\t\t\t\tdirectory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The application does not handle or incorrectly handles when it\n\t\t\t\t\thas insufficient privileges to access resources or functionality as specified by\n\t\t\t\t\ttheir permissions. This may cause it to follow unexpected code paths that may\n\t\t\t\t\tleave the application in an invalid state.\n","CWE-280 and CWE-274 are too similar.","\n","The software does not preserve permissions or incorrectly\n\t\t\t\t\tpreserves permissions when copying, restoring, or sharing objects, which can\n\t\t\t\t\tcause them to have less restrictive permissions than\n\t\t\t\t\tintended.\n","\n","The software assigns the wrong ownership, or does not properly\n\t\t\t\t\tverify the ownership, of an object or resource.\n","The relationships between privileges, permissions, and actors (e.g. users\n\t\t\t\t\t\tand groups) need further refinement within the Research view. One\n\t\t\t\t\t\tcomplication is that these concepts apply to two different pillars, related\n\t\t\t\t\t\tto control of resources (CWE-664) and protection mechanism failures\n\t\t\t\t\t\t(CWE-396).","\n","The software does not properly verify that a critical resource\n\t\t\t\t\tis owned by the proper entity.\n","An attacker could gain unauthorized access to system resources","This function is part of a privileged program that takes input from\n\t\t\t\t\t\tusers with potentially lower privileges.\n","The software does not restrict or incorrectly restricts access\n\t\t\t\t\tto a resource from an unauthorized actor.\nAccess control involves the use of several protection mechanisms such as\n\t\t\t\t\t\tauthentication (proving the identity of an actor) authorization (ensuring\n\t\t\t\t\t\tthat a given actor can access a resource), and accountability (tracking of\n\t\t\t\t\t\tactivities that were performed). When any mechanism is not applied or\n\t\t\t\t\t\totherwise fails, attackers can compromise the security of the software by\n\t\t\t\t\t\tgaining privileges, reading sensitive information, executing commands,\n\t\t\t\t\t\tevading detection, etc.","This item needs more work. Possible sub-categories include:","\n","The software does not perform or incorrectly performs an\n\t\t\t\t\tauthorization check when an actor attempts to access a resource or perform an\n\t\t\t\t\taction.\nAssuming a user with a given identity, authorization is the process of\n\t\t\t\t\t\tdetermining whether that user can access a given resource, based on the\n\t\t\t\t\t\tuser's privileges and any permissions or other access-control specifications\n\t\t\t\t\t\tthat apply to the resource.","An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.\nAn attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.\nAn attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.","An access control list (ACL) represents who/what has permissions to a\n\t\t\t\t\t\tgiven object. Different operating systems implement (ACLs) in different\n\t\t\t\t\t\tways. In UNIX, there are three types of permissions: read, write, and\n\t\t\t\t\t\texecute. Users are divided into three classes for file access: owner, group\n\t\t\t\t\t\towner, and all other users where each class has a separate set of rights. In\n\t\t\t\t\t\tWindows NT, there are four basic types of permissions for files: \"No\n\t\t\t\t\t\taccess\", \"Read access\", \"Change access\", and \"Full control\". Windows NT\n\t\t\t\t\t\textends the concept of three types of users in UNIX to include a list of\n\t\t\t\t\t\tusers and groups along with their associated permissions. A user can create\n\t\t\t\t\t\tan object (file) and assign specified permissions to that object.","This function runs an arbitrary SQL query on a given database,\n\t\t\t\t\t\treturning the result of the query.\n","The software does not properly manage a user within its\n\t\t\t\t\tenvironment.\nUsers can be assigned to the wrong group (class) of permissions resulting\n\t\t\t\t\t\tin unintended access rights to sensitive objects.","The relationships between privileges, permissions, and actors (e.g. users\n\t\t\t\t\t\tand groups) need further refinement within the Research view. One\n\t\t\t\t\t\tcomplication is that these concepts apply to two different pillars, related\n\t\t\t\t\t\tto control of resources (CWE-664) and protection mechanism failures\n\t\t\t\t\t\t(CWE-693).","\n","When an actor claims to have a given identity, the software\n\t\t\t\t\tdoes not prove or insufficiently proves that the claim is\n\t\t\t\t\tcorrect.\n","This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.","The following code intends to ensure that the user is already logged\n\t\t\t\t\t\tin. If not, the code performs authentication with the user-provided username\n\t\t\t\t\t\tand password. If successful, it sets the loggedin and user cookies to\n\t\t\t\t\t\t\"remember\" that the user has already logged in. Finally, the code performs\n\t\t\t\t\t\tadministrator tasks if the logged-in user has the \"Administrator\" username,\n\t\t\t\t\t\tas recorded in the user cookie.\n","A product requires authentication, but the product has an\n\t\t\t\t\talternate path or channel that does not require authentication.\n\t\t\t\t\n","\n","The software performs authentication based on the name of a\n\t\t\t\t\tresource being accessed, or the name of the actor performing the access, but it\n\t\t\t\t\tdoes not properly check all possible names for that resource or\n\t\t\t\t\tactor.\n","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'\\..\\filename' (leading backslash dot dot) sequences that can resolve to a\n\t\t\t\t\tlocation that is outside of that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","This attack-focused weakness is caused by improperly\n\t\t\t\t\timplemented authentication schemes that are subject to spoofing\n\t\t\t\t\tattacks.\n","This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.","The following code authenticates users.\n","The software uses an IP address for\n\t\t\t\t\tauthentication.\nIP addresses can be easily spoofed. Attackers can forge the source IP\n\t\t\t\t\t\taddress of the packets they send, but response packets will return to the\n\t\t\t\t\t\tforged IP address. To see the response packets, the attacker has to sniff\n\t\t\t\t\t\tthe traffic between the victim machine and the forged IP address. In order\n\t\t\t\t\t\tto accomplish the required sniffing, attackers typically attempt to locate\n\t\t\t\t\t\tthemselves on the same subnet as the victim machine. Attackers may be able\n\t\t\t\t\t\tto circumvent this requirement by using source routing, but source routing\n\t\t\t\t\t\tis disabled across much of the Internet today. In summary, IP address\n\t\t\t\t\t\tverification can be a useful part of an authentication scheme, but it should\n\t\t\t\t\t\tnot be the single factor required for authentication.","Malicious users can fake authentication information, impersonating any IP address.","Both of these examples check if a request is from a trusted address\n\t\t\t\t\t\tbefore responding to the request.\n","This entry has been deprecated because it was a duplicate of\n\t\t\t\t\tCWE-350. All content has been transferred to CWE-350.\n","\n","The referer field in HTTP requests can be easily modified and,\n\t\t\t\t\tas such, is not a valid means of message integrity\n\t\t\t\t\tchecking.\n","Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to.","The referer field in HTML requests can be simply modified by malicious\n\t\t\t\t\t\tusers, rendering it useless as a means of checking the validity of the\n\t\t\t\t\t\trequest in question.","The following code samples check a packet's referer in order to\n\t\t\t\t\t\tdecide whether or not an inbound request is from a trusted\n\t\t\t\t\t\thost.\n","A capture-replay flaw exists when the design of the software\n\t\t\t\t\tmakes it possible for a malicious user to sniff network traffic and bypass\n\t\t\t\t\tauthentication by replaying it to the server in question to the same effect as\n\t\t\t\t\tthe original message (or with minor changes).\nCapture-replay attacks are common and can be difficult to defeat without\n\t\t\t\t\t\tcryptography. They are a subset of network injection attacks that rely on\n\t\t\t\t\t\tobserving previously-sent valid commands, then changing them slightly if\n\t\t\t\t\t\tnecessary and resending the same commands to the server.","Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.","\n","The software does not validate, or incorrectly validates, a\n\t\t\t\t\tcertificate.\nWhen a certificate is invalid or malicious, it might allow an attacker to\n\t\t\t\t\t\tspoof a trusted entity by using a man-in-the-middle (MITM) attack. The\n\t\t\t\t\t\tsoftware might connect to a malicious host while believing it is a trusted\n\t\t\t\t\t\thost, or the software might be deceived into accepting spoofed data that\n\t\t\t\t\t\tappears to originate from a trusted host. ","A certificate is a token that associates an identity (principle) to a\n\t\t\t\t\t\tcryptographic key. Certificates can be used to check if a public key belongs\n\t\t\t\t\t\tto the assumed owner.","\n","The software does not follow, or incorrectly follows, the chain\n\t\t\t\t\tof trust for a certificate back to a trusted root certificate, resulting in\n\t\t\t\t\tincorrect trust of any resource that is associated with that\n\t\t\t\t\tcertificate.\nIf a system does not follow the chain of trust of a certificate to a root\n\t\t\t\t\t\tserver, the certificate loses all usefulness as a metric of trust.\n\t\t\t\t\t\tEssentially, the trust gained from a certificate is derived from a chain of\n\t\t\t\t\t\ttrust -- with a reputable trusted entity at the end of that list. The end\n\t\t\t\t\t\tuser must trust that reputable source, and this reputable source must vouch\n\t\t\t\t\t\tfor the resource in question through the medium of the certificate. ","Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.\nData, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.","This code checks the certificate of a connected peer.\n","The software communicates with a host that provides a\n\t\t\t\t\tcertificate, but the software does not properly ensure that the certificate is\n\t\t\t\t\tactually associated with that host.\nEven if a certificate is well-formed, signed, and follows the chain of\n\t\t\t\t\t\ttrust, it may simply be a valid certificate for a different site than the\n\t\t\t\t\t\tsite that the software is interacting with. If the certificate's\n\t\t\t\t\t\thost-specific data is not properly checked - such as the Common Name (CN) in\n\t\t\t\t\t\tthe Subject or the Subject Alternative Name (SAN) extension of an X.509\n\t\t\t\t\t\tcertificate - it may be possible for a redirection or spoofing attack to\n\t\t\t\t\t\tallow a malicious host with a valid certificate to provide data,\n\t\t\t\t\t\timpersonating a trusted host. In order to ensure data integrity, the\n\t\t\t\t\t\tcertificate must be valid and it must pertain to the site that is being\n\t\t\t\t\t\taccessed.","The data read from the system vouched for by the certificate may not be from the expected system.\nTrust afforded to the system in question -- based on the expired certificate -- may allow for spoofing or redirection attacks.","The following OpenSSL code obtains a certificate and verifies\n\t\t\t\t\t\tit.\n","A certificate expiration is not validated or is incorrectly\n\t\t\t\t\tvalidated, so trust may be assigned to certificates that have been abandoned due\n\t\t\t\t\tto age.\nWhen the expiration of a certificate is not taken into account, no trust\n\t\t\t\t\t\thas necessarily been conveyed through it. Therefore, the validity of the\n\t\t\t\t\t\tcertificate cannot be verified and all benefit of the certificate is\n\t\t\t\t\t\tlost.","The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing.\nTrust afforded to the system in question -- based on the expired certificate -- may allow for spoofing attacks.","The following OpenSSL code ensures that there is a certificate and\n\t\t\t\t\t\tallows the use of expired certificates.\n","The software does not check or incorrectly checks the\n\t\t\t\t\trevocation status of a certificate, which may cause it to use a certificate that\n\t\t\t\t\thas been compromised.\nAn improper check for certificate revocation is a far more serious flaw\n\t\t\t\t\t\tthan related certificate failures. This is because the use of any revoked\n\t\t\t\t\t\tcertificate is almost certainly malicious. The most common reason for\n\t\t\t\t\t\tcertificate revocation is compromise of the system in question, with the\n\t\t\t\t\t\tresult that no legitimate servers will be using a revoked certificate,\n\t\t\t\t\t\tunless they are sorely out of sync.","Trust may be assigned to an entity who is not who it claims to be.\nData from an untrusted (and possibly malicious) source may be integrated.\nData may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.","The following OpenSSL code ensures that there is a certificate\n\t\t\t\t\t\tbefore continuing execution.\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'\\dir\\..\\filename' (leading backslash dot dot) sequences that can resolve to a\n\t\t\t\t\tlocation that is outside of that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The product does not adequately verify the identity of actors\n\t\t\t\t\tat both ends of a communication channel, or does not adequately ensure the\n\t\t\t\t\tintegrity of the channel, in a way that allows the channel to be accessed or\n\t\t\t\t\tinfluenced by an actor that is not an endpoint.\nIn order to establish secure communication between two parties, it is\n\t\t\t\t\t\toften important to adequately verify the identity of entities at each end of\n\t\t\t\t\t\tthe communication channel. Inadequate or inconsistent verification may\n\t\t\t\t\t\tresult in insufficient or incorrect identification of either communicating\n\t\t\t\t\t\tentity. This can have negative consequences such as misplaced trust in the\n\t\t\t\t\t\tentity at the other end of the channel. An attacker can leverage this by\n\t\t\t\t\t\tinterposing between the communicating entities and masquerading as the\n\t\t\t\t\t\toriginal entity. In the absence of sufficient verification of identity, such\n\t\t\t\t\t\tan attacker can eavesdrop and potentially modify the communication between\n\t\t\t\t\t\tthe original entities.","An attacker could pose as one of the entities and read or possibly modify the communication.","The summary identifies multiple distinct possibilities, suggesting that\n\t\t\t\t\t\tthis is a category that must be broken into more specific weaknesses.","In the Java snippet below, data is sent over an unencrypted channel\n\t\t\t\t\t\tto a remote server.\n","Simple authentication protocols are subject to reflection\n\t\t\t\t\tattacks if a malicious user can use the target machine to impersonate a trusted\n\t\t\t\t\tuser.\nA mutual authentication protocol requires each party to respond to a\n\t\t\t\t\t\trandom challenge by the other party by encrypting it with a pre-shared key.\n\t\t\t\t\t\tOften, however, such protocols employ the same pre-shared key for\n\t\t\t\t\t\tcommunication with a number of different entities. A malicious user or an\n\t\t\t\t\t\tattacker can easily compromise this protocol without possessing the correct\n\t\t\t\t\t\tkey by employing a reflection attack on the protocol.","The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.","The term \"reflection\" is used in multiple ways within CWE and the\n\t\t\t\t\t\tcommunity, so its usage should be reviewed.","\n","The authentication scheme or implementation uses key data\n\t\t\t\t\telements that are assumed to be immutable, but can be controlled or modified by\n\t\t\t\t\tthe attacker.\n","In the following example, an \"authenticated\" cookie is used to\n\t\t\t\t\t\tdetermine whether or not a user should be granted access to a\n\t\t\t\t\t\tsystem.\n","The requirements for the software dictate the use of an\n\t\t\t\t\testablished authentication algorithm, but the implementation of the algorithm is\n\t\t\t\t\tincorrect.\nThis incorrect implementation may allow authentication to be\n\t\t\t\t\t\tbypassed.","\n","The software implements an authentication technique, but it\n\t\t\t\t\tskips a step that weakens the technique.\nAuthentication techniques should follow the algorithms that define them\n\t\t\t\t\t\texactly, otherwise authentication can be bypassed or more easily subjected\n\t\t\t\t\t\tto brute force attacks.","This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code.","\n","The authentication algorithm is sound, but the implemented\n\t\t\t\t\tmechanism can be bypassed as the result of a separate weakness that is primary\n\t\t\t\t\tto the authentication error.\n","\n","The software does not perform any authentication for\n\t\t\t\t\tfunctionality that requires a provable user identity or consumes a significant\n\t\t\t\t\tamount of resources.\n"," Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.","In the following Java example the method createBankAccount is used\n\t\t\t\t\t\tto create a BankAccount object for a bank management\n\t\t\t\t\t\tapplication.\n","The software does not implement sufficient measures to prevent\n\t\t\t\t\tmultiple failed authentication attempts within in a short time frame, making it\n\t\t\t\t\tmore susceptible to brute force attacks.\n","An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.","In January 2009, an attacker was able to gain administrator access\n\t\t\t\t\t\tto a Twitter server because the server did not restrict the number of login\n\t\t\t\t\t\tattempts. The attacker targeted a member of Twitter's support team and was\n\t\t\t\t\t\table to successfully guess the member's password using a brute force attack\n\t\t\t\t\t\tby guessing a large number of common words. Once the attacker gained access\n\t\t\t\t\t\tas the member of the support staff, he used the administrator panel to gain\n\t\t\t\t\t\taccess to 33 accounts that belonged to celebrities and politicians.\n\t\t\t\t\t\tUltimately, fake Twitter messages were sent that appeared to come from the\n\t\t\t\t\t\tcompromised accounts.\n","The use of single-factor authentication can lead to unnecessary\n\t\t\t\t\trisk of compromise when compared with the benefits of a dual-factor\n\t\t\t\t\tauthentication scheme.\nWhile the use of multiple authentication schemes is simply piling on more\n\t\t\t\t\t\tcomplexity on top of authentication, it is inestimably valuable to have such\n\t\t\t\t\t\tmeasures of redundancy. The use of weak, reused, and common passwords is\n\t\t\t\t\t\trampant on the internet. Without the added protection of multiple\n\t\t\t\t\t\tauthentication schemes, a single mistake can result in the compromise of an\n\t\t\t\t\t\taccount. For this reason, if multiple schemes are possible and also easy to\n\t\t\t\t\t\tuse, they should be implemented and required.","If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.","In both of these examples, a user is logged in if their given\n\t\t\t\t\t\tpassword matches a stored password:\n","The use of password systems as the primary means of\n\t\t\t\t\tauthentication may be subject to several flaws or shortcomings, each reducing\n\t\t\t\t\tthe effectiveness of the mechanism.\n","A password authentication mechanism error will almost always result in attackers being authorized as valid users.","Password systems are the simplest and most ubiquitous authentication\n\t\t\t\t\t\tmechanisms. However, they are subject to such well known attacks,and such\n\t\t\t\t\t\tfrequent compromise that their use in the most simple implementation is not\n\t\t\t\t\t\tpractical.","In both of these examples, a user is logged in if their given\n\t\t\t\t\t\tpassword matches a stored password:\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'dir\\..\\..\\filename' (multiple internal backslash dot dot) sequences that can\n\t\t\t\t\tresolve to a location that is outside of that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The software does not encrypt sensitive or critical information\n\t\t\t\t\tbefore storage or transmission.\n The lack of proper data encryption passes up the guarantees of\n\t\t\t\t\t\tconfidentiality, integrity, and accountability that properly implemented\n\t\t\t\t\t\tencryption conveys.","If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.\nOmitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.","This code writes a user's login information to a cookie so the user\n\t\t\t\t\t\tdoes not have to login again later. \n","The application stores sensitive information in cleartext\n\t\t\t\t\twithin a resource that might be accessible to another control\n\t\t\t\t\tsphere.\nBecause the information is stored in cleartext, attackers could\n\t\t\t\t\t\tpotentially read it. Even if the information is encoded in a way that is not\n\t\t\t\t\t\thuman-readable, certain techniques could determine which encoding is being\n\t\t\t\t\t\tused, then decode the information.","An attacker with access to the system could read sensitive information stored in cleartext.","The following code excerpt stores a plaintext user account ID in a\n\t\t\t\t\t\tbrowser cookie.\n","The application stores sensitive information in cleartext in a\n\t\t\t\t\tfile, or on disk.\nThe sensitive information could be read by attackers with access to the\n\t\t\t\t\t\tfile, or with physical or administrator access to the raw disk. Even if the\n\t\t\t\t\t\tinformation is encoded in a way that is not human-readable, certain\n\t\t\t\t\t\ttechniques could determine which encoding is being used, then decode the\n\t\t\t\t\t\tinformation.","The following examples show a portion of properties and\n\t\t\t\t\t\tconfiguration files for Java and ASP.NET applications. The files include\n\t\t\t\t\t\tusername and password information but they are stored in\n\t\t\t\t\t\tcleartext.\n","The application stores sensitive information in cleartext in\n\t\t\t\t\tthe registry.\nAttackers can read the information by accessing the registry key. Even if\n\t\t\t\t\t\tthe information is encoded in a way that is not human-readable, certain\n\t\t\t\t\t\ttechniques could determine which encoding is being used, then decode the\n\t\t\t\t\t\tinformation.","\n","The application stores sensitive information in cleartext in a\n\t\t\t\t\tcookie.\nAttackers can use widely-available tools to view the cookie and read the\n\t\t\t\t\t\tsensitive information. Even if the information is encoded in a way that is\n\t\t\t\t\t\tnot human-readable, certain techniques could determine which encoding is\n\t\t\t\t\t\tbeing used, then decode the information.","The following code excerpt stores a plaintext user account ID in a\n\t\t\t\t\t\tbrowser cookie.\n","The application stores sensitive information in cleartext in\n\t\t\t\t\tmemory.\nThe sensitive memory might be saved to disk, stored in a core dump, or\n\t\t\t\t\t\tremain uncleared if the application crashes, or if the programmer does not\n\t\t\t\t\t\tproperly clear the memory before freeing it.","\n","The application stores sensitive information in cleartext\n\t\t\t\t\twithin the GUI.\nAn attacker can often obtain data from a GUI, even if hidden, by using an\n\t\t\t\t\t\tAPI to directly access GUI objects such as windows and menus. Even if the\n\t\t\t\t\t\tinformation is encoded in a way that is not human-readable, certain\n\t\t\t\t\t\ttechniques could determine which encoding is being used, then decode the\n\t\t\t\t\t\tinformation.","\n","The application stores sensitive information in cleartext in an\n\t\t\t\t\texecutable.\nAttackers can reverse engineer binary code to obtain secret data. This is\n\t\t\t\t\t\tespecially easy when the cleartext is plain ASCII. Even if the information\n\t\t\t\t\t\tis encoded in a way that is not human-readable, certain techniques could\n\t\t\t\t\t\tdetermine which encoding is being used, then decode the information.","\n","The software transmits sensitive or security-critical data in\n\t\t\t\t\tcleartext in a communication channel that can be sniffed by unauthorized\n\t\t\t\t\tactors.\nMany communication channels can be \"sniffed\" by attackers during data\n\t\t\t\t\t\ttransmission. For example, network traffic can often be sniffed by any\n\t\t\t\t\t\tattacker who has access to a network interface. This significantly lowers\n\t\t\t\t\t\tthe difficulty of exploitation by attackers.","Anyone can read the information by gaining access to the channel being used for communication.","The following code attempts to establish a connection to a site to\n\t\t\t\t\t\tcommunicate sensitive information.\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'...' (triple dot) sequences that can resolve to a location that is outside of\n\t\t\t\t\tthat directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","This manipulation-focused entry is currently hiding two distinct\n\t\t\t\t\t\tweaknesses, so it might need to be split. The manipulation is effective in\n\t\t\t\t\t\ttwo different contexts:","\n","The use of a hard-coded cryptographic key significantly\n\t\t\t\t\tincreases the possibility that encrypted data may be\n\t\t\t\t\trecovered.\n","If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.","The following code examples attempt to verify a password using a\n\t\t\t\t\t\thard-coded cryptographic key.\n","The software performs a key exchange with an actor without\n\t\t\t\t\tverifying the identity of that actor.\nPerforming a key exchange will preserve the integrity of the information\n\t\t\t\t\t\tsent between two entities, but this will not guarantee that the entities are\n\t\t\t\t\t\twho they claim they are. This may enable a set of \"man-in-the-middle\"\n\t\t\t\t\t\tattacks. Typically, this involves a victim client that contacts a malicious\n\t\t\t\t\t\tserver that is impersonating a trusted server. If the client skips\n\t\t\t\t\t\tauthentication or ignores an authentication failure, the malicious server\n\t\t\t\t\t\tmay request authentication information from the user. The malicious server\n\t\t\t\t\t\tcan then use this authentication information to log in to the trusted server\n\t\t\t\t\t\tusing the victim's credentials, sniff traffic between the victim and trusted\n\t\t\t\t\t\tserver, etc.","No authentication takes place in this process, bypassing an assumed protection of encryption.\nThe encrypted communication between a user and a trusted host may be subject to a \"man-in-the-middle\" sniffing attack.","Many systems have used Diffie-Hellman key exchange without\n\t\t\t\t\t\tauthenticating the entities exchanging keys, leading to man-in-the-middle\n\t\t\t\t\t\tattacks. Many people using SSL/TLS skip the authentication (often\n\t\t\t\t\t\tunknowingly).\n","Nonces should be used for the present occasion and only\n\t\t\t\t\tonce.\n","Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.","Nonces are often bundled with a key in a communication exchange to produce\n\t\t\t\t\t\ta new session key for each exchange.","This code takes a password, concatenates it with a nonce, then\n\t\t\t\t\t\tencrypts it before sending over a network:\n","The product uses a cryptographic key or password past its\n\t\t\t\t\texpiration date, which diminishes its safety significantly by increasing the\n\t\t\t\t\ttiming window for cracking attacks against that key.\nWhile the expiration of keys does not necessarily ensure that they are\n\t\t\t\t\t\tcompromised, it is a significant concern that keys which remain in use for\n\t\t\t\t\t\tprolonged periods of time have a decreasing probability of integrity. For\n\t\t\t\t\t\tthis reason, it is important to replace keys within a period of time\n\t\t\t\t\t\tproportional to their strength.","The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.","The following code attempts to verify that a certificate is\n\t\t\t\t\t\tvalid.\n","The software does not implement a required step in a\n\t\t\t\t\tcryptographic algorithm, resulting in weaker encryption than advertised by that\n\t\t\t\t\talgorithm.\nCryptographic implementations should follow the algorithms that define\n\t\t\t\t\t\tthem exactly, otherwise encryption can be weaker than expected.","If the cryptographic algorithm is used for authentication and authorization, then an attacker could gain unauthorized access to the system.\nSensitive data may be compromised by the use of a broken or risky cryptographic algorithm.\nIf the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.","\n","The software stores or transmits sensitive data using an\n\t\t\t\t\tencryption scheme that is theoretically sound, but is not strong enough for the\n\t\t\t\t\tlevel of protection required.\nA weak encryption scheme can be subjected to brute force attacks that have\n\t\t\t\t\t\ta reasonable chance of succeeding using current attack methods and\n\t\t\t\t\t\tresources.","An attacker may be able to decrypt the data using brute force attacks.","A variety of encryption algorithms exist, with various weaknesses. This\n\t\t\t\t\t\tcategory could probably be split into smaller sub-categories.","\n","The use of a broken or risky cryptographic algorithm is an\n\t\t\t\t\tunnecessary risk that may result in the exposure of sensitive\n\t\t\t\t\tinformation.\nThe use of a non-standard algorithm is dangerous because a determined\n\t\t\t\t\t\tattacker may be able to break the algorithm and compromise whatever data has\n\t\t\t\t\t\tbeen protected. Well-known techniques may exist to break the\n\t\t\t\t\t\talgorithm.","The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.\nThe integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.\nIf the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.","Cryptographic algorithms are the methods by which data is scrambled. There\n\t\t\t\t\t\tare a small number of well-understood and heavily studied algorithms that\n\t\t\t\t\t\tshould be used by most applications. It is quite difficult to produce a\n\t\t\t\t\t\tsecure algorithm, and even high profile algorithms by accomplished\n\t\t\t\t\t\tcryptographic experts have been broken.","Relationships between CWE-310, CWE-326, and CWE-327 and all their children\n\t\t\t\t\t\tneed to be reviewed and reorganized.","These code examples use the Data Encryption Standard\n\t\t\t\t\t\t(DES).\n","The product uses a hashing algorithm that produces a hash value\n\t\t\t\t\tthat can be used to determine the original input, or to find an input that can\n\t\t\t\t\tproduce the same hash, more efficiently than brute force\n\t\t\t\t\ttechniques.\nThis weakness is especially dangerous when the hash is used in security\n\t\t\t\t\t\talgorithms that require the one-way property to hold. For example, if an\n\t\t\t\t\t\tauthentication system takes an incoming password and generates a hash, then\n\t\t\t\t\t\tcompares the hash to another hash that it has stored in its authentication\n\t\t\t\t\t\tdatabase, then the ability to create a collision could allow an attacker to\n\t\t\t\t\t\tprovide an alternate password that produces the same target hash, bypassing\n\t\t\t\t\t\tauthentication.","In both of these examples, a user is logged in if their given\n\t\t\t\t\t\tpassword matches a stored password:\n","Not using a random initialization Vector (IV) with Cipher Block\n\t\t\t\t\tChaining (CBC) Mode causes algorithms to be susceptible to dictionary\n\t\t\t\t\tattacks.\n","If the CBC is not properly initialized, data that is encrypted can be compromised and therefore be read.\nIf the CBC is not properly initialized, encrypted data could be tampered with in transfer.\nCryptographic based authentication systems could be defeated.","CBC is the most commonly used mode of operation for a block cipher. It\n\t\t\t\t\t\tsolves electronic code book's dictionary problems by XORing the ciphertext\n\t\t\t\t\t\twith plaintext. If it used to encrypt multiple data streams, dictionary\n\t\t\t\t\t\tattacks are possible, provided that the streams have a common beginning\n\t\t\t\t\t\tsequence.","In the following examples, CBC mode is used when encrypting\n\t\t\t\t\t\tdata:\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'....' (multiple dot) sequences that can resolve to a location that is outside\n\t\t\t\t\tof that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","Like the triple-dot CWE-32, this manipulation probably hides multiple\n\t\t\t\t\t\tweaknesses that should be made more explicit.","\n","The software may use insufficiently random numbers or values in\n\t\t\t\t\ta security context that depends on unpredictable numbers.\nWhen software generates predictable values in a context requiring\n\t\t\t\t\t\tunpredictability, it may be possible for an attacker to guess the next value\n\t\t\t\t\t\tthat will be generated, and use this guess to impersonate another user or\n\t\t\t\t\t\taccess sensitive information.","When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.\nIf software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.\nWhen an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.","Computers are deterministic machines, and as such are unable to produce\n\t\t\t\t\t\ttrue randomness. Pseudo-Random Number Generators (PRNGs) approximate\n\t\t\t\t\t\trandomness algorithmically, starting with a seed from which subsequent\n\t\t\t\t\t\tvalues are calculated. There are two types of PRNGs: statistical and\n\t\t\t\t\t\tcryptographic. Statistical PRNGs provide useful statistical properties, but\n\t\t\t\t\t\ttheir output is highly predictable and forms an easy to reproduce numeric\n\t\t\t\t\t\tstream that is unsuitable for use in cases where security depends on\n\t\t\t\t\t\tgenerated values being unpredictable. Cryptographic PRNGs address this\n\t\t\t\t\t\tproblem by generating output that is more difficult to predict. For a value\n\t\t\t\t\t\tto be cryptographically secure, it must be impossible or highly improbable\n\t\t\t\t\t\tfor an attacker to distinguish between it and a truly random value.","This code generates a unique random identifier for a user's\n\t\t\t\t\t\tsession.\n","The software uses an algorithm or scheme that produces\n\t\t\t\t\tinsufficient entropy, leaving patterns or clusters of values that are more\n\t\t\t\t\tlikely to occur than others.\n","An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.","This code generates a unique random identifier for a user's\n\t\t\t\t\t\tsession.\n","The lack of entropy available for, or used by, a Pseudo-Random\n\t\t\t\t\tNumber Generator (PRNG) can be a stability and security\n\t\t\t\t\tthreat.\n","If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash.\nIf a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users.","\n","True random number generators (TRNG) generally have a limited\n\t\t\t\t\tsource of entropy and therefore can fail or block.\nThe rate at which true random numbers can be generated is limited. It is\n\t\t\t\t\t\timportant that one uses them only when they are needed for security.","A program may crash or block if it runs out of random numbers.","This code uses a TRNG to generate a unique session id for new\n\t\t\t\t\t\tconnections to a server:\n","The number of possible random values is smaller than needed by\n\t\t\t\t\tthe product, making it more susceptible to brute force\n\t\t\t\t\tattacks.\n","An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.","The following XML example code is a deployment descriptor for a Java\n\t\t\t\t\t\tweb application deployed on a Sun Java Application Server. This deployment\n\t\t\t\t\t\tdescriptor includes a session configuration property for configuring the\n\t\t\t\t\t\tsession ID length.\n","A Pseudo-Random Number Generator (PRNG) uses seeds\n\t\t\t\t\tincorrectly.\n","if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.","\n","A PRNG uses the same seed each time the product is initialized.\n\t\t\t\t\tIf an attacker can guess (or knows) the seed, then he/she may be able to\n\t\t\t\t\tdetermine the \"random\" number produced from the PRNG.\n","The following code uses a statistical PRNG to generate account\n\t\t\t\t\t\tIDs.\n","A PRNG is initialized from a predictable seed, e.g. using\n\t\t\t\t\tprocess ID or system time.\n","Both of these examples use a statistical PRNG seeded with the\n\t\t\t\t\t\tcurrent value of the system clock to generate a random number: \n","The product uses a Pseudo-Random Number Generator (PRNG) in a\n\t\t\t\t\tsecurity context, but the PRNG is not cryptographically\n\t\t\t\t\tstrong.\nWhen a non-cryptographic PRNG is used in a cryptographic context, it can\n\t\t\t\t\t\texpose the cryptography to certain types of attacks.","If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.","Both of these examples use a statistical PRNG to generate a random\n\t\t\t\t\t\tnumber:\n","A PRNG uses a relatively small space of\n\t\t\t\t\tseeds.\n","This entry overlaps predictable from observable state (CWE-341).","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'....//' (doubled dot dot slash) sequences that can resolve to a location that\n\t\t\t\t\tis outside of that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","Weaknesses in this category are related to schemes that\n\t\t\t\t\tgenerate numbers or identifiers that are more predictable than required by the\n\t\t\t\t\tapplication.\n","\n","A number or object is predictable based on observations that\n\t\t\t\t\tthe attacker can make about the state of the system or network, such as time,\n\t\t\t\t\tprocess ID, etc.\n","This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.","This code generates a unique random identifier for a user's\n\t\t\t\t\t\tsession.\n","An exact value or random number can be precisely predicted by\n\t\t\t\t\tobserving previous values.\n","\n","The software's random number generator produces a series of\n\t\t\t\t\tvalues which, when observed, can be used to infer a relatively small range of\n\t\t\t\t\tpossibilities for the next value that could be generated.\nThe output of a random number generator should not be predictable based on\n\t\t\t\t\t\tobservations of previous values. In some cases, an attacker cannot predict\n\t\t\t\t\t\tthe exact value that will be produced next, but can narrow down the\n\t\t\t\t\t\tpossibilities significantly. This reduces the amount of effort to perform a\n\t\t\t\t\t\tbrute force attack. For example, suppose the product generates random\n\t\t\t\t\t\tnumbers between 1 and 100, but it always produces a larger value until it\n\t\t\t\t\t\treaches 100. If the generator produces an 80, then the attacker knows that\n\t\t\t\t\t\tthe next value will be somewhere between 81 and 100. Instead of 100\n\t\t\t\t\t\tpossibilities, the attacker only needs to consider 20.","\n","The product uses a constant value, name, or reference, but this\n\t\t\t\t\tvalue can (or should) vary across different environments.\n","\n","The software does not sufficiently verify the origin or\n\t\t\t\t\tauthenticity of data, in a way that causes it to accept invalid\n\t\t\t\t\tdata.\n","The specific ways in which the origin is not properly identified should be\n\t\t\t\t\t\tlaid out as separate weaknesses. In some sense, this is more like a\n\t\t\t\t\t\tcategory.","\n","The software does not properly verify that the source of data\n\t\t\t\t\tor communication is valid.\n","An attacker can access any functionality that is inadvertently accessible to the source.","This entry has some significant overlap with other CWE entries and may\n\t\t\t\t\t\tneed some clarification. See terminology notes.","This Android application will remove a user account when it receives\n\t\t\t\t\t\tan intent to do so:\n","The software does not verify, or incorrectly verifies, the\n\t\t\t\t\tcryptographic signature for data.\n","An attacker could gain access to sensitive data and possibly execute unauthorized code.","In the following code, a JarFile object is created from a downloaded\n\t\t\t\t\t\tfile.\n","The software has two different sources of the same data or\n\t\t\t\t\tinformation, but it uses the source that has less support for verification, is\n\t\t\t\t\tless trusted, or is less resistant to attack.\n","An attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data."," This code attempts to limit the access of a page to certain IP\n\t\t\t\t\t\tAddresses. It checks the 'HTTP_X_FORWARDED_FOR' header in case an authorized\n\t\t\t\t\t\tuser is sending the request through a proxy. \n","The software, when processing trusted data, accepts any\n\t\t\t\t\tuntrusted data that is also included with the trusted data, treating the\n\t\t\t\t\tuntrusted data as if it were trusted.\n","An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.","\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\t'.../...//' (doubled triple dot slash) sequences that can resolve to a location\n\t\t\t\t\tthat is outside of that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","\n","The software performs reverse DNS resolution on an IP address\n\t\t\t\t\tto obtain the hostname and make a security decision, but it does not properly\n\t\t\t\t\tensure that the IP address is truly associated with the\n\t\t\t\t\thostname.\nSince DNS names can be easily spoofed or misreported, and it may be\n\t\t\t\t\t\tdifficult for the software to detect if a trusted DNS server has been\n\t\t\t\t\t\tcompromised, DNS names do not constitute a valid authentication mechanism. ","Malicious users can fake authentication information by providing false DNS information.","CWE-350, CWE-247, and CWE-292 were merged into CWE-350 in CWE 2.5. CWE-247\n\t\t\t\t\t\twas originally derived from Seven Pernicious Kingdoms, CWE-350 from PLOVER,\n\t\t\t\t\t\tand CWE-292 from CLASP. All taxonomies focused closely on the use of reverse\n\t\t\t\t\t\tDNS for authentication of incoming requests.","The following code samples use a DNS lookup in order to decide\n\t\t\t\t\t\twhether or not an inbound request is from a trusted host.\n","The software does not properly distinguish between different\n\t\t\t\t\ttypes of elements in a way that leads to insecure\n\t\t\t\t\tbehavior.\n","\n","The software uses a transmission protocol that does not include\n\t\t\t\t\ta mechanism for verifying the integrity of the data during transmission, such as\n\t\t\t\t\ta checksum.\nIf integrity check values or \"checksums\" are omitted from a protocol,\n\t\t\t\t\t\tthere is no way of determining if data has been corrupted in transmission.\n\t\t\t\t\t\tThe lack of checksum functionality in a protocol removes the first\n\t\t\t\t\t\tapplication-level check of data that can be used. The end-to-end philosophy\n\t\t\t\t\t\tof checks states that integrity checks should be performed at the lowest\n\t\t\t\t\t\tlevel that they can be completely implemented. Excluding further sanity\n\t\t\t\t\t\tchecks and input validation performed by applications, the protocol's\n\t\t\t\t\t\tchecksum is the most important level of checksum, since it can be performed\n\t\t\t\t\t\tmore completely than at any previous level and takes into account entire\n\t\t\t\t\t\tmessages, as opposed to single packets.","Data that is parsed and used may be corrupted.\nWithout a checksum it is impossible to determine if any changes have been made to the data after it was sent.","In this example, a request packet is received, and privileged\n\t\t\t\t\t\tinformation is sent to the requester:\n","The software does not validate or incorrectly validates the\n\t\t\t\t\tintegrity check values or \"checksums\" of a message. This may prevent it from\n\t\t\t\t\tdetecting if the data has been modified or corrupted in transmission. \nImproper validation of checksums before use results in an unnecessary risk\n\t\t\t\t\t\tthat can easily be mitigated. The protocol specification describes the\n\t\t\t\t\t\talgorithm used for calculating the checksum. It is then a simple matter of\n\t\t\t\t\t\timplementing the calculation and verifying that the calculated checksum and\n\t\t\t\t\t\tthe received checksum match. Improper verification of the calculated\n\t\t\t\t\t\tchecksum and the received checksum can lead to far greater\n\t\t\t\t\t\tconsequences.","Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.\nData that is parsed and used may be corrupted.\nWithout a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.","\n","The software's user interface does not warn the user before\n\t\t\t\t\tundertaking an unsafe action on behalf of that user. This makes it easier for\n\t\t\t\t\tattackers to trick users into inflicting damage to their\n\t\t\t\t\tsystem.\nSoftware systems should warn users that a potentially dangerous action may\n\t\t\t\t\t\toccur if the user proceeds. For example, if the user downloads a file from\n\t\t\t\t\t\tan unknown source and attempts to execute the file on their machine, then\n\t\t\t\t\t\tthe application's GUI can indicate that the file is unsafe.","\n","The user interface provides a warning to a user regarding\n\t\t\t\t\tdangerous or sensitive operations, but the warning is not noticeable enough to\n\t\t\t\t\twarrant attention.\n","\n","The software does not implement or incorrectly implements one\n\t\t\t\t\tor more security-relevant checks as specified by the design of a standardized\n\t\t\t\t\talgorithm, protocol, or technique.\n","\n","The software does not properly prevent private data (such as\n\t\t\t\t\tcredit card numbers) from being accessed by actors who either (1) are not\n\t\t\t\t\texplicitly authorized to access the data or (2) do not have the implicit consent\n\t\t\t\t\tof the people to which the data is related. \nMishandling private information, such as customer passwords or Social\n\t\t\t\t\t\tSecurity numbers, can compromise user privacy and is often illegal. An\n\t\t\t\t\t\texposure of private information does not necessarily prevent the software\n\t\t\t\t\t\tfrom working properly, and in fact it might be intended by the developer,\n\t\t\t\t\t\tbut it can still be undesirable (or explicitly prohibited by law) for the\n\t\t\t\t\t\tpeople who are associated with this private information.","In 2004, an employee at AOL sold approximately 92 million private\n\t\t\t\t\t\tcustomer e-mail addresses to a spammer marketing an offshore gambling web\n\t\t\t\t\t\tsite [R.359.1]. In response to such high-profile exploits, the collection\n\t\t\t\t\t\tand management of private data is becoming increasingly\n\t\t\t\t\t\tregulated.\n","The software uses external input to construct a pathname that\n\t\t\t\t\tshould be within a restricted directory, but it does not properly neutralize\n\t\t\t\t\tabsolute path sequences such as \"/abs/path\" that can resolve to a location that\n\t\t\t\t\tis outside of that directory.\nThis allows attackers to traverse the file system to access files or\n\t\t\t\t\t\tdirectories that are outside of the restricted directory.","The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","In the example below, the path to a dictionary file is read from a\n\t\t\t\t\t\tsystem property and used to initialize a File object.\n","Security based on event locations are insecure and can be\n\t\t\t\t\tspoofed.\nEvents are a messaging system which may provide control data to programs\n\t\t\t\t\t\tlistening for events. Events often do not have any type of authentication\n\t\t\t\t\t\tframework to allow them to be verified from a trusted source. Any\n\t\t\t\t\t\tapplication, in Windows, on a given desktop can send a message to any window\n\t\t\t\t\t\ton the same desktop. There is no authentication framework for these\n\t\t\t\t\t\tmessages. Therefore, any message can be used to manipulate any process on\n\t\t\t\t\t\tthe desktop if the process does not check the validity and safeness of those\n\t\t\t\t\t\tmessages.","If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity.","This example code prints out secret information when an authorized\n\t\t\t\t\t\tuser activates a button:\n","The program contains a code sequence that can run concurrently\n\t\t\t\t\twith other code, and the code sequence requires temporary, exclusive access to a\n\t\t\t\t\tshared resource, but a timing window exists in which the shared resource can be\n\t\t\t\t\tmodified by another code sequence that is operating\n\t\t\t\t\tconcurrently.\nThis can have security implications when the expected synchronization is\n\t\t\t\t\t\tin security-critical code, such as recording whether a user is authenticated\n\t\t\t\t\t\tor modifying important state information that should not be influenced by an\n\t\t\t\t\t\toutsider.","When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).\nWhen a race condition allows multiple control flows to access a resource simultaneously, it might lead the program(s) into unexpected states, possibly resulting in a crash.\nWhen a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).","The relationship between race conditions and synchronization problems\n\t\t\t\t\t\t(CWE-662) needs to be further developed. They are not necessarily two\n\t\t\t\t\t\tperspectives of the same core concept, since synchronization is only one\n\t\t\t\t\t\ttechnique for avoiding race conditions, and synchronization can be used for\n\t\t\t\t\t\tother purposes besides race condition prevention.","This code could be used in an e-commerce application that supports\n\t\t\t\t\t\ttransfers between accounts. It takes the total amount of the transfer, sends\n\t\t\t\t\t\tit to the new account, and deducts the amount from the original\n\t\t\t\t\t\taccount.\n","The software checks the status of a file or directory before\n\t\t\t\t\taccessing it, which produces a race condition in which the file can be replaced\n\t\t\t\t\twith a link before the access is performed, causing the software to access the\n\t\t\t\t\twrong file.\nWhile developers might expect that there is a very narrow time window\n\t\t\t\t\t\tbetween the time of check and time of use, there is still a race condition.\n\t\t\t\t\t\tAn attacker could cause the software to slow down (e.g. with memory\n\t\t\t\t\t\tconsumption), causing the time window to become larger. Alternately, in some\n\t\t\t\t\t\tsituations, the attacker could win the race by performing a large number of\n\t\t\t\t\t\tattacks."," This code prints the contents of a file if a user has permission. \n","The software uses a signal handler that introduces a race\n\t\t\t\t\tcondition. \nRace conditions frequently occur in signal handlers, since signal handlers\n\t\t\t\t\t\tsupport asynchronous actions. These race conditions have a variety of root\n\t\t\t\t\t\tcauses and symptoms. Attackers may be able to exploit a signal handler race\n\t\t\t\t\t\tcondition to cause the software state to be corrupted, possibly leading to a\n\t\t\t\t\t\tdenial of service or even code execution.","It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data.\nIf a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe.","This code registers the same signal handler function with two\n\t\t\t\t\t\tdifferent signals (CWE-831). If those signals are sent to the process, the\n\t\t\t\t\t\thandler creates a log message (specified in the first argument to the\n\t\t\t\t\t\tprogram) and exits.\n","The code contains a switch statement in which the switched\n\t\t\t\t\tvariable can be modified while the switch is still executing, resulting in\n\t\t\t\t\tunexpected behavior.\nThis issue is particularly important in the case of switch statements that\n\t\t\t\t\t\tinvolve fall-through style case statements - ie., those which do not end\n\t\t\t\t\t\twith break. If the variable being tested by the switch changes in the course\n\t\t\t\t\t\tof execution, this could change the intended logic of the switch so much\n\t\t\t\t\t\tthat it places the process in a contradictory state and in some cases could\n\t\t\t\t\t\teven result in memory corruption.","This weakness may lead to unexpected system state, resulting in unpredictable behavior.","This example has a switch statement that executes different code\n\t\t\t\t\t\tdepending on the current time.\n","If two threads of execution use a resource simultaneously,\n\t\t\t\t\tthere exists the possibility that resources may be used while invalid, in turn\n\t\t\t\t\tmaking the state of execution undefined.\n","The main problem is that -- if a lock is overcome -- data could be altered in a bad state.","\n","The software checks the state of a resource before using that\n\t\t\t\t\tresource, but the resource's state can change between the check and the use in a\n\t\t\t\t\tway that invalidates the results of the check. This can cause the software to\n\t\t\t\t\tperform invalid actions when the resource is in an unexpected\n\t\t\t\t\tstate.\nThis weakness can be security-relevant when an attacker can influence the\n\t\t\t\t\t\tstate of the resource between check and use. This can happen with shared\n\t\t\t\t\t\tresources such as files, memory, or even variables in multithreaded\n\t\t\t\t\t\tprograms.","The attacker can gain access to otherwise unauthorized resources.\nRace conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question.\nThe resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user.\nIf a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur.\nIn some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files.","The following code checks a file, then updates its\n\t\t\t\t\t\tcontents.\n","A product performs a series of non-atomic actions to switch\n\t\t\t\t\tbetween contexts that cross privilege or other security boundaries, but a race\n\t\t\t\t\tcondition allows an attacker to modify or misrepresent the product's behavior\n\t\t\t\t\tduring the switch.\nThis is commonly seen in web browser vulnerabilities in which the attacker\n\t\t\t\t\t\tcan perform certain actions while the browser is transitioning from a\n\t\t\t\t\t\ttrusted to an untrusted domain, or vice versa, and the browser performs the\n\t\t\t\t\t\tactions on one domain using the trust level and resources of the other\n\t\t\t\t\t\tdomain.","\n","The product divides a value by zero.\nThis weakness typically occurs when an unexpected value is provided to the\n\t\t\t\t\t\tproduct, or if an error occurs that is not properly detected. It frequently\n\t\t\t\t\t\toccurs in calculations involving physical dimensions such as size, length,\n\t\t\t\t\t\twidth, and height.","A Divide by Zero results in a crash.","The following Java example contains a function to compute an average\n\t\t\t\t\t\tbut does not validate that the input value used as the denominator is not\n\t\t\t\t\t\tzero. This will create an exception for attempting to divide by zero. If\n\t\t\t\t\t\tthis error is not handled by Java exception handling, unexpected results can\n\t\t\t\t\t\toccur.\n","A software system that accepts input in the form of a slash\n\t\t\t\t\tabsolute path ('/absolute/pathname/here') without appropriate validation can\n\t\t\t\t\tallow an attacker to traverse the file system to unintended locations or access\n\t\t\t\t\tarbitrary files.\n","\n","The software does not check the revocation status of a\n\t\t\t\t\tcertificate after its initial revocation check, which can cause the software to\n\t\t\t\t\tperform privileged actions even after the certificate is revoked at a later\n\t\t\t\t\ttime.\nIf the revocation status of a certificate is not checked before each\n\t\t\t\t\t\taction that requires privileges, the system may be subject to a race\n\t\t\t\t\t\tcondition. If a certificate is revoked after the initial check, all\n\t\t\t\t\t\tsubsequent actions taken with the owner of the revoked certificate will lose\n\t\t\t\t\t\tall benefits guaranteed by the certificate. In fact, it is almost certain\n\t\t\t\t\t\tthat the use of a revoked certificate indicates malicious activity.","Trust may be assigned to an entity who is not who it claims to be.\nData from an untrusted (and possibly malicious) source may be integrated.\nData may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.","The following code checks a certificate before performing an\n\t\t\t\t\t\taction.\n","The software does not properly determine which state it is in,\n\t\t\t\t\tcausing it to assume it is in state X when in fact it is in state Y, causing it\n\t\t\t\t\tto perform incorrect operations in a security-relevant\n\t\t\t\t\tmanner.\n","The classification under CWE-697 is imprecise. Since this entry does not\n\t\t\t\t\t\tcover specific causes for why proper state is not identified, it needs\n\t\t\t\t\t\tdeeper investigation. It is probably more like a category.","\n","This entry was deprecated because it overlapped the same\n\t\t\t\t\tconcepts as race condition (CWE-362) and Improper Synchronization\n\t\t\t\t\t(CWE-662).\n","\n","The program sends non-cloned mutable data as an argument to a\n\t\t\t\t\tmethod or function.\nThe function or method that has been called can alter or delete the\n\t\t\t\t\t\tmutable data. This could violate assumptions that the calling function has\n\t\t\t\t\t\tmade about its state. In situations where unknown code is called with\n\t\t\t\t\t\treferences to mutable data, this external code could make changes to the\n\t\t\t\t\t\tdata sent. If this data was not previously cloned, the modified data might\n\t\t\t\t\t\tnot be valid in the context of execution.","Potentially data could be tampered with by another function which should not have been tampered with.","\n","Sending non-cloned mutable data as a return value may result in\n\t\t\t\t\tthat data being altered or deleted by the calling\n\t\t\t\t\tfunction.\n In situations where functions return references to mutable data, it is\n\t\t\t\t\t\tpossible that the external code which called the function may make changes\n\t\t\t\t\t\tto the data sent. If this data was not previously cloned, the class will\n\t\t\t\t\t\tthen be using modified data which may violate assumptions about its internal\n\t\t\t\t\t\tstate.","Potentially data could be tampered with by another function which should not have been tampered with.","This class has a private list of patients, but provides a way to see\n\t\t\t\t\t\tthe list : \n","Creating and using insecure temporary files can leave\n\t\t\t\t\tapplication and system data vulnerable to attack.\n","The following code uses a temporary file for storing intermediate\n\t\t\t\t\t\tdata gathered from the network before it is processed.\n","Opening temporary files without appropriate measures or\n\t\t\t\t\tcontrols can leave the file, its contents and any function that it impacts\n\t\t\t\t\tvulnerable to attack.\n","If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed.\nIf that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges.\nDepending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership.","In the following code examples a temporary file is created and\n\t\t\t\t\t\twritten to and after using the temporary file the file is closed and deleted\n\t\t\t\t\t\tfrom the file system.\n","The software creates a temporary file in a directory whose\n\t\t\t\t\tpermissions allow unintended actors to determine the file's existence or\n\t\t\t\t\totherwise access that file.\nOn some operating systems, the fact that the temporary file exists may be\n\t\t\t\t\t\tapparent to any user with sufficient privileges to access that directory.\n\t\t\t\t\t\tSince the file is visible, the application that is using the temporary file\n\t\t\t\t\t\tcould be known. If one has access to list the processes on the system, the\n\t\t\t\t\t\tattacker has gained information about what the user is doing at that time.\n\t\t\t\t\t\tBy correlating this with the applications the user is running, an attacker\n\t\t\t\t\t\tcould potentially discover what a user's actions are. From this, higher\n\t\t\t\t\t\tlevels of security could be breached.","Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time.","In the following code examples a temporary file is created and\n\t\t\t\t\t\twritten to and after using the temporary file the file is closed and deleted\n\t\t\t\t\t\tfrom the file system.\n","A software system that accepts input in the form of a backslash\n\t\t\t\t\tabsolute path ('\\absolute\\pathname\\here') without appropriate validation can\n\t\t\t\t\tallow an attacker to traverse the file system to unintended locations or access\n\t\t\t\t\tarbitrary files.\n","\n","A J2EE application uses System.exit(), which also shuts down\n\t\t\t\t\tits container.\n It is never a good idea for a web application to attempt to shut down the\n\t\t\t\t\t\tapplication container. Access to a function that can shut down the\n\t\t\t\t\t\tapplication is an avenue for Denial of Service (DoS) attacks.","Included in the doPost() method defined below is a call to\n\t\t\t\t\t\tSystem.exit() in the event of a specific exception.\n","Thread management in a Web application is forbidden in some\n\t\t\t\t\tcircumstances and is always highly error prone.\nThread management in a web application is forbidden by the J2EE standard\n\t\t\t\t\t\tin some circumstances and is always highly error prone. Managing threads is\n\t\t\t\t\t\tdifficult and is likely to interfere in unpredictable ways with the behavior\n\t\t\t\t\t\tof the application container. Even without interfering with the container,\n\t\t\t\t\t\tthread management usually leads to bugs that are hard to detect and diagnose\n\t\t\t\t\t\tlike deadlock, race conditions, and other synchronization errors.","In the following example, a new Thread object is created and invoked\n\t\t\t\t\t\tdirectly from within the body of a doGet() method in a Java\n\t\t\t\t\t\tservlet.\n","Covert timing channels convey information by modulating some\n\t\t\t\t\taspect of system behavior over time, so that the program receiving the\n\t\t\t\t\tinformation can observe system behavior and infer protected\n\t\t\t\t\tinformation.\n In some instances, knowing when data is transmitted between parties can\n\t\t\t\t\t\tprovide a malicious user with privileged information. Also, externally\n\t\t\t\t\t\tmonitoring the timing of operations can potentially reveal sensitive data.\n\t\t\t\t\t\tFor example, a cryptographic operation can expose its internal state if the\n\t\t\t\t\t\ttime it takes to perform the operation varies, based on the state. ","Information exposure.","\n","A constant symbolic reference to an object is used, even though\n\t\t\t\t\tthe reference can resolve to a different object over time.\n","The attacker can gain access to otherwise unauthorized resources.\nRace conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question.\nThe resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user.\nIf a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur.\nIn some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files.","\n","An attacker can inject a drive letter or Windows volume letter\n\t\t\t\t\t('C:dirname') into a software system to potentially redirect access to an\n\t\t\t\t\tunintended location or arbitrary file.\n","The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.","\n","The software detects a specific error, but takes no actions to\n\t\t\t\t\thandle the error.\n","An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.","The following example attempts to allocate memory for a character.\n\t\t\t\t\t\tAfter the call to malloc, an if statement is used to check whether the\n\t\t\t\t\t\tmalloc function failed.\n","Ignoring exceptions and other error conditions may allow an\n\t\t\t\t\tattacker to induce unexpected behavior unnoticed.\n","This entry needs significant modification. It currently combines\n\t\t\t\t\t\tinformation from three different taxonomies, but each taxonomy is talking\n\t\t\t\t\t\tabout a slightly different issue.","The following code excerpt ignores a rarely-thrown exception from\n\t\t\t\t\t\tdoExchange().\n","The software encounters an error but does not provide a status\n\t\t\t\t\tcode or return value to indicate that an error has\n\t\t\t\t\toccurred.\n","Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors.","In the following snippet from a doPost() servlet method, the server\n\t\t\t\t\t\treturns \"200 OK\" (default) even if an error occurs.\n","A function or operation returns an incorrect return value or\n\t\t\t\t\tstatus code that does not indicate an error, but causes the product to modify\n\t\t\t\t\tits behavior based on the incorrect result.\nThis can lead to unpredictable behavior. If the function is used to make\n\t\t\t\t\t\tsecurity-critical decisions or provide security-critical information, then\n\t\t\t\t\t\tthe wrong status code can cause the software to assume that an action is\n\t\t\t\t\t\tsafe, even when it is not.","This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors.","This probably overlaps various categories, especially those related to\n\t\t\t\t\t\terror handling.","In the following example, an HTTP 404 status code is returned in the\n\t\t\t\t\t\tevent of an IOException encountered in a Java servlet. A 404 code is\n\t\t\t\t\t\ttypically meant to indicate a non-existent resource and would be somewhat\n\t\t\t\t\t\tmisleading in this case.\n","The software does not properly check when a function or\n\t\t\t\t\toperation returns a value that is legitimate for the function, but is not\n\t\t\t\t\texpected by the software.\n","\n","Catching NullPointerException should not be used as an\n\t\t\t\t\talternative to programmatic checks to prevent dereferencing a null\n\t\t\t\t\tpointer.\nProgrammers typically catch NullPointerException under three\n\t\t\t\t\t\tcircumstances:","The following code mistakenly catches a\n\t\t\t\t\t\tNullPointerException.\n","Catching overly broad exceptions promotes complex error\n\t\t\t\t\thandling code that is more likely to contain security\n\t\t\t\t\tvulnerabilities.\nMultiple catch blocks can get ugly and repetitive, but \"condensing\" catch\n\t\t\t\t\t\tblocks by catching a high-level class like Exception can obscure exceptions\n\t\t\t\t\t\tthat deserve special treatment or that should not be caught at this point in\n\t\t\t\t\t\tthe program. Catching an overly broad exception essentially defeats the\n\t\t\t\t\t\tpurpose of Java's typed exceptions, and can become particularly dangerous if\n\t\t\t\t\t\tthe program grows and begins to throw new types of exceptions. The new\n\t\t\t\t\t\texception types will not receive any attention.","The following code excerpt handles three types of exceptions in an\n\t\t\t\t\t\tidentical fashion.\n","Throwing overly broad exceptions promotes complex error\n\t\t\t\t\thandling code that is more likely to contain security\n\t\t\t\t\tvulnerabilities.\nDeclaring a method to throw Exception or Throwable makes it difficult for\n\t\t\t\t\t\tcallers to perform proper error handling and error recovery. Java's\n\t\t\t\t\t\texception mechanism, for example, is set up to make it easy for callers to\n\t\t\t\t\t\tanticipate what can go wrong and write code to handle each specific\n\t\t\t\t\t\texceptional circumstance. Declaring that a method throws a generic form of\n\t\t\t\t\t\texception defeats this system.","The following method throws three types of exceptions.\n","The code has features that do not directly introduce a weakness\n\t\t\t\t\tor vulnerability, but indicate that the product has not been carefully developed\n\t\t\t\t\tor maintained.\nPrograms are more likely to be secure when good development practices are\n\t\t\t\t\t\tfollowed. If a program is complex, difficult to maintain, not portable, or\n\t\t\t\t\t\tshows evidence of neglect, then there is a higher likelihood that weaknesses\n\t\t\t\t\t\tare buried in the code.","\n","An attacker can inject a Windows UNC share ('\\\\UNC\\share\\name')\n\t\t\t\t\tinto a software system to potentially redirect access to an unintended location\n\t\t\t\t\tor arbitrary file.\n","\n","The software does not properly restrict the size or amount of\n\t\t\t\t\tresources that are requested or influenced by an actor, which can be used to\n\t\t\t\t\tconsume more resources than intended.\nLimited resources include memory, file system storage, database connection\n\t\t\t\t\t\tpool entries, or CPU. If an attacker can trigger the allocation of these\n\t\t\t\t\t\tlimited resources, but the number or size of the resources is not\n\t\t\t\t\t\tcontrolled, then the attacker could cause a denial of service that consumes\n\t\t\t\t\t\tall available resources. This would prevent valid users from accessing the\n\t\t\t\t\t\tsoftware, and it could potentially have an impact on the surrounding\n\t\t\t\t\t\tenvironment. For example, a memory exhaustion attack against an application\n\t\t\t\t\t\tcould slow down the application as well as its host operating system.","The most common result of resource exhaustion is denial of service. The software may slow down, crash due to unhandled errors, or lock out legitimate users.\nIn some cases it may be possible to force the software to \"fail open\" in the event of resource exhaustion. The state of the software -- and possibly the security functionality - may then be compromised.","\n","The software does not sufficiently track and release allocated\n\t\t\t\t\tmemory after it has been used, which slowly consumes remaining\n\t\t\t\t\tmemory.\nThis is often triggered by improper handling of malformed data or\n\t\t\t\t\t\tunexpectedly interrupted sessions.","Most memory leaks result in general software reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition.","The following C function leaks a block of allocated memory if the\n\t\t\t\t\t\tcall to read() does not return the expected number of bytes:\n","The software makes resources available to untrusted parties\n\t\t\t\t\twhen those resources are only intended to be accessed by the\n\t\t\t\t\tsoftware.\n","\n","A process does not close sensitive file descriptors before\n\t\t\t\t\tinvoking a child process, which allows the child to perform unauthorized I/O\n\t\t\t\t\toperations using those descriptors.\nWhen a new process is forked or executed, the child process inherits any\n\t\t\t\t\t\topen file descriptors. When the child process has fewer privileges than the\n\t\t\t\t\t\tparent process, this might introduce a vulnerability if the child process\n\t\t\t\t\t\tcan access the file descriptor but does not have the privileges to access\n\t\t\t\t\t\tthe associated file. ","\n","The program does not release or incorrectly releases a resource\n\t\t\t\t\tbefore it is made available for re-use.\nWhen a resource is created or allocated, the developer is responsible for\n\t\t\t\t\t\tproperly releasing the resource as well as accounting for all potential\n\t\t\t\t\t\tpaths of expiration or invalidation, such as a set period of time or\n\t\t\t\t\t\trevocation.","Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool.\nWhen a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation.","The following method never closes the file handle it opens. The\n\t\t\t\t\t\tFinalize() method for StreamReader eventually calls Close(), but there is no\n\t\t\t\t\t\tguarantee as to how long it will take before the Finalize() method is\n\t\t\t\t\t\tinvoked. In fact, there is no guarantee that Finalize() will ever be\n\t\t\t\t\t\tinvoked. In a busy environment, this can result in the VM using up all of\n\t\t\t\t\t\tits available file handles.\n","Software that does not appropriately monitor or control\n\t\t\t\t\tresource consumption can lead to adverse system\n\t\t\t\t\tperformance.\nThis situation is amplified if the software allows malicious users or\n\t\t\t\t\t\tattackers to consume more resources than their access level permits.\n\t\t\t\t\t\tExploiting such a weakness can lead to asymmetric resource consumption,\n\t\t\t\t\t\taiding in amplification attacks against the system or the network.","Sometimes this is a factor in \"flood\" attacks, but other types of amplification exist.","\n","The software does not sufficiently monitor or control\n\t\t\t\t\ttransmitted network traffic volume, so that an actor can cause the software to\n\t\t\t\t\ttransmit more traffic than should be allowed for that\n\t\t\t\t\tactor.\nIn the absence of a policy to restrict asymmetric resource consumption,\n\t\t\t\t\t\tthe application or system cannot distinguish between legitimate\n\t\t\t\t\t\ttransmissions and traffic intended to serve as an amplifying attack on\n\t\t\t\t\t\ttarget systems. Systems can often be configured to restrict the amount of\n\t\t\t\t\t\ttraffic sent out on behalf of a client, based on the client's origin or\n\t\t\t\t\t\taccess level. This is usually defined in a resource allocation policy. In\n\t\t\t\t\t\tthe absence of a mechanism to keep track of transmissions, the system or\n\t\t\t\t\t\tapplication can be easily abused to transmit asymmetrically greater traffic\n\t\t\t\t\t\tthan the request or client should be permitted to.","System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance."," This code listens on a port for DNS requests and sends the result\n\t\t\t\t\t\tto the requesting address. \n","An algorithm in a product has an inefficient worst-case\n\t\t\t\t\tcomputational complexity that may be detrimental to system performance and can\n\t\t\t\t\tbe triggered by an attacker, typically using crafted manipulations that ensure\n\t\t\t\t\tthat the worst case is being reached.\n","The typical consequence is CPU consumption, but memory consumption and consumption of other resources can also occur.","\n","The software allows an entity to perform a legitimate but\n\t\t\t\t\texpensive operation before authentication or authorization has taken\n\t\t\t\t\tplace.\n","System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash."," This data prints the contents of a specified file requested by a\n\t\t\t\t\t\tuser. \n","The software does not handle or incorrectly handles a\n\t\t\t\t\tcompressed input with a very high compression ratio that produces a large\n\t\t\t\t\toutput.\nAn example of data amplification is a \"decompression bomb,\" a small ZIP\n\t\t\t\t\t\tfile that can produce a large amount of data when it is decompressed.","System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.","The DTD and the very brief XML below illustrate what is meant by an\n\t\t\t\t\t\tXML bomb. The ZERO entity contains one character, the letter A. The choice\n\t\t\t\t\t\tof entity name ZERO is being used to indicate length equivalent to that\n\t\t\t\t\t\texponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers\n\t\t\t\t\t\tto ZERO twice, therefore the XML parser will expand ONE to a length of 2, or\n\t\t\t\t\t\t2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32\n\t\t\t\t\t\tcharacters in length, or 4 GB, probably consuming far more data than\n\t\t\t\t\t\texpected.\n","The system or application is vulnerable to file system contents\n\t\t\t\t\tdisclosure through path equivalence. Path equivalence involves the use of\n\t\t\t\t\tspecial characters in file and directory names. The associated manipulations are\n\t\t\t\t\tintended to generate multiple names for the same object.\nPath equivalence is usually employed in order to circumvent access\n\t\t\t\t\t\tcontrols expressed using an incomplete set of file name or file path\n\t\t\t\t\t\trepresentations. This is different from path traversal, wherein the\n\t\t\t\t\t\tmanipulations are performed to generate a name for a different\n\t\t\t\t\t\tobject.","An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.","\n","The software's resource pool is not large enough to handle peak\n\t\t\t\t\tdemand, which allows an attacker to prevent others from accessing the resource\n\t\t\t\t\tby using a (relatively) large number of requests for\n\t\t\t\t\tresources.\nFrequently the consequence is a \"flood\" of connection or sessions.","Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool.","In the following snippet from a Tomcat configuration file, a JDBC\n\t\t\t\t\t\tconnection pool is defined with a maximum of 5 simultaneous connections\n\t\t\t\t\t\t(with a 60 second timeout). In this case, it may be trivial for an attacker\n\t\t\t\t\t\tto instigate a denial of service (DoS) by using up all of the available\n\t\t\t\t\t\tconnections in the pool.\n","The software properly checks for the existence of a lock, but\n\t\t\t\t\tthe lock can be externally controlled or influenced by an actor that is outside\n\t\t\t\t\tof the intended sphere of control.\nThis prevents the software from acting on associated resources or\n\t\t\t\t\t\tperforming other behaviors that are controlled by the presence of the lock.\n\t\t\t\t\t\tRelevant locks might include an exclusive lock or mutex, or modifying a\n\t\t\t\t\t\tshared resource that is treated as a lock. If the lock can be held for an\n\t\t\t\t\t\tindefinite period of time, then the denial of service could be\n\t\t\t\t\t\tpermanent.","When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock."," This code tries to obtain a lock for a file, then writes to it. \n","The software does not lock or does not correctly lock a\n\t\t\t\t\tresource when the software must have exclusive access to the resource. \nWhen a resource is not properly locked, an attacker could modify the\n\t\t\t\t\t\tresource while it is being operated on by the software. This might violate\n\t\t\t\t\t\tthe software's assumption that the resource will not change, potentially\n\t\t\t\t\t\tleading to unexpected behaviors.","The following function attempts to acquire a lock in order to\n\t\t\t\t\t\tperform operations on a shared resource.\n","A product does not check to see if a lock is present before\n\t\t\t\t\tperforming sensitive operations on a resource.\n","\n","The product calls free() twice on the same memory address,\n\t\t\t\t\tpotentially leading to modification of unexpected memory\n\t\t\t\t\tlocations.\nWhen a program calls free() twice with the same argument, the program's\n\t\t\t\t\t\tmemory management data structures become corrupted. This corruption can\n\t\t\t\t\t\tcause the program to crash or, in some circumstances, cause two later calls\n\t\t\t\t\t\tto malloc() to return the same pointer. If malloc() returns the same value\n\t\t\t\t\t\ttwice and the program later gives the attacker control over the data that is\n\t\t\t\t\t\twritten into this doubly-allocated memory, the program becomes vulnerable to\n\t\t\t\t\t\ta buffer overflow attack.","Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code.","It could be argued that Double Free would be most appropriately located as\n\t\t\t\t\t\ta child of \"Use after Free\", but \"Use\" and \"Release\" are considered to be\n\t\t\t\t\t\tdistinct operations within vulnerability theory, therefore this is more\n\t\t\t\t\t\taccurately \"Release of a Resource after Expiration or Release\", which\n\t\t\t\t\t\tdoesn't exist yet.","The following code shows a simple example of a double free\n\t\t\t\t\t\tvulnerability.\n","Referencing memory after it has been freed can cause a program\n\t\t\t\t\tto crash, use unexpected values, or execute code.\nThe use of previously-freed memory can have any number of adverse\n\t\t\t\t\t\tconsequences, ranging from the corruption of valid data to the execution of\n\t\t\t\t\t\tarbitrary code, depending on the instantiation and timing of the flaw. The\n\t\t\t\t\t\tsimplest way data corruption may occur involves the system's reuse of the\n\t\t\t\t\t\tfreed memory. Use-after-free errors have two common and sometimes\n\t\t\t\t\t\toverlapping causes:","The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere.\nIf chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information.\nIf malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code.","\n","The software uses a primary channel for administration or\n\t\t\t\t\trestricted functionality, but it does not properly protect the\n\t\t\t\t\tchannel.\n","\n","A software system that accepts path input in the form of\n\t\t\t\t\ttrailing dot ('filedir.') without appropriate validation can lead to ambiguous\n\t\t\t\t\tpath resolution and allow an attacker to traverse the file system to unintended\n\t\t\t\t\tlocations or access arbitrary files.\n","\n","The software protects a primary channel, but it does not use\n\t\t\t\t\tthe same level of protection for an alternate channel.\n","\n","The product opens an alternate channel to communicate with an\n\t\t\t\t\tauthorized user, but the channel is accessible to other\n\t\t\t\t\tactors.\nThis creates a race condition that allows an attacker to access the\n\t\t\t\t\t\tchannel before the authorized user does.","\n","The software does not properly verify the source of a message\n\t\t\t\t\tin the Windows Messaging System while running at elevated privileges, creating\n\t\t\t\t\tan alternate channel through which an attacker can directly send a message to\n\t\t\t\t\tthe product.\n","\n","This entry has been deprecated because it was a duplicate of\n\t\t\t\t\tCWE-441. All content has been transferred to CWE-441.\n","\n","The product does not sufficiently protect all possible paths\n\t\t\t\t\tthat a user can take to access restricted functionality or\n\t\t\t\t\tresources.\n","\n","The web application does not adequately enforce appropriate\n\t\t\t\t\tauthorization on all restricted URLs, scripts, or files.\nWeb applications susceptible to direct request attacks often make the\n\t\t\t\t\t\tfalse assumption that such resources can only be reached through a given\n\t\t\t\t\t\tnavigation path and so only apply authorization at certain points in the\n\t\t\t\t\t\tpath.","If forced browsing is possible, an attacker may be able to directly\n\t\t\t\t\t\taccess a sensitive page by entering a URL similar to the\n\t\t\t\t\t\tfollowing.\n","The product uses a fixed or controlled search path to find\n\t\t\t\t\tresources, but one or more locations in that path can be under the control of\n\t\t\t\t\tunintended actors.\nAlthough this weakness can occur with any type of resource, it is\n\t\t\t\t\t\tfrequently introduced when a product uses a directory search path to find\n\t\t\t\t\t\texecutables or code libraries, but the path contains a directory that can be\n\t\t\t\t\t\tmodified by an attacker, such as \"/tmp\" or the current working directory. ","This weakness is not a clean fit under CWE-668 or CWE-610, which suggests\n\t\t\t\t\t\tthat the control sphere model might need enhancement or\n\t\t\t\t\t\tclarification.","The following code is from a web application that allows users\n\t\t\t\t\t\taccess to an interface through which they can update their password on the\n\t\t\t\t\t\tsystem. In this environment, user passwords can be managed using the Network\n\t\t\t\t\t\tInformation System (NIS), which is commonly used on UNIX systems. When\n\t\t\t\t\t\tperforming NIS updates, part of the process for updating passwords is to run\n\t\t\t\t\t\ta make command in the /var/yp directory. Performing NIS updates requires\n\t\t\t\t\t\textra privileges.\n","The product uses a search path that contains an unquoted\n\t\t\t\t\telement, in which the element contains whitespace or other separators. This can\n\t\t\t\t\tcause the product to access resources in a parent path.\nIf a malicious individual has access to the file system, it is possible to\n\t\t\t\t\t\televate privileges by inserting such a file as \"C:\\Program.exe\" to be run by\n\t\t\t\t\t\ta privileged program making use of WinExec.","This weakness primarily involves the lack of quoting, which is not\n\t\t\t\t\t\texplicitly stated as a part of CWE-116. CWE-116 also describes output in\n\t\t\t\t\t\tlight of structured messages, but the generation of a filename or search\n\t\t\t\t\t\tpath (as in this weakness) might not be considered a structured\n\t\t\t\t\t\tmessage.","\n","A software system that accepts path input in the form of\n\t\t\t\t\tmultiple trailing dot ('filedir....') without appropriate validation can lead to\n\t\t\t\t\tambiguous path resolution and allow an attacker to traverse the file system to\n\t\t\t\t\tunintended locations or access arbitrary files.\n","\n","The wrong \"handler\" is assigned to process an\n\t\t\t\t\tobject.\nAn example of deploying the wrong handler would be calling a servlet to\n\t\t\t\t\t\treveal source code of a .JSP file, or automatically \"determining\" type of\n\t\t\t\t\t\tthe object even if it is contradictory to an explicitly specified type.\n\t\t\t\t\t","\n","A handler is not available or\n\t\t\t\t\timplemented.\nWhen an exception is thrown and not caught, the process has given up an\n\t\t\t\t\t\topportunity to decide if a given failure or event is worth a change in\n\t\t\t\t\t\texecution.","If a Servlet does not catch all exceptions, it may reveal debugging\n\t\t\t\t\t\tinformation that will help an adversary form a plan of attack. In the\n\t\t\t\t\t\tfollowing method a DNS lookup failure will cause the Servlet to throw an\n\t\t\t\t\t\texception.\n","The application uses a signal handler that shares state with\n\t\t\t\t\tother signal handlers, but it does not properly mask or prevent those signal\n\t\t\t\t\thandlers from being invoked while the original signal handler is still\n\t\t\t\t\trunning.\nDuring the execution of a signal handler, it can be interrupted by another\n\t\t\t\t\t\thandler when a different signal is sent. If the two handlers share state -\n\t\t\t\t\t\tsuch as global variables - then an attacker can corrupt the state by sending\n\t\t\t\t\t\tanother signal before the first handler has completed execution.","\n","The software stores raw content or supporting code under the\n\t\t\t\t\tweb document root with an extension that is not specifically handled by the\n\t\t\t\t\tserver.\nIf code is stored in a file with an extension such as \".inc\" or \".pl\", and\n\t\t\t\t\t\tthe web server does not have a handler for that extension, then the server\n\t\t\t\t\t\twill likely send the contents of the file directly to the requester without\n\t\t\t\t\t\tthe pre-processing that was expected. When that file contains sensitive\n\t\t\t\t\t\tinformation such as database credentials, this may allow the attacker to\n\t\t\t\t\t\tcompromise the application or associated components.","The following code uses an include file to store database\n\t\t\t\t\t\tcredentials:\n","The software allows the attacker to upload or transfer files of\n\t\t\t\t\tdangerous types that can be automatically processed within the product's\n\t\t\t\t\tenvironment.\n"," Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.","The following code intends to allow a user to upload a picture to\n\t\t\t\t\t\tthe web server. The HTML code that drives the form on the user end has an\n\t\t\t\t\t\tinput field of type \"file\".\n","An interaction error occurs when two entities work correctly\n\t\t\t\t\twhen running independently, but they interact in unexpected ways when they are\n\t\t\t\t\trun together.\nThis could apply to products, systems, components, etc.","\n","Product A handles inputs or steps differently than Product B,\n\t\t\t\t\twhich causes A to perform incorrect actions based on its perception of B's\n\t\t\t\t\tstate.\nThis is generally found in proxies, firewalls, anti-virus software, and\n\t\t\t\t\t\tother intermediary devices that monitor, allow, deny, or modify traffic\n\t\t\t\t\t\tbased on how the client or server is expected to behave.","\n","A product acts as an intermediary or monitor between two or\n\t\t\t\t\tmore endpoints, but it does not have a complete model of an endpoint's features,\n\t\t\t\t\tbehaviors, or state, potentially causing the product to perform incorrect\n\t\t\t\t\tactions based on this incomplete model.\n","HTTP request smuggling is an attack against an intermediary such as\n\t\t\t\t\t\ta proxy. This attack works because the proxy expects the client to parse\n\t\t\t\t\t\tHTTP headers one way, but the client parses them differently.\n","A's behavior or functionality changes with a new version of A,\n\t\t\t\t\tor a new environment, which is not known (or manageable) by\n\t\t\t\t\tB.\n","\n","A software system that accepts path input in the form of\n\t\t\t\t\tinternal dot ('file.ordir') without appropriate validation can lead to ambiguous\n\t\t\t\t\tpath resolution and allow an attacker to traverse the file system to unintended\n\t\t\t\t\tlocations or access arbitrary files.\n","\n","A feature, API, or function being used by a product behaves\n\t\t\t\t\tdifferently than the product expects.\n","\n","The software receives a request, message, or directive from an\n\t\t\t\t\tupstream component, but the software does not sufficiently preserve the original\n\t\t\t\t\tsource of the request before forwarding the request to an external actor that is\n\t\t\t\t\toutside of the software's control sphere. This causes the software to appear to\n\t\t\t\t\tbe the source of the request, leading it to act as a proxy or other intermediary\n\t\t\t\t\tbetween the upstream component and the external actor.\nIf an attacker cannot directly contact a target, but the software has\n\t\t\t\t\t\taccess to the target, then the attacker can send a request to the software\n\t\t\t\t\t\tand have it be forwarded from the target. The request would appear to be\n\t\t\t\t\t\tcoming from the software's system, not the attacker's system. As a result,\n\t\t\t\t\t\tthe attacker can bypass access controls (such as firewalls) or hide the\n\t\t\t\t\t\tsource of malicious requests, since the requests would not be coming\n\t\t\t\t\t\tdirectly from the attacker.","This could possibly be considered as an emergent resource.","\n","This weakness can be found at CWE-113.\n","\n","When malformed or abnormal HTTP requests are interpreted by one\n\t\t\t\t\tor more entities in the data flow between the user and the web server, such as a\n\t\t\t\t\tproxy or firewall, they can be interpreted inconsistently, allowing the attacker\n\t\t\t\t\tto \"smuggle\" a request to one device without the other device being aware of\n\t\t\t\t\tit.\n","An attacker could create a request to exploit a number of weaknesses including 1) the request can trick the web server to associate a URL with another URLs webpage and caching the contents of the webpage (web cache poisoning attack), 2) the request can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the request can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).","In the following example, a malformed HTTP request is sent to a\n\t\t\t\t\t\twebsite that includes a proxy server and a web server with the intent of\n\t\t\t\t\t\tpoisoning the cache to associate one webpage with another malicious\n\t\t\t\t\t\twebpage.\n","The user interface does not correctly enable or configure a\n\t\t\t\t\tsecurity feature, but the interface provides feedback that causes the user to\n\t\t\t\t\tbelieve that the feature is in a secure state.\nWhen the user interface does not properly reflect what the user asks of\n\t\t\t\t\t\tit, then it can lead the user into a false sense of security. For example,\n\t\t\t\t\t\tthe user might check a box to enable a security option to enable encrypted\n\t\t\t\t\t\tcommunications, but the software does not actually enable the encryption.\n\t\t\t\t\t\tAlternately, the user might provide a \"restrict ALL'\" access control rule,\n\t\t\t\t\t\tbut the software only implements \"restrict SOME\".","This node is likely a loose composite that could be broken down into the\n\t\t\t\t\t\tdifferent types of errors that cause the user interface to have incorrect\n\t\t\t\t\t\tinteractions with the underlying security feature.","\n","A UI function for a security feature appears to be supported\n\t\t\t\t\tand gives feedback to the user that suggests that it is supported, but the\n\t\t\t\t\tunderlying functionality is not implemented.\n","\n","A UI function is obsolete and the product does not warn the\n\t\t\t\t\tuser.\n","\n","The UI performs the wrong action with respect to the user's\n\t\t\t\t\trequest.\n","\n","A software system that accepts path input in the form of\n\t\t\t\t\tmultiple internal dot ('file...dir') without appropriate validation can lead to\n\t\t\t\t\tambiguous path resolution and allow an attacker to traverse the file system to\n\t\t\t\t\tunintended locations or access arbitrary files.\n","\n","The UI has multiple interpretations of user input but does not\n\t\t\t\t\tprompt the user when it selects the less secure\n\t\t\t\t\tinterpretation.\n","\n","The user interface (UI) does not properly represent critical\n\t\t\t\t\tinformation to the user, allowing the information - or its source - to be\n\t\t\t\t\tobscured or spoofed. This is often a component in phishing\n\t\t\t\t\tattacks.\n If an attacker can cause the UI to display erroneous data, or to\n\t\t\t\t\t\totherwise convince the user to display information that appears to come from\n\t\t\t\t\t\ta trusted source, then the attacker could trick the user into performing the\n\t\t\t\t\t\twrong action. This is often a component in phishing attacks, but other kinds\n\t\t\t\t\t\tof problems exist. For example, if the UI is used to monitor the security\n\t\t\t\t\t\tstate of a system or network, then omitting or obscuring an important\n\t\t\t\t\t\tindicator could prevent the user from detecting and reacting to a\n\t\t\t\t\t\tsecurity-critical event. ","This entry could be broken down into smaller entries. It is probably more\n\t\t\t\t\t\tlike a Class than a Base.","\n","The software, by default, initializes an internal variable with\n\t\t\t\t\tan insecure or less secure value than is possible.\n","An attacker could gain access to and modify sensitive data or system information.","This overlaps other categories, probably should be split into separate\n\t\t\t\t\t\titems.","This code attempts to login a user using credentials from a POST\n\t\t\t\t\t\trequest:\n","The software initializes critical internal variables or data\n\t\t\t\t\tstores using inputs that can be modified by untrusted\n\t\t\t\t\tactors.\nA software system should be reluctant to trust variables that have been\n\t\t\t\t\t\tinitialized outside of its trust boundary, especially if they are\n\t\t\t\t\t\tinitialized by users. They may have been initialized incorrectly. If an\n\t\t\t\t\t\tattacker can initialize the variable, then he/she can influence what the\n\t\t\t\t\t\tvulnerable system will do.","An attacker could gain access to and modify sensitive data or system information.","In the Java example below, a system property controls the debug\n\t\t\t\t\t\tlevel of the application.\n","The software does not exit or otherwise modify its operation\n\t\t\t\t\twhen security-relevant errors occur during initialization, such as when a\n\t\t\t\t\tconfiguration file has a format error, which can cause the software to execute\n\t\t\t\t\tin a less secure fashion than intended by the\n\t\t\t\t\tadministrator.\n","The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.","The following code intends to limit certain operations to the\n\t\t\t\t\t\tadministrator only.\n","The software does not initialize critical variables, which\n\t\t\t\t\tcauses the execution environment to use unexpected values.\n","The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem.","Here, an uninitialized field in a Java class is used in a\n\t\t\t\t\t\tseldom-called method, which would cause a NullPointerException to be\n\t\t\t\t\t\tthrown.\n","The code uses a variable that has not been initialized, leading\n\t\t\t\t\tto unpredictable or unintended results.\nIn some languages such as C and C++, stack variables are not initialized\n\t\t\t\t\t\tby default. They generally contain junk data with the contents of stack\n\t\t\t\t\t\tmemory before the function was invoked. An attacker can sometimes control or\n\t\t\t\t\t\tread these contents. In other languages or conditions, a variable that is\n\t\t\t\t\t\tnot explicitly initialized can be given a default value that has security\n\t\t\t\t\t\timplications, depending on the logic of the program. The presence of an\n\t\t\t\t\t\tuninitialized variable can sometimes indicate a typographic error in the\n\t\t\t\t\t\tcode.","Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can \"pre-initialize\" the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not.\nStrings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string."," This code prints a greeting using information stored in a POST\n\t\t\t\t\t\trequest:\n","This weakness has been deprecated because its name and\n\t\t\t\t\tdescription did not match. The description duplicated CWE-454, while the name\n\t\t\t\t\tsuggested a more abstract initialization problem. Please refer to CWE-665 for\n\t\t\t\t\tthe more abstract problem.\n","\n","The software does not properly \"clean up\" and remove temporary\n\t\t\t\t\tor supporting resources after they have been used.\n","It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem.","Stream resources in a Java application should be released in a\n\t\t\t\t\t\tfinally block, otherwise an exception thrown before the call to close()\n\t\t\t\t\t\twould result in an unreleased I/O resource. In the example below, the\n\t\t\t\t\t\tclose() method is called in the try block (incorrect).\n","A software system that accepts path input in the form of\n\t\t\t\t\ttrailing space ('filedir ') without appropriate validation can lead to ambiguous\n\t\t\t\t\tpath resolution and allow an attacker to traverse the file system to unintended\n\t\t\t\t\tlocations or access arbitrary files.\n","\n","The product does not clean up its state or incorrectly cleans\n\t\t\t\t\tup its state when an exception is thrown, leading to unexpected state or control\n\t\t\t\t\tflow.\nOften, when functions or loops become complicated, some level of resource\n\t\t\t\t\t\tcleanup is needed throughout execution. Exceptions can disturb the flow of\n\t\t\t\t\t\tthe code and prevent the necessary cleanup from happening.","The code could be left in a bad state.","\n","Duplicate keys in associative lists can lead to non-unique keys\n\t\t\t\t\tbeing mistaken for an error.\n A duplicate key entry -- if the alist is designed properly -- could be\n\t\t\t\t\t\tused as a constant time replace function. However, duplicate key entries\n\t\t\t\t\t\tcould be inserted by mistake. Because of this ambiguity, duplicate key\n\t\t\t\t\t\tentries in an association list are not recommended and should not be\n\t\t\t\t\t\tallowed. ","The following code adds data to a list and then attempts to sort the\n\t\t\t\t\t\tdata.\n","The accidental deletion of a data-structure sentinel can cause\n\t\t\t\t\tserious programming logic problems.\n Often times data-structure sentinels are used to mark structure of the\n\t\t\t\t\t\tdata structure. A common example of this is the null character at the end of\n\t\t\t\t\t\tstrings. Another common example is linked lists which may contain a sentinel\n\t\t\t\t\t\tto mark the end of the list. It is dangerous to allow this type of control\n\t\t\t\t\t\tdata to be easily accessible. Therefore, it is important to protect from the\n\t\t\t\t\t\tdeletion or modification outside of some wrapper interface which provides\n\t\t\t\t\t\tsafety. ","Generally this error will cause the data structure to not work properly.\nIf a control character, such as NULL is removed, one may cause resource access control problems.","This example creates a null terminated string and prints it\n\t\t\t\t\t\tcontents.\n","The accidental addition of a data-structure sentinel can cause\n\t\t\t\t\tserious programming logic problems.\nData-structure sentinels are often used to mark the structure of data. A\n\t\t\t\t\t\tcommon example of this is the null character at the end of strings or a\n\t\t\t\t\t\tspecial sentinel to mark the end of a linked list. It is dangerous to allow\n\t\t\t\t\t\tthis type of control data to be easily accessible. Therefore, it is\n\t\t\t\t\t\timportant to protect from the addition or modification of sentinels.","Generally this error will cause the data structure to not work properly by truncating the data.","The following example assigns some character values to a list of\n\t\t\t\t\t\tcharacters and prints them each individually, and then as a string. The\n\t\t\t\t\t\tthird character value is intended to be an integer taken from user input and\n\t\t\t\t\t\tconverted to an int.\n","A function can return a pointer to memory that is outside of\n\t\t\t\t\tthe buffer that the pointer is expected to reference.\n"," This entry should have a chaining relationship with CWE-119 instead of a\n\t\t\t\t\t\tparent / child relationship, however the focus of this weakness does not map\n\t\t\t\t\t\tcleanly to any existing entries in CWE. A new parent is being considered\n\t\t\t\t\t\twhich covers the more generic problem of incorrect return values. There is\n\t\t\t\t\t\talso an abstract relationship to weaknesses in which one component sends\n\t\t\t\t\t\tincorrect messages to another component; in this case, one routine is\n\t\t\t\t\t\tsending an incorrect value to another.","\n","The code calls sizeof() on a malloced pointer type, which\n\t\t\t\t\talways returns the wordsize/8. This can produce an unexpected result if the\n\t\t\t\t\tprogrammer intended to determine how much memory has been\n\t\t\t\t\tallocated.\nThe use of sizeof() on a pointer can sometimes generate useful\n\t\t\t\t\t\tinformation. An obvious case is to find out the wordsize on a platform. More\n\t\t\t\t\t\toften than not, the appearance of sizeof(pointer) indicates a bug.","This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows.","Care should be taken to ensure sizeof returns the size of the data\n\t\t\t\t\t\tstructure itself, and not the size of the pointer to the data\n\t\t\t\t\t\tstructure.\n","In C and C++, one may often accidentally refer to the wrong\n\t\t\t\t\tmemory due to the semantics of when math operations are implicitly\n\t\t\t\t\tscaled.\n","Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.","This example attempts to calculate the position of the second byte\n\t\t\t\t\t\tof a pointer.\n","The application subtracts one pointer from another in order to\n\t\t\t\t\tdetermine size, but this calculation can be incorrect if the pointers do not\n\t\t\t\t\texist in the same memory chunk.\n","There is the potential for arbitrary code execution with privileges of the vulnerable program.","The following example contains the method size that is used to\n\t\t\t\t\t\tdetermine the number of nodes in a linked list. The method is passed a\n\t\t\t\t\t\tpointer to the head of the linked list.\n","A software system that accepts path input in the form of\n\t\t\t\t\tleading space (' filedir') without appropriate validation can lead to ambiguous\n\t\t\t\t\tpath resolution and allow an attacker to traverse the file system to unintended\n\t\t\t\t\tlocations or access arbitrary files.\n","\n","The application uses external input with reflection to select\n\t\t\t\t\twhich classes or code to use, but it does not sufficiently prevent the input\n\t\t\t\t\tfrom selecting improper classes or code.\nIf the application uses external inputs to determine which class to\n\t\t\t\t\t\tinstantiate or which method to invoke, then an attacker could supply values\n\t\t\t\t\t\tto select unexpected classes or methods. If this occurs, then the attacker\n\t\t\t\t\t\tcould create control flow paths that were not intended by the developer.\n\t\t\t\t\t\tThese paths could bypass authentication or access control checks, or\n\t\t\t\t\t\totherwise cause the application to behave in an unexpected manner. This\n\t\t\t\t\t\tsituation becomes a doomsday scenario if the attacker can upload files into\n\t\t\t\t\t\ta location that appears on the application's classpath (CWE-427) or add new\n\t\t\t\t\t\tentries to the application's classpath (CWE-426). Under either of these\n\t\t\t\t\t\tconditions, the attacker can use reflection to introduce new, malicious\n\t\t\t\t\t\tbehavior into the application.","The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.\nThe attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the application to exit or hang.\nBy causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.","A common reason that programmers use the reflection API is to\n\t\t\t\t\t\timplement their own command dispatcher. The following example shows a\n\t\t\t\t\t\tcommand dispatcher that does not use reflection:\n","The software does not properly protect an assumed-immutable\n\t\t\t\t\telement from being modified by an attacker.\nThis occurs when a particular input is critical enough to the functioning\n\t\t\t\t\t\tof the application that it should not be modifiable at all, but it is.\n\t\t\t\t\t\tCertain resources are often assumed to be immutable when they are not, such\n\t\t\t\t\t\tas hidden form fields in web applications, cookies, and reverse DNS\n\t\t\t\t\t\tlookups.","Common data types that are attacked are environment variables, web application parameters, and HTTP headers.\n","In the code excerpt below, an array returned by a Java method is\n\t\t\t\t\t\tmodified despite the fact that arrays are mutable.\n","The web application does not sufficiently verify inputs that\n\t\t\t\t\tare assumed to be immutable but are actually externally controllable, such as\n\t\t\t\t\thidden form fields.\nIf a web product does not properly protect assumed-immutable values from\n\t\t\t\t\t\tmodification in hidden form fields, parameters, cookies, or URLs, this can\n\t\t\t\t\t\tlead to modification of critical data. Web applications often mistakenly\n\t\t\t\t\t\tmake the assumption that data passed to the client in hidden fields or\n\t\t\t\t\t\tcookies is not susceptible to tampering. Improper validation of data that\n\t\t\t\t\t\tare user-controllable can lead to the application processing incorrect, and\n\t\t\t\t\t\toften malicious, input.","Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.","Here, a web application uses the value of a hidden form field\n\t\t\t\t\t\t(accountID) without having done any input validation because it was assumed\n\t\t\t\t\t\tto be immutable.\n","A PHP application does not properly protect against the\n\t\t\t\t\tmodification of variables from external sources, such as query parameters or\n\t\t\t\t\tcookies. This can expose the application to numerous weaknesses that would not\n\t\t\t\t\texist otherwise.\n","\n","The code uses a function that has inconsistent implementations\n\t\t\t\t\tacross operating systems and versions.\nThe use of inconsistent implementations can cause changes in behavior when\n\t\t\t\t\t\tthe code is ported or built under a different environment than the\n\t\t\t\t\t\tprogrammer expects, which can lead to security problems in some\n\t\t\t\t\t\tcases.","\n","The behavior of this function is undefined unless its control\n\t\t\t\t\tparameter is set to a specific value.\n","\n","A NULL pointer dereference occurs when the application\n\t\t\t\t\tdereferences a pointer that it expects to be valid, but is NULL, typically\n\t\t\t\t\tcausing a crash or exit.\nNULL pointer dereference issues can occur through a number of flaws,\n\t\t\t\t\t\tincluding race conditions, and simple programming omissions.","NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.\nIn very rare circumstances and environments, code execution is possible."," While there are no complete fixes aside from conscientious\n\t\t\t\t\t\tprogramming, the following steps will go a long way to ensure that NULL\n\t\t\t\t\t\tpointer dereferences do not occur. \n","The code uses deprecated or obsolete functions, which suggests\n\t\t\t\t\tthat the code has not been actively reviewed or\n\t\t\t\t\tmaintained.\nAs programming languages evolve, functions occasionally become obsolete\n\t\t\t\t\t\tdue to:","The following code uses the deprecated function getpw() to verify\n\t\t\t\t\t\tthat a plaintext password matches a user's encrypted password. If the\n\t\t\t\t\t\tpassword is valid, the function sets result to 1; otherwise it is set to\n\t\t\t\t\t\t0.\n","The code does not have a default case in a switch statement,\n\t\t\t\t\twhich might lead to complex logical errors and resultant\n\t\t\t\t\tweaknesses.\nThis flaw represents a common problem in software development, in which\n\t\t\t\t\t\tnot all possible values for a variable are considered or handled by a given\n\t\t\t\t\t\tprocess. Because of this, further decisions are made based on poor\n\t\t\t\t\t\tinformation, and cascading failure results. This cascading failure may\n\t\t\t\t\t\tresult in any number of security issues, and constitutes a significant\n\t\t\t\t\t\tfailure in the system. ","Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.","The following does not properly check the return code in the case\n\t\t\t\t\t\twhere the security_check function returns a -1 value when an error occurs.\n\t\t\t\t\t\tIf an attacker can supply data that will invoke an error, the attacker can\n\t\t\t\t\t\tbypass the security check:\n","The program defines a signal handler that calls a non-reentrant\n\t\t\t\t\tfunction.\nNon-reentrant functions are functions that cannot safely be called,\n\t\t\t\t\t\tinterrupted, and then recalled before the first call has finished without\n\t\t\t\t\t\tresulting in memory corruption. This can lead to an unexpected system state\n\t\t\t\t\t\tan unpredictable results with a variety of potential consequences depending\n\t\t\t\t\t\ton context, including denial of service and code execution.","It may be possible to execute arbitrary code through the use of a write-what-where condition.\nSignal race conditions often result in data corruption.","In this example, a signal handler uses syslog() to log a\n\t\t\t\t\t\tmessage:\n","A software system that accepts path input in the form of\n\t\t\t\t\tinternal space ('file(SPACE)name') without appropriate validation can lead to\n\t\t\t\t\tambiguous path resolution and allow an attacker to traverse the file system to\n\t\t\t\t\tunintended locations or access arbitrary files.\n","\n","The programmer accidentally uses the wrong operator, which\n\t\t\t\t\tchanges the application logic in security-relevant ways.\nThese types of errors are generally the result of a typo.","This weakness can cause unintended logic to be executed and other unexpected application behavior.","The following C/C++ and C# examples attempt to validate an int input\n\t\t\t\t\t\tparameter against the integer value 100.\n","The code uses an operator for assignment when the intention was\n\t\t\t\t\tto perform a comparison.\nIn many languages the compare statement is very close in appearance to the\n\t\t\t\t\t\tassignment statement and are often confused. This bug is generally the\n\t\t\t\t\t\tresult of a typo and usually causes obvious problems with program execution.\n\t\t\t\t\t\tIf the comparison is in an if statement, the if statement will usually\n\t\t\t\t\t\tevaluate the value of the right-hand side of the predicate. ","The following C/C++ and C# examples attempt to validate an int input\n\t\t\t\t\t\tparameter against the integer value 100.\n","The code uses an operator for comparison when the intention was\n\t\t\t\t\tto perform an assignment.\nIn many languages, the compare statement is very close in appearance to\n\t\t\t\t\t\tthe assignment statement; they are often confused.","The assignment will not take place, which should cause obvious program execution problems. ","\n","The code does not explicitly delimit a block that is intended\n\t\t\t\t\tto contain 2 or more statements, creating a logic error.\nIn some languages, braces (or other delimiters) are optional for blocks.\n\t\t\t\t\t\tWhen the delimiter is omitted, it is possible to insert a logic error in\n\t\t\t\t\t\twhich a statement is thought to be in a block but is not. In some cases, the\n\t\t\t\t\t\tlogic error can have security implications.","This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.","In this example, the programmer has indented the statements to call\n\t\t\t\t\t\tDo_X() and Do_Y(), as if the intention is that these functions are only\n\t\t\t\t\t\tcalled when the condition is true. However, because there are no braces to\n\t\t\t\t\t\tsignify the block, Do_Y() will always be executed, even if the condition is\n\t\t\t\t\t\tfalse.\n","The program omits a break statement within a switch or similar\n\t\t\t\t\tconstruct, causing code associated with multiple conditions to execute. This can\n\t\t\t\t\tcause problems when the programmer only intended to execute code associated with\n\t\t\t\t\tone condition.\nThis can lead to critical code executing in situations where it should\n\t\t\t\t\t\tnot.","This weakness can cause unintended logic to be executed and other unexpected application behavior.","In both of these examples, a message is printed based on the month\n\t\t\t\t\t\tpassed into the function:\n","The product does not sufficiently encapsulate critical data or\n\t\t\t\t\tfunctionality.\nEncapsulation is about drawing strong boundaries. In a web browser that\n\t\t\t\t\t\tmight mean ensuring that your mobile code cannot be abused by other mobile\n\t\t\t\t\t\tcode. On the server it might mean differentiation between validated data and\n\t\t\t\t\t\tunvalidated data, between one user's data and another's, or between data\n\t\t\t\t\t\tusers are allowed to see and data that they are not.","This node has to be considered in relation to CWE-732 and CWE-269.","\n","The program compares classes by name, which can cause it to use\n\t\t\t\t\tthe wrong class when multiple classes can have the same\n\t\t\t\t\tname.\nIf the decision to trust the methods and data of an object is based on the\n\t\t\t\t\t\tname of a class, it is possible for malicious users to send objects of the\n\t\t\t\t\t\tsame name as trusted classes and thereby gain the trust afforded to known\n\t\t\t\t\t\tclasses and types.","If a program relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.","In this example, the expression in the if statement compares the\n\t\t\t\t\t\tclass of the inputClass object to a trusted class by comparing the class\n\t\t\t\t\t\tnames.\n","Java packages are not inherently closed; therefore, relying on\n\t\t\t\t\tthem for code security is not a good practice.\nThe purpose of package scope is to prevent accidental access by other\n\t\t\t\t\t\tparts of a program. This is an ease-of-software-development feature but not\n\t\t\t\t\t\ta security feature.","Any data in a Java package can be accessed outside of the Java framework if the package is distributed.\nThe data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.","\n","The product does not sufficiently enforce boundaries between\n\t\t\t\t\tthe states of different sessions, causing data to be provided to, or used by,\n\t\t\t\t\tthe wrong session.\nData can \"bleed\" from one session to another through member variables of\n\t\t\t\t\t\tsingleton objects, such as Servlets, and objects from a shared pool.","The following Servlet stores the value of a request parameter in a\n\t\t\t\t\t\tmember field and then later echoes the parameter value to the response\n\t\t\t\t\t\toutput stream.\n","The application can be deployed with active debugging code that\n\t\t\t\t\tcan create unintended entry points.\nA common development practice is to add \"back door\" code specifically\n\t\t\t\t\t\tdesigned for debugging or testing purposes that is not intended to be\n\t\t\t\t\t\tshipped or deployed with the application. These back door entry points\n\t\t\t\t\t\tcreate security risks because they are not considered during design or\n\t\t\t\t\t\ttesting and fall outside of the expected operating conditions of the\n\t\t\t\t\t\tapplication.","The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.","Debug code can be used to bypass authentication. For example,\n\t\t\t\t\t\tsuppose an application has a login script that receives a username and a\n\t\t\t\t\t\tpassword. Assume also that a third, optional, parameter, called \"debug\", is\n\t\t\t\t\t\tinterpreted by the script as requesting a switch to debug mode, and that\n\t\t\t\t\t\twhen this parameter is given the username and password are not checked. In\n\t\t\t\t\t\tsuch a case, it is very simple to bypass the authentication process if the\n\t\t\t\t\t\tspecial behavior of the application regarding the debug parameter is known.\n\t\t\t\t\t\tIn a case where the form is:\n","A software system that accepts path input in the form of\n\t\t\t\t\ttrailing slash ('filedir/') without appropriate validation can lead to ambiguous\n\t\t\t\t\tpath resolution and allow an attacker to traverse the file system to unintended\n\t\t\t\t\tlocations or access arbitrary files.\n","\n","A class has a cloneable() method that is not declared final,\n\t\t\t\t\twhich allows an object to be created without calling the constructor. This can\n\t\t\t\t\tcause the object to be in an unexpected state.\n","In this example, a public class \"BankAccount\" implements the\n\t\t\t\t\t\tcloneable() method which declares \"Object clone(string\n\t\t\t\t\t\taccountnumber)\":\n","Inner classes are translated into classes that are accessible\n\t\t\t\t\tat package scope and may expose code that the programmer intended to keep\n\t\t\t\t\tprivate to attackers.\nInner classes quietly introduce several security concerns because of the\n\t\t\t\t\t\tway they are translated into Java bytecode. In Java source code, it appears\n\t\t\t\t\t\tthat an inner class can be declared to be accessible only by the enclosing\n\t\t\t\t\t\tclass, but Java bytecode has no concept of an inner class, so the compiler\n\t\t\t\t\t\tmust transform an inner class declaration into a peer class with package\n\t\t\t\t\t\tlevel access to the original outer class. More insidiously, since an inner\n\t\t\t\t\t\tclass can access private fields in their enclosing class, once an inner\n\t\t\t\t\t\tclass becomes a peer class in bytecode, the compiler converts private fields\n\t\t\t\t\t\taccessed by the inner class into protected fields.","\"Inner Classes\" data confidentiality aspects can often be overcome.","The following Java Applet code mistakenly makes use of an inner\n\t\t\t\t\t\tclass.\n","The product has a critical public variable that is not final,\n\t\t\t\t\twhich allows the variable to be modified to contain unexpected\n\t\t\t\t\tvalues.\nIf a field is non-final and public, it can be changed once the value is\n\t\t\t\t\t\tset by any function that has access to the class which contains the field.\n\t\t\t\t\t\tThis could lead to a vulnerability if other parts of the program make\n\t\t\t\t\t\tassumptions about the contents of that field.","The object could potentially be tampered with.\nThe object could potentially allow the object to be read.","Mobile code, such as a Java Applet, is code that is transmitted across a\n\t\t\t\t\t\tnetwork and executed on a remote machine. Because mobile code developers\n\t\t\t\t\t\thave little if any control of the environment in which their code will\n\t\t\t\t\t\texecute, special security concerns become relevant. One of the biggest\n\t\t\t\t\t\tenvironmental threats results from the risk that the mobile code will run\n\t\t\t\t\t\tside-by-side with other, potentially malicious, mobile code. Because all of\n\t\t\t\t\t\tthe popular web browsers execute code from multiple sources together in the\n\t\t\t\t\t\tsame JVM, many of the security guidelines for mobile code are focused on\n\t\t\t\t\t\tpreventing manipulation of your objects' state and behavior by adversaries\n\t\t\t\t\t\twho have access to the same virtual machine where your program is\n\t\t\t\t\t\trunning.","Suppose this WidgetData class is used for an e-commerce web site.\n\t\t\t\t\t\tThe programmer attempts to prevent price-tampering attacks by setting the\n\t\t\t\t\t\tprice of the widget using the constructor.\n","The product downloads source code or an executable from a\n\t\t\t\t\tremote location and executes the code without sufficiently verifying the origin\n\t\t\t\t\tand integrity of the code.\nAn attacker can execute malicious code by compromising the host server,\n\t\t\t\t\t\tperforming DNS spoofing, or modifying the code in transit.","Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.","This example loads an external class from a local\n\t\t\t\t\t\tsubdirectory.\n","The product has a method that is declared public, but returns a\n\t\t\t\t\treference to a private array, which could then be modified in unexpected\n\t\t\t\t\tways.\n","The contents of the array can be modified from outside the intended scope.","Here, a public method in a Java class returns a reference to a\n\t\t\t\t\t\tprivate array. Given that arrays in Java are mutable, any modifications made\n\t\t\t\t\t\tto the returned reference would be reflected in the original private\n\t\t\t\t\t\tarray.\n","Assigning public data to a private array is equivalent to\n\t\t\t\t\tgiving public access to the array.\n","The contents of the array can be modified from outside the intended scope.","In the example below, the setRoles() method assigns a\n\t\t\t\t\t\tpublically-controllable array to a private field, thus allowing the caller\n\t\t\t\t\t\tto modify the private array directly by virtue of the fact that arrays in\n\t\t\t\t\t\tJava are mutable.\n","Exposing system data or debugging information helps an\n\t\t\t\t\tadversary learn about the system and form an attack plan.\nAn information exposure occurs when system data or debugging information\n\t\t\t\t\t\tleaves the program through an output stream or logging function that makes\n\t\t\t\t\t\tit accessible to unauthorized parties. An attacker can also cause errors to\n\t\t\t\t\t\toccur by submitting unusual requests to the web application. The response to\n\t\t\t\t\t\tthese errors can reveal detailed system information, deny service, cause\n\t\t\t\t\t\tsecurity mechanisms to fail, and crash the server. An attacker can use error\n\t\t\t\t\t\tmessages that reveal technologies, operating systems, and product versions\n\t\t\t\t\t\tto tune the attack against known vulnerabilities in these technologies. An\n\t\t\t\t\t\tapplication may use diagnostic methods that provide significant\n\t\t\t\t\t\timplementation details such as stack traces as part of its error handling\n\t\t\t\t\t\tmechanism.","The following code prints the path environment variable to the\n\t\t\t\t\t\tstandard error stream:\n","The code contains a class with sensitive data, but the class is\n\t\t\t\t\tcloneable. The data can then be accessed by cloning the\n\t\t\t\t\tclass.\nCloneable classes are effectively open classes, since data cannot be\n\t\t\t\t\t\thidden in them. Classes that do not explicitly deny cloning can be cloned by\n\t\t\t\t\t\tany other class without running the constructor. ","A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.","\n","The code contains a class with sensitive data, but the class\n\t\t\t\t\tdoes not explicitly deny serialization. The data can be accessed by serializing\n\t\t\t\t\tthe class through another class.\nSerializable classes are effectively open classes since data cannot be\n\t\t\t\t\t\thidden in them. Classes that do not explicitly deny serialization can be\n\t\t\t\t\t\tserialized by any other class, which can then in turn use the data stored\n\t\t\t\t\t\tinside it.","an attacker can write out the class to a byte stream, then extract the important data from it.","This code creates a new record for a medical patient:\n","Information sent over a network can be compromised while in\n\t\t\t\t\ttransit. An attacker may be able to read/modify the contents if the data are\n\t\t\t\t\tsent in plaintext or are weakly encrypted.\n","\n","A software system that accepts path input in the form of\n\t\t\t\t\tmultiple leading slash ('//multiple/leading/slash') without appropriate\n\t\t\t\t\tvalidation can lead to ambiguous path resolution and allow an attacker to\n\t\t\t\t\ttraverse the file system to unintended locations or access arbitrary\n\t\t\t\t\tfiles.\n","\n","An object contains a public static field that is not marked\n\t\t\t\t\tfinal, which might allow it to be modified in unexpected\n\t\t\t\t\tways.\nPublic static variables can be read without an accessor and changed\n\t\t\t\t\t\twithout a mutator by any classes in the application.","The object could potentially be tampered with.\nThe object could potentially allow the object to be read.","When a field is declared public but not final, the field can be read and\n\t\t\t\t\t\twritten to by arbitrary Java code.","The following examples use of a public static String variable to\n\t\t\t\t\t\tcontain the name of a property/configuration file for the application. \n","The product mixes trusted and untrusted data in the same data\n\t\t\t\t\tstructure or structured message.\nA trust boundary can be thought of as line drawn through a program. On one\n\t\t\t\t\t\tside of the line, data is untrusted. On the other side of the line, data is\n\t\t\t\t\t\tassumed to be trustworthy. The purpose of validation logic is to allow data\n\t\t\t\t\t\tto safely cross the trust boundary - to move from untrusted to trusted. A\n\t\t\t\t\t\ttrust boundary violation occurs when a program blurs the line between what\n\t\t\t\t\t\tis trusted and what is untrusted. By combining trusted and untrusted data in\n\t\t\t\t\t\tthe same data structure, it becomes easier for programmers to mistakenly\n\t\t\t\t\t\ttrust unvalidated data.","The following code accepts an HTTP request and stores the username\n\t\t\t\t\t\tparameter in the HTTP session object before checking to ensure that the user\n\t\t\t\t\t\thas been authenticated.\n","The application deserializes untrusted data without\n\t\t\t\t\tsufficiently verifying that the resulting data will be\n\t\t\t\t\tvalid.\nIt is often convenient to serialize objects for communication or to save\n\t\t\t\t\t\tthem for later use. However, deserialized data or code can often be modified\n\t\t\t\t\t\twithout using the provided accessor functions if it does not use\n\t\t\t\t\t\tcryptography to protect itself. Furthermore, any cryptography would still be\n\t\t\t\t\t\tclient-side security -- which is a dangerous security assumption.","The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used.\nAttackers can modify unexpected objects or data that was assumed to be safe from modification.\nIf a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.\nCode could potentially make the assumption that information in the deserialized object is valid. Functions that make this dangerous assumption could be exploited.","Serialization and deserialization refer to the process of taking\n\t\t\t\t\t\tprogram-internal object-related data, packaging it in a way that allows the\n\t\t\t\t\t\tdata to be externally stored or transferred (\"serialization\"), then\n\t\t\t\t\t\textracting the serialized data to reconstruct the original object\n\t\t\t\t\t\t(\"deserialization\").","The relationships between CWE-502 and CWE-915 need further exploration.\n\t\t\t\t\t\tCWE-915 is more narrowly scoped to object modification, and is not\n\t\t\t\t\t\tnecessarily used for deserialization.","This code snippet deserializes an object from a file and uses it as\n\t\t\t\t\t\ta UI button:\n","The application contains code that appears to be malicious in\n\t\t\t\t\tnature.\n Malicious flaws have acquired colorful names, including Trojan horse,\n\t\t\t\t\t\ttrapdoor, timebomb, and logic-bomb. A developer might insert malicious code\n\t\t\t\t\t\twith the intent to subvert the security of an application or its host system\n\t\t\t\t\t\tat some time in the future. It generally refers to a program that performs a\n\t\t\t\t\t\tuseful service but exploits rights of the program's user in a way the user\n\t\t\t\t\t\tdoes not intend. ","In the example below, a malicous developer has injected code to send\n\t\t\t\t\t\tcredit card numbers to his email address.\n","The software appears to contain benign or useful functionality,\n\t\t\t\t\tbut it also contains code that is hidden from normal operation that violates the\n\t\t\t\t\tintended security policy of the user or the system\n\t\t\t\t\tadministrator.\n","\n","Non-replicating malicious code only resides on the target\n\t\t\t\t\tsystem or software that is attacked; it does not attempt to spread to other\n\t\t\t\t\tsystems.\n","\n","Replicating malicious code, including viruses and worms, will\n\t\t\t\t\tattempt to attack other systems once it has successfully compromised the target\n\t\t\t\t\tsystem or software.\n","\n","A software system that accepts path input in the form of\n\t\t\t\t\tmultiple internal slash ('/multiple//internal/slash/') without appropriate\n\t\t\t\t\tvalidation can lead to ambiguous path resolution and allow an attacker to\n\t\t\t\t\ttraverse the file system to unintended locations or access arbitrary\n\t\t\t\t\tfiles.\n","\n","A trapdoor is a hidden piece of code that responds to a special\n\t\t\t\t\tinput, allowing its user access to resources without passing through the normal\n\t\t\t\t\tsecurity enforcement mechanism.\n","\n","The software contains code that is designed to disrupt the\n\t\t\t\t\tlegitimate operation of the software (or its environment) when a certain time\n\t\t\t\t\tpasses, or when a certain logical condition is met.\nWhen the time bomb or logic bomb is detonated, it may perform a denial of\n\t\t\t\t\t\tservice such as crashing the system, deleting critical data, or degrading\n\t\t\t\t\t\tsystem response time. This bomb might be placed within either a replicating\n\t\t\t\t\t\tor non-replicating Trojan horse.","Typical examples of triggers include system date or time mechanisms,\n\t\t\t\t\t\trandom number generators, and counters that wait for an opportunity to\n\t\t\t\t\t\tlaunch their payload. When triggered, a time-bomb may deny service by\n\t\t\t\t\t\tcrashing the system, deleting files, or degrading system\n\t\t\t\t\t\tresponse-time.\n","The software collects personally identifiable information about\n\t\t\t\t\ta human user or the user's activities, but the software accesses this\n\t\t\t\t\tinformation using other resources besides itself, and it does not require that\n\t\t\t\t\tuser's explicit approval or direct input into the\n\t\t\t\t\tsoftware.\n\"Spyware\" is a commonly used term with many definitions and\n\t\t\t\t\t\tinterpretations. In general, it is meant to software that collects\n\t\t\t\t\t\tinformation or installs functionality that human users might not allow if\n\t\t\t\t\t\tthey were fully aware of the actions being taken by the software. For\n\t\t\t\t\t\texample, a user might expect that tax software would collect a social\n\t\t\t\t\t\tsecurity number and include it when filing a tax return, but that same user\n\t\t\t\t\t\twould not expect gaming software to obtain the social security number from\n\t\t\t\t\t\tthat tax software's data.","\n","A covert channel is a path that can be used to transfer\n\t\t\t\t\tinformation in a way not intended by the system's\n\t\t\t\t\tdesigners.\nTypically the system has not given authorization for the transmission and\n\t\t\t\t\t\thas no knowledge of its occurrence.","\n","A covert storage channel transfers information through the\n\t\t\t\t\tsetting of bits by one program and the reading of those bits by another. What\n\t\t\t\t\tdistinguishes this case from that of ordinary operation is that the bits are\n\t\t\t\t\tused to convey encoded information.\nCovert storage channels occur when out-of-band data is stored in messages\n\t\t\t\t\t\tfor the purpose of memory reuse. Covert channels are frequently classified\n\t\t\t\t\t\tas either storage or timing channels. Examples would include using a file\n\t\t\t\t\t\tintended to hold only audit information to convey user passwords--using the\n\t\t\t\t\t\tname of a file or perhaps status bits associated with it that can be read by\n\t\t\t\t\t\tall users to signal the contents of the file. Steganography, concealing\n\t\t\t\t\t\tinformation in such a manner that no one but the intended recipient knows of\n\t\t\t\t\t\tthe existence of the message, is a good example of a covert storage\n\t\t\t\t\t\tchannel.","Covert storage channels may provide attackers with important information about the system in question.\nIf these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks. ","An excellent example of covert storage channels in a well known\n\t\t\t\t\t\tapplication is the ICMP error message echoing functionality. Due to\n\t\t\t\t\t\tambiguities in the ICMP RFC, many IP implementations use the memory within\n\t\t\t\t\t\tthe packet for storage or calculation. For this reason, certain fields of\n\t\t\t\t\t\tcertain packets -- such as ICMP error packets which echo back parts of\n\t\t\t\t\t\treceived messages -- may contain flaws or extra information which betrays\n\t\t\t\t\t\tinformation about the identity of the target operating system. This\n\t\t\t\t\t\tinformation is then used to build up evidence to decide the environment of\n\t\t\t\t\t\tthe target. This is the first crucial step in determining if a given system\n\t\t\t\t\t\tis vulnerable to a particular flaw and what changes must be made to\n\t\t\t\t\t\tmalicious code to mount a successful attack.\n","This weakness can be found at CWE-385.\n","\n","A software system that accepts path input in the form of\n\t\t\t\t\tmultiple trailing slash ('/multiple/trailing/slash//') without appropriate\n\t\t\t\t\tvalidation can lead to ambiguous path resolution and allow an attacker to\n\t\t\t\t\ttraverse the file system to unintended locations or access arbitrary\n\t\t\t\t\tfiles.\n","\n","Allowing a .NET application to run at potentially escalated\n\t\t\t\t\tlevels of access to the underlying operating and file systems can be dangerous\n\t\t\t\t\tand result in various forms of attacks.\n.NET server applications can optionally execute using the identity of the\n\t\t\t\t\t\tuser authenticated to the client. The intention of this functionality is to\n\t\t\t\t\t\tbypass authentication and access control checks within the .NET application\n\t\t\t\t\t\tcode. Authentication is done by the underlying web server (Microsoft\n\t\t\t\t\t\tInternet Information Service IIS), which passes the authenticated token, or\n\t\t\t\t\t\tunauthenticated anonymous token, to the .NET application. Using the token to\n\t\t\t\t\t\timpersonate the client, the application then relies on the settings within\n\t\t\t\t\t\tthe NTFS directories and files to control access. Impersonation enables the\n\t\t\t\t\t\tapplication, on the server running the .NET application, to both execute\n\t\t\t\t\t\tcode and access resources in the context of the authenticated and authorized\n\t\t\t\t\t\tuser.","\n","The product does not require that users should have strong\n\t\t\t\t\tpasswords, which makes it easier for attackers to compromise user\n\t\t\t\t\taccounts.\nAn authentication mechanism is only as strong as its credentials. For this\n\t\t\t\t\t\treason, it is important to require users to have strong passwords. Lack of\n\t\t\t\t\t\tpassword complexity significantly reduces the search space when trying to\n\t\t\t\t\t\tguess user's passwords, making brute-force attacks easier.","An attacker could easily guess user passwords and gain access user accounts.","\n","This weakness occurs when the application transmits or stores\n\t\t\t\t\tauthentication credentials and uses an insecure method that is susceptible to\n\t\t\t\t\tunauthorized interception and/or retrieval.\n","An attacker could gain access to user accounts and access sensitive data used by the user accounts.","This code changes a user's password.\n","Login pages not using adequate measures to protect the user\n\t\t\t\t\tname and password while they are in transit from the client to the\n\t\t\t\t\tserver.\n","SSL (Secure Socket Layer) provides data confidentiality and integrity to\n\t\t\t\t\t\tHTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping\n\t\t\t\t\t\tor altering message contents.","\n","The application uses a cache to maintain a pool of objects,\n\t\t\t\t\tthreads, connections, pages, or passwords to minimize the time it takes to\n\t\t\t\t\taccess them or the resources to which they connect. If implemented improperly,\n\t\t\t\t\tthese caches can allow access to unauthorized information or cause a denial of\n\t\t\t\t\tservice vulnerability.\n","\n","For each web page, the application should have an appropriate\n\t\t\t\t\tcaching policy specifying the extent to which the page and its form fields\n\t\t\t\t\tshould be cached.\n","Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.","\n","Environmental variables may contain sensitive information about\n\t\t\t\t\ta remote server.\n","\n","The product stores a CVS repository in a directory or other\n\t\t\t\t\tcontainer that is accessible to actors outside of the intended control\n\t\t\t\t\tsphere.\nInformation contained within a CVS subdirectory on a web server or other\n\t\t\t\t\t\tserver could be recovered by an attacker and used for malicious purposes.\n\t\t\t\t\t\tThis information may include usernames, filenames, path root, and IP\n\t\t\t\t\t\taddresses.","\n","The product generates a core dump file in a directory that is\n\t\t\t\t\taccessible to actors outside of the intended control\n\t\t\t\t\tsphere.\n","\n","The product stores access control list files in a directory or\n\t\t\t\t\tother container that is accessible to actors outside of the intended control\n\t\t\t\t\tsphere.\nExposure of these access control list files may give the attacker\n\t\t\t\t\t\tinformation about the configuration of the site or system. This information\n\t\t\t\t\t\tmay then be used to bypass the intended security policy or identify trusted\n\t\t\t\t\t\tsystems from which an attack can be launched.","\n","A software system that accepts path input in the form of\n\t\t\t\t\tmultiple internal backslash ('\\multiple\\trailing\\\\slash') without appropriate\n\t\t\t\t\tvalidation can lead to ambiguous path resolution and allow an attacker to\n\t\t\t\t\ttraverse the file system to unintended locations or access arbitrary\n\t\t\t\t\tfiles.\n","\n","A backup file is stored in a directory that is accessible to\n\t\t\t\t\tactors outside of the intended control sphere.\nOften, old files are renamed with an extension such as .~bk to distinguish\n\t\t\t\t\t\tthem from production files. The source code for old files that have been\n\t\t\t\t\t\trenamed in this manner and left in the webroot can often be retrieved. This\n\t\t\t\t\t\trenaming may have been performed automatically by the web server, or\n\t\t\t\t\t\tmanually by the administrator.","At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.","\n","Accessible test applications can pose a variety of security\n\t\t\t\t\trisks. Since developers or administrators rarely consider that someone besides\n\t\t\t\t\tthemselves would even know about the existence of these applications, it is\n\t\t\t\t\tcommon for them to contain sensitive information or\n\t\t\t\t\tfunctions.\n","Examples of common issues with test applications include\n\t\t\t\t\t\tadministrative functions, listings of usernames, passwords or session\n\t\t\t\t\t\tidentifiers and information about the system, server or application\n\t\t\t\t\t\tconfiguration.\n","Information written to log files can be of a sensitive nature\n\t\t\t\t\tand give valuable guidance to an attacker or expose sensitive user\n\t\t\t\t\tinformation.\nWhile logging all information may be helpful during development stages, it\n\t\t\t\t\t\tis important that logging levels be set appropriately before a product ships\n\t\t\t\t\t\tso that sensitive user data and system information are not accidentally\n\t\t\t\t\t\texposed to potential attackers.","Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.","In the following code snippet, a user's full name and credit card\n\t\t\t\t\t\tnumber are written to a log file.\n","A server.log file was found. This can give information on\n\t\t\t\t\twhatever application left the file. Usually this can give full path names and\n\t\t\t\t\tsystem information, and sometimes usernames and passwords.\n","\n","The application does not sufficiently restrict access to a log\n\t\t\t\t\tfile that is used for debugging.\n","\n","A command shell error message indicates that there exists an\n\t\t\t\t\tunhandled exception in the web application code. In many cases, an attacker can\n\t\t\t\t\tleverage the conditions that cause these errors in order to gain unauthorized\n\t\t\t\t\taccess to the system.\n","\n","A servlet error message indicates that there exists an\n\t\t\t\t\tunhandled exception in your web application code and may provide useful\n\t\t\t\t\tinformation to an attacker.\n","The error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system.","The following servlet code does not catch runtime exceptions,\n\t\t\t\t\t\tmeaning that if such an exception were to occur, the container may display\n\t\t\t\t\t\tpotentially dangerous information (such as a full stack trace).\n","In many cases, an attacker can leverage the conditions that\n\t\t\t\t\tcause unhandled exception errors in order to gain unauthorized access to the\n\t\t\t\t\tsystem.\n","In the following Java example the class InputFileRead enables an\n\t\t\t\t\t\tinput file to be read using a FileReader object. In the constructor of this\n\t\t\t\t\t\tclass a default input file path is set to some directory on the local file\n\t\t\t\t\t\tsystem and the method setInputFile must be called to set the name of the\n\t\t\t\t\t\tinput file to be read in the default directory. The method readInputFile\n\t\t\t\t\t\twill create the FileReader object and will read the contents of the file. If\n\t\t\t\t\t\tthe method setInputFile is not called prior to calling the method\n\t\t\t\t\t\treadInputFile then the File object will remain null when initializing the\n\t\t\t\t\t\tFileReader object. A Java RuntimeException will be raised, and an error\n\t\t\t\t\t\tmessage will be output to the user.\n","The product stores sensitive information in files or\n\t\t\t\t\tdirectories that are accessible to actors outside of the intended control\n\t\t\t\t\tsphere.\n","Depending on usage, this could be a weakness or a category. Further study\n\t\t\t\t\t\tof all its children is needed, and the entire sub-tree may need to be\n\t\t\t\t\t\tclarified. The current organization is based primarily on the exposure of\n\t\t\t\t\t\tsensitive information as a consequence, instead of as a primary\n\t\t\t\t\t\tweakness.","\n","Persistent cookies are cookies that are stored on the browser's\n\t\t\t\t\thard drive. This can cause security and privacy issues depending on the\n\t\t\t\t\tinformation stored in the cookie and how it is accessed.\nCookies are small bits of data that are sent by the web application but\n\t\t\t\t\t\tstored locally in the browser. This lets the application use the cookie to\n\t\t\t\t\t\tpass information between pages and store variable information. The web\n\t\t\t\t\t\tapplication controls what information is stored in a cookie and how it is\n\t\t\t\t\t\tused. Typical types of information stored in cookies are session\n\t\t\t\t\t\tIdentifiers, personalization and customization information, and in rare\n\t\t\t\t\t\tcases even usernames to enable automated logins. There are two different\n\t\t\t\t\t\ttypes of cookies: session cookies and persistent cookies. Session cookies\n\t\t\t\t\t\tjust live in the browser's memory, and are not stored anywhere, but\n\t\t\t\t\t\tpersistent cookies are stored on the browser's hard drive.","\n","A software system that accepts path input in the form of\n\t\t\t\t\ttrailing backslash ('filedir\\') without appropriate validation can lead to\n\t\t\t\t\tambiguous path resolution and allow an attacker to traverse the file system to\n\t\t\t\t\tunintended locations or access arbitrary files.\n","\n","Source code on a web server often contains sensitive\n\t\t\t\t\tinformation and should generally not be accessible to\n\t\t\t\t\tusers.\nThere are situations where it is critical to remove source code from an\n\t\t\t\t\t\tarea or server. For example, obtaining Perl source code on a system allows\n\t\t\t\t\t\tan attacker to understand the logic of the script and extract extremely\n\t\t\t\t\t\tuseful information such as code bugs or logins and passwords.","\n","If an include file source is accessible, the file can contain\n\t\t\t\t\tusernames and passwords, as well as sensitive information pertaining to the\n\t\t\t\t\tapplication and system.\n","The following code uses an include file to store database\n\t\t\t\t\t\tcredentials:\n","The application does not properly protect or delete a log file\n\t\t\t\t\trelated to cleanup.\n","\n","The software uses the singleton pattern when creating a\n\t\t\t\t\tresource within a multithreaded environment.\nThe use of a singleton pattern may not be thread-safe.","This method is part of a singleton pattern, yet the following\n\t\t\t\t\t\tsingleton() pattern is not thread-safe. It is possible that the method will\n\t\t\t\t\t\tcreate two objects instead of only one.\n","The software does not use a standardized method for handling\n\t\t\t\t\terrors throughout the code, which might introduce inconsistent error handling\n\t\t\t\t\tand resultant weaknesses.\nIf the application handles error messages individually, on a one-by-one\n\t\t\t\t\t\tbasis, this is likely to result in inconsistent error handling. The causes\n\t\t\t\t\t\tof errors may be lost. Also, detailed information about the causes of an\n\t\t\t\t\t\terror may be unintentionally returned to the user.","\n","Dynamically loaded code has the potential to be\n\t\t\t\t\tmalicious.\n","An attacker could execute malicious code that they have included in the loaded class. The malicious code can be executed without calling a specific method if the malicious code is hidden within the static class initializer.","The code below dynamically loads a class using the Java Reflection\n\t\t\t\t\t\tAPI.\n","The code contains comments that suggest the presence of bugs,\n\t\t\t\t\tincomplete functionality, or weaknesses.\nMany suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO,\n\t\t\t\t\t\tin the code indicate missing security functionality and checking. Others\n\t\t\t\t\t\tindicate code problems that programmers should fix, such as hard-coded\n\t\t\t\t\t\tvariables, error handling, not using stored procedures, and performance\n\t\t\t\t\t\tissues.","Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.","The following excerpt demonstrates the use of a suspicious comment\n\t\t\t\t\t\tin an incomplete code block that may have security\n\t\t\t\t\t\trepercussions.\n","The program uses hard-coded constants instead of symbolic names\n\t\t\t\t\tfor security-critical values, which increases the likelihood of mistakes during\n\t\t\t\t\tcode maintenance or security policy change.\nIf the developer does not find all occurrences of the hard-coded\n\t\t\t\t\t\tconstants, an incorrect policy decision may be made if one of the constants\n\t\t\t\t\t\tis not changed. Making changes to these values will require code changes\n\t\t\t\t\t\tthat may be difficult or impossible once the system is released to the\n\t\t\t\t\t\tfield. In addition, these hard-coded values may become available to\n\t\t\t\t\t\tattackers if the code is ever disclosed.","The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.","The usage of symbolic names instead of hard-coded constants is\n\t\t\t\t\t\tpreferred.\n","A directory listing is inappropriately exposed, yielding\n\t\t\t\t\tpotentially sensitive information to attackers.\nA directory listing provides an attacker with the complete index of all\n\t\t\t\t\t\tthe resources located inside of the directory. The specific risks and\n\t\t\t\t\t\tconsequences vary depending on which files are listed and accessible.\n\t\t\t\t\t","Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.","\n","The software does not mask passwords during entry, increasing\n\t\t\t\t\tthe potential for attackers to observe and capture\n\t\t\t\t\tpasswords.\n","\n","A software system that accepts path input in the form of single\n\t\t\t\t\tdot directory exploit ('/./') without appropriate validation can lead to\n\t\t\t\t\tambiguous path resolution and allow an attacker to traverse the file system to\n\t\t\t\t\tunintended locations or access arbitrary files.\n","\n","Certain conditions, such as network failure, will cause a\n\t\t\t\t\tserver error message to be displayed.\nWhile error messages in and of themselves are not dangerous, per se, it is\n\t\t\t\t\t\twhat an attacker can glean from them that might cause eventual\n\t\t\t\t\t\tproblems.","\n","If a web server does not fully parse requested URLs before it\n\t\t\t\t\texamines them for authorization, it may be possible for an attacker to bypass\n\t\t\t\t\tauthorization protection.\nFor instance, the character strings /./ and / both mean current directory.\n\t\t\t\t\t\tIf /SomeDirectory is a protected directory and an attacker requests\n\t\t\t\t\t\t/./SomeDirectory, the attacker may be able to gain access to the resource if\n\t\t\t\t\t\t/./ is not converted to / before the authorization check is\n\t\t\t\t\t\tperformed.","\n","Files or directories are accessible in the environment that\n\t\t\t\t\tshould not be.\n","\n","A possible shell file exists in /cgi-bin/ or other accessible\n\t\t\t\t\tdirectories. This is extremely dangerous and can be used by an attacker to\n\t\t\t\t\texecute commands on the web server.\n","\n","The ASP.NET application does not use an input validation\n\t\t\t\t\tframework.\n","Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.","\n","The J2EE application stores a plaintext password in a\n\t\t\t\t\tconfiguration file.\nStoring a plaintext password in a configuration file allows anyone who can\n\t\t\t\t\t\tread the file to access the password-protected resource, making it an easy\n\t\t\t\t\t\ttarget for attackers.","Below is a snippet from a Java properties file in which the LDAP\n\t\t\t\t\t\tserver password is stored in plaintext.\n","Configuring an ASP.NET application to run with impersonated\n\t\t\t\t\tcredentials may give the application unnecessary\n\t\t\t\t\tprivileges.\nThe use of impersonated credentials allows an ASP.NET application to run\n\t\t\t\t\t\twith either the privileges of the client on whose behalf it is executing or\n\t\t\t\t\t\twith arbitrary privileges granted in its configuration.","\n","The application uses the getlogin() function in a multithreaded\n\t\t\t\t\tcontext, potentially causing it to return incorrect\n\t\t\t\t\tvalues.\nThe getlogin() function returns a pointer to a string that contains the\n\t\t\t\t\t\tname of the user associated with the calling process. The function is not\n\t\t\t\t\t\treentrant, meaning that if it is called from another process, the contents\n\t\t\t\t\t\tare not locked out and the value of the string can be changed by another\n\t\t\t\t\t\tprocess. This makes it very risky to use because the username can be changed\n\t\t\t\t\t\tby other processes, so the results of the function cannot be trusted.\n\t\t\t\t\t","The following code relies on getlogin() to determine whether or not\n\t\t\t\t\t\ta user is trusted. It is easily subverted.\n","A software system that accepts path input in the form of\n\t\t\t\t\tasterisk wildcard ('filedir*') without appropriate validation can lead to\n\t\t\t\t\tambiguous path resolution and allow an attacker to traverse the file system to\n\t\t\t\t\tunintended locations or access arbitrary files.\n","\n","The product calls umask() with an incorrect argument that is\n\t\t\t\t\tspecified as if it is an argument to chmod().\n","\n","The software contains dead code, which can never be\n\t\t\t\t\texecuted.\nDead code is source code that can never be executed in a running program.\n\t\t\t\t\t\tThe surrounding code makes it impossible for a section of code to ever be\n\t\t\t\t\t\texecuted.","Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.","The condition for the second if statement is impossible to satisfy.\n\t\t\t\t\t\tIt requires that the variables be non-null, while on the only path where s\n\t\t\t\t\t\tcan be assigned a non-null value there is a return statement.\n","A function returns the address of a stack variable, which will\n\t\t\t\t\tcause unintended program behavior, typically in the form of a\n\t\t\t\t\tcrash.\nBecause local variables are allocated on the stack, when a program returns\n\t\t\t\t\t\ta pointer to a local variable, it is returning a stack address. A subsequent\n\t\t\t\t\t\tfunction call is likely to re-use this same stack address, thereby\n\t\t\t\t\t\toverwriting the value of the pointer, which no longer corresponds to the\n\t\t\t\t\t\tsame variable since a function's stack frame is invalidated when it returns.\n\t\t\t\t\t\tAt best this will cause the value of the pointer to change unexpectedly. In\n\t\t\t\t\t\tmany cases it causes the program to crash the next time the pointer is\n\t\t\t\t\t\tdereferenced.","The following function returns a stack address.\n","The variable's value is assigned but never used, making it a\n\t\t\t\t\tdead store.\nAfter the assignment, the variable is either assigned another value or\n\t\t\t\t\t\tgoes out of scope. It is likely that the variable is simply vestigial, but\n\t\t\t\t\t\tit is also possible that the unused variable points out a bug.","This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.","The following code excerpt assigns to the variable r and then\n\t\t\t\t\t\toverwrites the value without using it.\n","Using Hibernate to execute a dynamic SQL statement built with\n\t\t\t\t\tuser-controlled input can allow an attacker to modify the statement's meaning or\n\t\t\t\t\tto execute arbitrary SQL commands.\n","The following code excerpt uses Hibernate's HQL syntax to build a\n\t\t\t\t\t\tdynamic query that's vulnerable to SQL injection.\n","The application relies on the existence or values of cookies\n\t\t\t\t\twhen performing security-critical operations, but it does not properly ensure\n\t\t\t\t\tthat the setting is valid for the associated user.\nAttackers can easily modify cookies, within the browser or by implementing\n\t\t\t\t\t\tthe client-side code outside of the browser. Reliance on cookies without\n\t\t\t\t\t\tdetailed validation and integrity checking can allow attackers to bypass\n\t\t\t\t\t\tauthentication, conduct injection attacks such as SQL injection and\n\t\t\t\t\t\tcross-site scripting, or otherwise modify inputs in unexpected ways.","It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.","The following code excerpt reads a value from a browser cookie to\n\t\t\t\t\t\tdetermine the role of the user.\n","The software uses a database table that includes records that\n\t\t\t\t\tshould not be accessible to an actor, but it executes a SQL statement with a\n\t\t\t\t\tprimary key that can be controlled by that actor.\nWhen a user can set a primary key to any value, then the user can modify\n\t\t\t\t\t\tthe key to point to unauthorized records.","The following code uses a parameterized statement, which escapes\n\t\t\t\t\t\tmetacharacters and prevents SQL injection vulnerabilities, to construct and\n\t\t\t\t\t\texecute a SQL query that searches for an invoice matching the specified\n\t\t\t\t\t\tidentifier [1]. The identifier is selected from a list of all invoices\n\t\t\t\t\t\tassociated with the current authenticated user.\n","The product does not properly synchronize shared data, such as\n\t\t\t\t\tstatic variables across threads, which can lead to undefined behavior and\n\t\t\t\t\tunpredictable data changes.\nWithin servlets, shared static variables are not protected from concurrent\n\t\t\t\t\t\taccess, but servlets are multithreaded. This is a typical programming\n\t\t\t\t\t\tmistake in J2EE applications, since the multithreading is handled by the\n\t\t\t\t\t\tframework. When a shared variable can be influenced by an attacker, one\n\t\t\t\t\t\tthread could wind up modifying the variable to contain data that is not\n\t\t\t\t\t\tvalid for a different thread that is also using the data within the\n\t\t\t\t\t\tvariable. ","If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly."," The following code implements a basic counter for how many times\n\t\t\t\t\t\tthe page has been accesed. \n","The software contains a finalize() method that does not call\n\t\t\t\t\tsuper.finalize().\nThe Java Language Specification states that it is a good practice for a\n\t\t\t\t\t\tfinalize() method to call super.finalize().","The following method omits the call to\n\t\t\t\t\t\tsuper.finalize().\n","The software contains protection mechanisms to restrict access\n\t\t\t\t\tto 'realdir/filename', but it constructs pathnames using external input in the\n\t\t\t\t\tform of 'fakedir/../realdir/filename' that are not handled by those mechanisms.\n\t\t\t\t\tThis allows attackers to perform unauthorized actions against the targeted\n\t\t\t\t\tfile.\n","\n","The software contains an expression that will always evaluate\n\t\t\t\t\tto false.\n","In the following Java example the updateUserAccountOrder() method\n\t\t\t\t\t\tused within an e-business product ordering/inventory application will\n\t\t\t\t\t\tvalidate the product number that was ordered and the user account number. If\n\t\t\t\t\t\tthey are valid, the method will update the product inventory, the user\n\t\t\t\t\t\taccount, and the user order appropriately. \n","The software contains an expression that will always evaluate\n\t\t\t\t\tto true.\n","In the following Java example the updateInventory() method used\n\t\t\t\t\t\twithin an e-business product ordering/inventory application will check if\n\t\t\t\t\t\tthe input product number is in the store or in the warehouse. If the product\n\t\t\t\t\t\tis found, the method will update the store or warehouse database as well as\n\t\t\t\t\t\tthe aggregate product database. If the product is not found, the method\n\t\t\t\t\t\tintends to do some special processing without updating any database. \n","The program calls a thread's run() method instead of calling\n\t\t\t\t\tstart(), which causes the code to run in the thread of the caller instead of the\n\t\t\t\t\tcallee.\nIn most cases a direct call to a Thread object's run() method is a bug.\n\t\t\t\t\t\tThe programmer intended to begin a new thread of control, but accidentally\n\t\t\t\t\t\tcalled run() instead of start(), so the run() method will execute in the\n\t\t\t\t\t\tcaller's thread of control.","The following excerpt from a Java program mistakenly calls run()\n\t\t\t\t\t\tinstead of start().\n","The software does not follow or incorrectly follows the\n\t\t\t\t\tspecifications as required by the implementation language, environment,\n\t\t\t\t\tframework, protocol, or platform.\nWhen leveraging external functionality, such as an API, it is important\n\t\t\t\t\t\tthat the caller does so in accordance with the requirements of the external\n\t\t\t\t\t\tfunctionality or else unintended behaviors may result, possibly leaving the\n\t\t\t\t\t\tsystem vulnerable to any number of exploits.","\n","The program violates the Enterprise JavaBeans (EJB)\n\t\t\t\t\tspecification by using thread synchronization primitives.\nThe Enterprise JavaBeans specification requires that every bean provider\n\t\t\t\t\t\tfollow a set of programming guidelines designed to ensure that the bean will\n\t\t\t\t\t\tbe portable and behave consistently in any EJB container. In this case, the\n\t\t\t\t\t\tprogram violates the following EJB guideline: \"An enterprise bean must not\n\t\t\t\t\t\tuse thread synchronization primitives to synchronize execution of multiple\n\t\t\t\t\t\tinstances.\" The specification justifies this requirement in the following\n\t\t\t\t\t\tway: \"This rule is required to ensure consistent runtime semantics because\n\t\t\t\t\t\twhile some EJB containers may use a single JVM to execute all enterprise\n\t\t\t\t\t\tbean's instances, others may distribute the instances across multiple\n\t\t\t\t\t\tJVMs.\"","In the following Java example a Customer Entity EJB provides access\n\t\t\t\t\t\tto customer information in a database for a business application. \n","The program violates the Enterprise JavaBeans (EJB)\n\t\t\t\t\tspecification by using AWT/Swing.\nThe Enterprise JavaBeans specification requires that every bean provider\n\t\t\t\t\t\tfollow a set of programming guidelines designed to ensure that the bean will\n\t\t\t\t\t\tbe portable and behave consistently in any EJB container. In this case, the\n\t\t\t\t\t\tprogram violates the following EJB guideline: \"An enterprise bean must not\n\t\t\t\t\t\tuse the AWT functionality to attempt to output information to a display, or\n\t\t\t\t\t\tto input information from a keyboard.\" The specification justifies this\n\t\t\t\t\t\trequirement in the following way: \"Most servers do not allow direct\n\t\t\t\t\t\tinteraction between an application program and a keyboard/display attached\n\t\t\t\t\t\tto the server system.\"","The following Java example is a simple converter class for\n\t\t\t\t\t\tconverting US dollars to Yen. This converter class demonstrates the improper\n\t\t\t\t\t\tpractice of using a stateless session Enterprise JavaBean that implements an\n\t\t\t\t\t\tAWT Component and AWT keyboard event listener to retrieve keyboard input\n\t\t\t\t\t\tfrom the user for the amount of the US dollars to convert to\n\t\t\t\t\t\tYen.\n","The program violates the Enterprise JavaBeans (EJB)\n\t\t\t\t\tspecification by using the java.io package.\nThe Enterprise JavaBeans specification requires that every bean provider\n\t\t\t\t\t\tfollow a set of programming guidelines designed to ensure that the bean will\n\t\t\t\t\t\tbe portable and behave consistently in any EJB container. In this case, the\n\t\t\t\t\t\tprogram violates the following EJB guideline: \"An enterprise bean must not\n\t\t\t\t\t\tuse the java.io package to attempt to access files and directories in the\n\t\t\t\t\t\tfile system.\" The specification justifies this requirement in the following\n\t\t\t\t\t\tway: \"The file system APIs are not well-suited for business components to\n\t\t\t\t\t\taccess data. Business components should use a resource manager API, such as\n\t\t\t\t\t\tJDBC, to store data.\""," The following Java example is a simple stateless Enterprise\n\t\t\t\t\t\tJavaBean that retrieves the interest rate for the number of points for a\n\t\t\t\t\t\tmortgage. In this example, the interest rates for various points are\n\t\t\t\t\t\tretrieved from an XML document on the local file system, and the EJB uses\n\t\t\t\t\t\tthe Java I/O API to retrieve the XML document from the local file system. \n","The program violates the Enterprise JavaBeans (EJB)\n\t\t\t\t\tspecification by using sockets.\nThe Enterprise JavaBeans specification requires that every bean provider\n\t\t\t\t\t\tfollow a set of programming guidelines designed to ensure that the bean will\n\t\t\t\t\t\tbe portable and behave consistently in any EJB container. In this case, the\n\t\t\t\t\t\tprogram violates the following EJB guideline: \"An enterprise bean must not\n\t\t\t\t\t\tattempt to listen on a socket, accept connections on a socket, or use a\n\t\t\t\t\t\tsocket for multicast.\" The specification justifies this requirement in the\n\t\t\t\t\t\tfollowing way: \"The EJB architecture allows an enterprise bean instance to\n\t\t\t\t\t\tbe a network socket client, but it does not allow it to be a network server.\n\t\t\t\t\t\tAllowing the instance to become a network server would conflict with the\n\t\t\t\t\t\tbasic function of the enterprise bean-- to serve the EJB clients.\"","The following Java example is a simple stateless Enterprise JavaBean\n\t\t\t\t\t\tthat retrieves stock symbols and stock values. The Enterprise JavaBean\n\t\t\t\t\t\tcreates a socket and listens for and accepts connections from clients on the\n\t\t\t\t\t\tsocket. \n","The program violates the Enterprise JavaBeans (EJB)\n\t\t\t\t\tspecification by using the class loader.\nThe Enterprise JavaBeans specification requires that every bean provider\n\t\t\t\t\t\tfollow a set of programming guidelines designed to ensure that the bean will\n\t\t\t\t\t\tbe portable and behave consistently in any EJB container. In this case, the\n\t\t\t\t\t\tprogram violates the following EJB guideline: \"The enterprise bean must not\n\t\t\t\t\t\tattempt to create a class loader; obtain the current class loader; set the\n\t\t\t\t\t\tcontext class loader; set security manager; create a new security manager;\n\t\t\t\t\t\tstop the JVM; or change the input, output, and error streams.\" The\n\t\t\t\t\t\tspecification justifies this requirement in the following way: \"These\n\t\t\t\t\t\tfunctions are reserved for the EJB container. Allowing the enterprise bean\n\t\t\t\t\t\tto use these functions could compromise security and decrease the\n\t\t\t\t\t\tcontainer's ability to properly manage the runtime environment.\"","The following Java example is a simple stateless Enterprise JavaBean\n\t\t\t\t\t\tthat retrieves the interest rate for the number of points for a mortgage.\n\t\t\t\t\t\tThe interest rates for various points are retrieved from an XML document on\n\t\t\t\t\t\tthe local file system, and the EJB uses the Class Loader for the EJB class\n\t\t\t\t\t\tto obtain the XML document from the local file system as an input\n\t\t\t\t\t\tstream.\n","The application stores a non-serializable object as an\n\t\t\t\t\tHttpSession attribute, which can hurt reliability.\nA J2EE application can make use of multiple JVMs in order to improve\n\t\t\t\t\t\tapplication reliability and performance. In order to make the multiple JVMs\n\t\t\t\t\t\tappear as a single application to the end user, the J2EE container can\n\t\t\t\t\t\treplicate an HttpSession object across multiple JVMs so that if one JVM\n\t\t\t\t\t\tbecomes unavailable another can step in and take its place without\n\t\t\t\t\t\tdisrupting the flow of the application. This is only possible if all session\n\t\t\t\t\t\tdata is serializable, allowing the session to be duplicated between the\n\t\t\t\t\t\tJVMs.","The following class adds itself to the session, but because it is\n\t\t\t\t\t\tnot serializable, the session can no longer be replicated.\n","The software contains a protection mechanism that restricts\n\t\t\t\t\taccess to a long filename on a Windows operating system, but the software does\n\t\t\t\t\tnot properly restrict access to the equivalent short \"8.3\"\n\t\t\t\t\tfilename.\nOn later Windows operating systems, a file can have a \"long name\" and a\n\t\t\t\t\t\tshort name that is compatible with older Windows file systems, with up to 8\n\t\t\t\t\t\tcharacters in the filename and 3 characters for the extension. These \"8.3\"\n\t\t\t\t\t\tfilenames, therefore, act as an alternate name for files with long names, so\n\t\t\t\t\t\tthey are useful pathname equivalence manipulations.","\n","The software contains a clone() method that does not call\n\t\t\t\t\tsuper.clone() to obtain the new object.\nAll implementations of clone() should obtain the new object by calling\n\t\t\t\t\t\tsuper.clone(). If a class does not follow this convention, a subclass's\n\t\t\t\t\t\tclone() method will return an object of the wrong type. ","The following two classes demonstrate a bug introduced by not\n\t\t\t\t\t\tcalling super.clone(). Because of the way Kibitzer implements clone(),\n\t\t\t\t\t\tFancyKibitzer's clone method will return an object of type Kibitzer instead\n\t\t\t\t\t\tof FancyKibitzer.\n","The software does not maintain equal hashcodes for equal\n\t\t\t\t\tobjects.\nJava objects are expected to obey a number of invariants related to\n\t\t\t\t\t\tequality. One of these invariants is that equal objects must have equal\n\t\t\t\t\t\thashcodes. In other words, if a.equals(b) == true then a.hashCode() ==\n\t\t\t\t\t\tb.hashCode().","If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.","\n","The program declares an array public, final, and static, which\n\t\t\t\t\tis not sufficient to prevent the array's contents from being\n\t\t\t\t\tmodified.\nBecause arrays are mutable objects, the final constraint requires that the\n\t\t\t\t\t\tarray object itself be assigned only once, but makes no guarantees about the\n\t\t\t\t\t\tvalues of the array elements. Since the array is public, a malicious program\n\t\t\t\t\t\tcan change the values stored in the array. As such, in most cases an array\n\t\t\t\t\t\tdeclared public, final and static is a bug.","Mobile code, in this case a Java Applet, is code that is transmitted\n\t\t\t\t\t\tacross a network and executed on a remote machine. Because mobile code\n\t\t\t\t\t\tdevelopers have little if any control of the environment in which their code\n\t\t\t\t\t\twill execute, special security concerns become relevant. One of the biggest\n\t\t\t\t\t\tenvironmental threats results from the risk that the mobile code will run\n\t\t\t\t\t\tside-by-side with other, potentially malicious, mobile code. Because all of\n\t\t\t\t\t\tthe popular web browsers execute code from multiple sources together in the\n\t\t\t\t\t\tsame JVM, many of the security guidelines for mobile code are focused on\n\t\t\t\t\t\tpreventing manipulation of your objects' state and behavior by adversaries\n\t\t\t\t\t\twho have access to the same virtual machine where your program is\n\t\t\t\t\t\trunning.","The following Java Applet code mistakenly declares an array public,\n\t\t\t\t\t\tfinal and static.\n","The program violates secure coding principles for mobile code\n\t\t\t\t\tby declaring a finalize() method public.\nA program should never call finalize explicitly, except to call\n\t\t\t\t\t\tsuper.finalize() inside an implementation of finalize(). In mobile code\n\t\t\t\t\t\tsituations, the otherwise error prone practice of manual garbage collection\n\t\t\t\t\t\tcan become a security threat if an attacker can maliciously invoke one of\n\t\t\t\t\t\tyour finalize() methods because it is declared with public access.","The following Java Applet code mistakenly declares a public\n\t\t\t\t\t\tfinalize() method.\n","The code has a return statement inside a finally block, which\n\t\t\t\t\twill cause any thrown exception in the try block to be\n\t\t\t\t\tdiscarded.\n","In the following code excerpt, the IllegalArgumentException will\n\t\t\t\t\t\tnever be delivered to the caller. The finally block will cause the exception\n\t\t\t\t\t\tto be discarded.\n","The software contains an empty synchronized\n\t\t\t\t\tblock.\nAn empty synchronized block does not actually accomplish any\n\t\t\t\t\t\tsynchronization and may indicate a troubled section of code. An empty\n\t\t\t\t\t\tsynchronized block can occur because code no longer needed within the\n\t\t\t\t\t\tsynchronized block is commented out without removing the synchronized\n\t\t\t\t\t\tblock.","An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.","The following code attempts to synchronize on an object, but does\n\t\t\t\t\t\tnot execute anything in the synchronized block. This does not actually\n\t\t\t\t\t\taccomplish anything and may be a sign that a programmer is wrestling with\n\t\t\t\t\t\tsynchronization but has not yet achieved the result they\n\t\t\t\t\t\tintend.\n","The software makes an explicit call to the finalize() method\n\t\t\t\t\tfrom outside the finalizer.\nWhile the Java Language Specification allows an object's finalize() method\n\t\t\t\t\t\tto be called from outside the finalizer, doing so is usually a bad idea. For\n\t\t\t\t\t\texample, calling finalize() explicitly means that finalize() will be called\n\t\t\t\t\t\tmore than once: the first time will be the explicit call and the last time\n\t\t\t\t\t\twill be the call that is made after the object is garbage collected.","The following code fragment calls finalize()\n\t\t\t\t\t\texplicitly:\n","The software sets a pointer to a specific address other than\n\t\t\t\t\tNULL or 0.\nUsing a fixed address is not portable because that address will probably\n\t\t\t\t\t\tnot be valid in all environments or platforms. ","If one executes code at a known location, an attacker might be able to inject code there beforehand.\nIf the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.\nThe data at a known pointer location can be easily read or influenced by an attacker.","This code assumes a particular function will always be found at a\n\t\t\t\t\t\tparticular address. It assigns a pointer to that address and calls the\n\t\t\t\t\t\tfunction.\n","Casting a non-structure type to a structure type and accessing\n\t\t\t\t\ta field can lead to memory access errors or data\n\t\t\t\t\tcorruption.\n","Adjacent variables in memory may be corrupted by assignments performed on fields after the cast.\nExecution may end due to a memory access error.","\n","The software uses an API function that does not exist on all\n\t\t\t\t\tversions of the target platform. This could cause portability problems or\n\t\t\t\t\tinconsistencies that allow denial of service or other\n\t\t\t\t\tconsequences.\nSome functions that offer security features supported by the OS are not\n\t\t\t\t\t\tavailable on all versions of the OS in common use. Likewise, functions are\n\t\t\t\t\t\toften deprecated or made obsolete for security reasons and should not be\n\t\t\t\t\t\tused.","\n","The software attempts to access a file based on the filename,\n\t\t\t\t\tbut it does not properly prevent that filename from identifying a link or\n\t\t\t\t\tshortcut that resolves to an unintended resource.\n","An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.\nRemote Execution: Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since an \".LNK\" file can be uploaded like a normal file. ","Soft links are a UNIX term that is synonymous with simple shortcuts on\n\t\t\t\t\t\twindows based platforms.","\n","The application calls free() on a pointer to memory that was\n\t\t\t\t\tnot allocated using associated heap allocation functions such as malloc(),\n\t\t\t\t\tcalloc(), or realloc().\nWhen free() is called on an invalid pointer, the program's memory\n\t\t\t\t\t\tmanagement data structures may become corrupted. This corruption can cause\n\t\t\t\t\t\tthe program to crash or, in some circumstances, an attacker may be able to\n\t\t\t\t\t\tcause free() to operate on controllable memory locations to modify critical\n\t\t\t\t\t\tprogram variables or execute code.","There is the potential for arbitrary code execution with privileges of the vulnerable program via a \"write, what where\" primitive.","In C++, if the new operator was used to allocate the memory, it may be\n\t\t\t\t\t\tallocated with the malloc(), calloc() or realloc() family of functions in\n\t\t\t\t\t\tthe implementation. Someone aware of this behavior might choose to map this\n\t\t\t\t\t\tproblem to CWE-590 or to its parent, CWE-762, depending on their\n\t\t\t\t\t\tperspective.","In this example, an array of record_t structs, bar, is allocated\n\t\t\t\t\t\tautomatically on the stack as a local variable and the programmer attempts\n\t\t\t\t\t\tto call free() on the array. The consequences will vary based on the\n\t\t\t\t\t\timplementation of free(), but it will not succeed in deallocating the\n\t\t\t\t\t\tmemory.\n","The application stores sensitive data in memory that is not\n\t\t\t\t\tlocked, or that has been incorrectly locked, which might cause the memory to be\n\t\t\t\t\twritten to swap files on disk by the virtual memory manager. This can make the\n\t\t\t\t\tdata more accessible to external actors.\nOn Windows systems the VirtualLock function can lock a page of memory to\n\t\t\t\t\t\tensure that it will remain present in memory and not be swapped to disk.\n\t\t\t\t\t\tHowever, on older versions of Windows, such as 95, 98, or Me, the\n\t\t\t\t\t\tVirtualLock() function is only a stub and provides no protection. On POSIX\n\t\t\t\t\t\tsystems the mlock() call ensures that a page will stay resident in memory\n\t\t\t\t\t\tbut does not guarantee that the page will not appear in the swap. Therefore,\n\t\t\t\t\t\tit is unsuitable for use as a protection mechanism for sensitive data. Some\n\t\t\t\t\t\tplatforms, in particular Linux, do make the guarantee that the page will not\n\t\t\t\t\t\tbe swapped, but this is non-standard and is not portable. Calls to mlock()\n\t\t\t\t\t\talso require supervisor privilege. Return values for both of these calls\n\t\t\t\t\t\tmust be checked to ensure that the lock operation was actually successful.\n\t\t\t\t\t","Sensitive data that is written to a swap file may be exposed.","\n","The software does not properly perform authentication, allowing\n\t\t\t\t\tit to be bypassed through various methods.\n","\n","The software modifies the SSL context after connection creation\n\t\t\t\t\thas begun.\nIf the program modifies the SSL_CTX object after creating SSL objects from\n\t\t\t\t\t\tit, there is the possibility that older SSL objects created from the\n\t\t\t\t\t\toriginal context could all be affected by that change.","No authentication takes place in this process, bypassing an assumed protection of encryption.\nThe encrypted communication between a user and a trusted host may be subject to a \"man in the middle\" sniffing attack.","\n","When the J2EE container attempts to write unserializable\n\t\t\t\t\tobjects to disk there is no guarantee that the process will complete\n\t\t\t\t\tsuccessfully.\nIn heavy load conditions, most J2EE application frameworks flush objects\n\t\t\t\t\t\tto disk to manage memory requirements of incoming requests. For example,\n\t\t\t\t\t\tsession scoped objects, and even application scoped objects, are written to\n\t\t\t\t\t\tdisk when required. While these application frameworks do the real work of\n\t\t\t\t\t\twriting objects to disk, they do not enforce that those objects be\n\t\t\t\t\t\tserializable, thus leaving the web application vulnerable to crashes induced\n\t\t\t\t\t\tby serialization failure. An attacker may be able to mount a denial of\n\t\t\t\t\t\tservice attack by sending enough requests to the server to force the web\n\t\t\t\t\t\tapplication to save objects to disk.","Data represented by unserializable objects can be corrupted.\nNon-serializability of objects can lead to system crash.","In the following Java example, a Customer Entity JavaBean provides\n\t\t\t\t\t\taccess to customer information in a database for a business application. The\n\t\t\t\t\t\tCustomer Entity JavaBean is used as a session scoped object to return\n\t\t\t\t\t\tcustomer information to a Session EJB.\n","The program compares object references instead of the contents\n\t\t\t\t\tof the objects themselves, preventing it from detecting equivalent\n\t\t\t\t\tobjects.\n","This weakness can lead to erroneous results that can cause unexpected application behaviors.","In the example below, two Java String objects are declared and\n\t\t\t\t\t\tinitialized with the same string values and an if statement is used to\n\t\t\t\t\t\tdetermine if the strings are equivalent.\n","The software does not correctly compare two objects based on\n\t\t\t\t\ttheir conceptual content.\n","For example, let's say you have two truck objects that you want to\n\t\t\t\t\t\tcompare for equality. Truck objects are defined to be the same if they have\n\t\t\t\t\t\tthe same make, the same model, and were manufactured in the same year. A\n\t\t\t\t\t\tSemantic Incorrect Object Comparison would occur if only two of the three\n\t\t\t\t\t\tfactors were checked for equality. So if only make and model are compared\n\t\t\t\t\t\tand the year is ignored, then you have an incorrect object\n\t\t\t\t\t\tcomparison.\n","The product uses the wrong operator when comparing a string,\n\t\t\t\t\tsuch as using \"==\" when the equals() method should be used\n\t\t\t\t\tinstead.\nIn Java, using == or != to compare two strings for equality actually\n\t\t\t\t\t\tcompares two objects for equality, not their values. Chances are good that\n\t\t\t\t\t\tthe two references will never be equal. While this weakness often only\n\t\t\t\t\t\taffects program correctness, if the equality is used for a security\n\t\t\t\t\t\tdecision, it could be leveraged to affect program security.","In the example below, two Java String objects are declared and\n\t\t\t\t\t\tinitialized with the same string values and an if statement is used to\n\t\t\t\t\t\tdetermine if the strings are equivalent.\n","The web application uses the GET method to process requests\n\t\t\t\t\tthat contain sensitive information, which can expose that information through\n\t\t\t\t\tthe browser's history, Referers, web logs, and other\n\t\t\t\t\tsources.\n","At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers.","\n","The software uses OpenSSL and trusts or uses a certificate\n\t\t\t\t\twithout using the SSL_get_verify_result() function to ensure that the\n\t\t\t\t\tcertificate satisfies all necessary security requirements.\nThis could allow an attacker to use an invalid certificate to claim to be\n\t\t\t\t\t\ta trusted host, use expired certificates, or conduct other attacks that\n\t\t\t\t\t\tcould be detected if the certificate is properly validated.","The data read may not be properly secured, it might be viewed by an attacker.\nTrust afforded to the system in question may allow for spoofing or redirection attacks.\nIf the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access.","The following OpenSSL code ensures that the host has a\n\t\t\t\t\t\tcertificate.\n","The J2EE application is configured to use an insufficient\n\t\t\t\t\tsession ID length.\nIf an attacker can guess or steal a session ID, then he/she may be able to\n\t\t\t\t\t\ttake over the user's session (called session hijacking). The number of\n\t\t\t\t\t\tpossible session IDs increases with increased session ID length, making it\n\t\t\t\t\t\tmore difficult to guess or steal a session ID.","If an attacker can guess an authenticated user's session identifier, they can take over the user's session. \n","Session ID's can be used to identify communicating parties in a web\n\t\t\t\t\t\tenvironment.","The following XML example code is a deployment descriptor for a Java\n\t\t\t\t\t\tweb application deployed on a Sun Java Application Server. This deployment\n\t\t\t\t\t\tdescriptor includes a session configuration property for configuring the\n\t\t\t\t\t\tsession ID length.\n","The Servlet does not catch all exceptions, which may reveal\n\t\t\t\t\tsensitive debugging information.\nWhen a Servlet throws an exception, the default error response the Servlet\n\t\t\t\t\t\tcontainer sends back to the user typically includes debugging information.\n\t\t\t\t\t\tThis information is of great value to an attacker. For example, a stack\n\t\t\t\t\t\ttrace might show the attacker a malformed SQL query string, the type of\n\t\t\t\t\t\tdatabase being used, and the version of the application container. This\n\t\t\t\t\t\tinformation enables the attacker to target known vulnerabilities in these\n\t\t\t\t\t\tcomponents.","The \"Missing Catch Block\" concept is probably broader than just Servlets,\n\t\t\t\t\t\tbut the broader concept is not sufficiently covered in CWE.","In the following method a DNS lookup failure will cause the Servlet\n\t\t\t\t\t\tto throw an exception.\n","A web application accepts a user-controlled input that\n\t\t\t\t\tspecifies a link to an external site, and uses that link in a Redirect. This\n\t\t\t\t\tsimplifies phishing attacks.\nAn http parameter may contain a URL value and could cause the web\n\t\t\t\t\t\tapplication to redirect the request to the specified URL. By modifying the\n\t\t\t\t\t\tURL value to a malicious site, an attacker may successfully launch a\n\t\t\t\t\t\tphishing scam and steal user credentials. Because the server name in the\n\t\t\t\t\t\tmodified link is identical to the original site, phishing attempts have a\n\t\t\t\t\t\tmore trustworthy appearance."," The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data. \n The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.","Phishing is a general term for deceptive attempts to coerce private\n\t\t\t\t\t\tinformation from users that will be used for identity theft.","The following code obtains a URL from the query string and then\n\t\t\t\t\t\tredirects the user to that URL. \n","The software is composed of a server that relies on the client\n\t\t\t\t\tto implement a mechanism that is intended to protect the\n\t\t\t\t\tserver.\nWhen the server relies on protection mechanisms placed on the client side,\n\t\t\t\t\t\tan attacker can modify the client-side behavior to bypass the protection\n\t\t\t\t\t\tmechanisms resulting in potentially unexpected interactions between the\n\t\t\t\t\t\tclient and server. The consequences will vary, depending on what the\n\t\t\t\t\t\tmechanisms are trying to protect.","Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash.\nClient-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions.","This example contains client-side code that checks if the user\n\t\t\t\t\t\tauthenticated successfully before sending a command. The server-side code\n\t\t\t\t\t\tperforms the authentication in one step, and executes the command in a\n\t\t\t\t\t\tseparate step.\n","A client/server product performs authentication within client\n\t\t\t\t\tcode but not in server code, allowing server-side authentication to be bypassed\n\t\t\t\t\tvia a modified client that omits the authentication check.\nClient-side authentication is extremely weak and may be breached easily.\n\t\t\t\t\t\tAny attacker may read the source code and reverse-engineer the\n\t\t\t\t\t\tauthentication mechanism to access parts of the application which would\n\t\t\t\t\t\totherwise be protected.","Note that there is a close relationship between this weakness and CWE-656\n\t\t\t\t\t\t(Reliance on Security through Obscurity). If developers do not believe that\n\t\t\t\t\t\ta user can reverse engineer a client, then they are more likely to choose\n\t\t\t\t\t\tclient-side authentication in the belief that it is safe.","\n","When multiple sockets are allowed to bind to the same port,\n\t\t\t\t\tother services on that port may be stolen or spoofed.\n","Packets from a variety of network services may be stolen or the services spoofed.","This code binds a server socket to port 21, allowing the server to\n\t\t\t\t\t\tlisten for traffic on that port.\n","The product does not properly check inputs that are used for\n\t\t\t\t\tloop conditions, potentially leading to a denial of service because of excessive\n\t\t\t\t\tlooping.\n","\n","A public or protected static final field references a mutable\n\t\t\t\t\tobject, which allows the object to be changed by malicious code, or accidentally\n\t\t\t\t\tfrom another package.\n","Here, an array (which is inherently mutable) is labeled public\n\t\t\t\t\t\tstatic final.\n","An ActionForm class contains a field that has not been declared\n\t\t\t\t\tprivate, which can be accessed without using a setter or\n\t\t\t\t\tgetter.\n","In the following Java example the class RegistrationForm is a Struts\n\t\t\t\t\t\tframework ActionForm Bean that will maintain user input data from a\n\t\t\t\t\t\tregistration webpage for a online business site. The user will enter\n\t\t\t\t\t\tregistration data and through the Struts framework the RegistrationForm bean\n\t\t\t\t\t\twill maintain the user data.\n","The program uses double-checked locking to access a resource\n\t\t\t\t\twithout the overhead of explicit synchronization, but the locking is\n\t\t\t\t\tinsufficient.\nDouble-checked locking refers to the situation where a programmer checks\n\t\t\t\t\t\tto see if a resource has been initialized, grabs a lock, checks again to see\n\t\t\t\t\t\tif the resource has been initialized, and then performs the initialization\n\t\t\t\t\t\tif it has not occurred yet. This should not be done, as is not guaranteed to\n\t\t\t\t\t\twork in all languages and on all architectures. In summary, other threads\n\t\t\t\t\t\tmay not be operating inside the synchronous block and are not guaranteed to\n\t\t\t\t\t\tsee the operations execute in the same order as they would appear inside the\n\t\t\t\t\t\tsynchronous block.","It may seem that the following bit of code achieves thread safety\n\t\t\t\t\t\twhile avoiding unnecessary synchronization...\n","The product uses an externally controlled name or reference\n\t\t\t\t\tthat resolves to a resource that is outside of the intended control\n\t\t\t\t\tsphere.\n","The relationship between CWE-99 and CWE-610 needs further investigation\n\t\t\t\t\t\tand clarification. They might be duplicates. CWE-99 \"Resource Injection,\" as\n\t\t\t\t\t\toriginally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the\n\t\t\t\t\t\t\"identifier used to access a system resource\" such as a file name or port\n\t\t\t\t\t\tnumber, yet it explicitly states that the \"resource injection\" term does not\n\t\t\t\t\t\tapply to \"path manipulation,\" which effectively identifies the path at which\n\t\t\t\t\t\ta resource can be found and could be considered to be one aspect of a\n\t\t\t\t\t\tresource identifier. Also, CWE-610 effectively covers any type of resource,\n\t\t\t\t\t\twhether that resource is at the system layer, the application layer, or the\n\t\t\t\t\t\tcode layer.","\n","The software processes an XML document that can contain XML\n\t\t\t\t\tentities with URIs that resolve to documents outside of the intended sphere of\n\t\t\t\t\tcontrol, causing the product to embed incorrect documents into its\n\t\t\t\t\toutput.\nXML documents optionally contain a Document Type Definition (DTD), which,\n\t\t\t\t\t\tamong other features, enables the definition of XML entities. It is possible\n\t\t\t\t\t\tto define an entity by providing a substitution string in the form of a URI.\n\t\t\t\t\t\tThe XML parser can access the contents of this URI and embed these contents\n\t\t\t\t\t\tback into the XML document for further processing.","If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.\nThe DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.\nThe software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.","\n","The product performs an indexing routine against private\n\t\t\t\t\tdocuments, but does not sufficiently verify that the actors who can access the\n\t\t\t\t\tindex also have the privileges to access the private\n\t\t\t\t\tdocuments.\nWhen an indexing routine is applied against a group of private documents,\n\t\t\t\t\t\tand that index's results are available to outsiders who do not have access\n\t\t\t\t\t\tto those documents, then outsiders might be able to obtain sensitive\n\t\t\t\t\t\tinformation by conducting targeted searches. The risk is especially\n\t\t\t\t\t\tdangerous if search results include surrounding text that was not part of\n\t\t\t\t\t\tthe search query. This issue can appear in search engines that are not\n\t\t\t\t\t\tconfigured (or implemented) to ignore critical files that should remain\n\t\t\t\t\t\thidden; even without permissions to download these files directly, the\n\t\t\t\t\t\tremote user could read them.","\n","According to WASC, \"Insufficient Session Expiration is when a\n\t\t\t\t\tweb site permits an attacker to reuse old session credentials or session IDs for\n\t\t\t\t\tauthorization.\"\n","The following snippet was taken from a J2EE web.xml deployment\n\t\t\t\t\t\tdescriptor in which the session-timeout parameter is explicitly defined (the\n\t\t\t\t\t\tdefault value depends on the container). In this case the value is set to\n\t\t\t\t\t\t-1, which means that a session will never expire.\n","The Secure attribute for sensitive cookies in HTTPS sessions is\n\t\t\t\t\tnot set, which could cause the user agent to send those cookies in plaintext\n\t\t\t\t\tover an HTTP session.\n","The snippet of code below, taken from a servlet doPost() method,\n\t\t\t\t\t\tsets an accountID cookie (sensitive) without calling\n\t\t\t\t\t\tsetSecure(true).\n","While adding general comments is very useful, some programmers\n\t\t\t\t\ttend to leave important data, such as: filenames related to the web application,\n\t\t\t\t\told links or links which were not meant to be browsed by users, old code\n\t\t\t\t\tfragments, etc.\nAn attacker who finds these comments can map the application's structure\n\t\t\t\t\t\tand files, expose hidden parts of the site, and study the fragments of code\n\t\t\t\t\t\tto reverse engineer the application, which may help develop further attacks\n\t\t\t\t\t\tagainst the site.","The following comment, embedded in a JSP, will be displayed in the\n\t\t\t\t\t\tresulting HTML output.\n","The PHP application uses an old method for processing uploaded\n\t\t\t\t\tfiles by referencing the four global variables that are set for each file (e.g.\n\t\t\t\t\t$varname, $varname_size, $varname_name, $varname_type). These variables could be\n\t\t\t\t\toverwritten by attackers, causing the application to process unauthorized\n\t\t\t\t\tfiles.\nThese global variables could be overwritten by POST requests, cookies, or\n\t\t\t\t\t\tother methods of populating or overwriting these variables. This could be\n\t\t\t\t\t\tused to read or process arbitrary files by providing values such as\n\t\t\t\t\t\t\"/etc/passwd\".","As of 2006, the \"four globals\" method is probably in sharp decline,\n\t\t\t\t\t\tbut older PHP applications could have this issue.\n","The product contains an assert() or similar statement that can\n\t\t\t\t\tbe triggered by an attacker, which leads to an application exit or other\n\t\t\t\t\tbehavior that is more severe than necessary.\nWhile assertion is good for catching logic errors and reducing the chances\n\t\t\t\t\t\tof reaching more serious vulnerability conditions, it can still lead to a\n\t\t\t\t\t\tdenial of service.","An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session.","In the excerpt below, an AssertionError (an unchecked exception) is\n\t\t\t\t\t\tthrown if the user hasn't entered an email address in an HTML\n\t\t\t\t\t\tform.\n","An ActiveX control is intended for use in a web browser, but it\n\t\t\t\t\texposes dangerous methods that perform actions that are outside of the browser's\n\t\t\t\t\tsecurity model (e.g. the zone or domain).\nActiveX controls can exercise far greater control over the operating\n\t\t\t\t\t\tsystem than typical Java or javascript. Exposed methods can be subject to\n\t\t\t\t\t\tvarious vulnerabilities, depending on the implemented behaviors of those\n\t\t\t\t\t\tmethods, and whether input validation is performed on the provided\n\t\t\t\t\t\targuments. If there is no integrity checking or origin validation, this\n\t\t\t\t\t\tmethod could be invoked by attackers.","\n","If a database cursor is not closed properly, then it could\n\t\t\t\t\tbecome accessible to other users while retaining the same privileges that were\n\t\t\t\t\toriginally assigned, leaving the cursor \"dangling.\"\nFor example, an improper dangling cursor could arise from unhandled\n\t\t\t\t\t\texceptions. The impact of the issue depends on the cursor's role, but SQL\n\t\t\t\t\t\tinjection attacks are commonly possible.","A cursor is a feature in Oracle PL/SQL and other languages that provides a\n\t\t\t\t\t\thandle for executing and accessing the results of SQL queries.","\n","The software, when opening a file or directory, does not\n\t\t\t\t\tsufficiently account for when the name is associated with a hard link to a\n\t\t\t\t\ttarget that is outside of the intended control sphere. This could allow an\n\t\t\t\t\tattacker to cause the software to operate on unauthorized\n\t\t\t\t\tfiles.\nFailure for a system to check for hard links can result in vulnerability\n\t\t\t\t\t\tto different types of attacks. For example, an attacker can escalate their\n\t\t\t\t\t\tprivileges if a file used by a privileged program is replaced with a hard\n\t\t\t\t\t\tlink to a sensitive file (e.g. /etc/passwd). When the process opens the\n\t\t\t\t\t\tfile, the attacker can assume the privileges of that process.","\n","When setting a new password for a user, the product does not\n\t\t\t\t\trequire knowledge of the original password, or using another form of\n\t\t\t\t\tauthentication.\nThis could be used by an attacker to change passwords for another user,\n\t\t\t\t\t\tthus gaining the privileges associated with that user.","This code changes a user's password.\n","The product uses external input to determine the names of\n\t\t\t\t\tvariables into which information is extracted, without verifying that the names\n\t\t\t\t\tof the specified variables are valid. This could cause the program to overwrite\n\t\t\t\t\tunintended variables.\nFor example, in PHP, extraction can be used to provide functionality\n\t\t\t\t\t\tsimilar to register_globals, a dangerous functionality that is frequently\n\t\t\t\t\t\tdisabled in production systems. Calling extract() or\n\t\t\t\t\t\timport_request_variables() without the proper arguments could allow\n\t\t\t\t\t\tarbitrary global variables to be overwritten, including superglobals. ","An attacker could modify sensitive data or program variables."," This code uses the credentials sent in a POST request to login a\n\t\t\t\t\t\tuser. \n","A product adds hooks to user-accessible API functions, but does\n\t\t\t\t\tnot properly validate the arguments. This could lead to resultant\n\t\t\t\t\tvulnerabilities.\nSuch hooks can be used in defensive software that runs with privileges,\n\t\t\t\t\t\tsuch as anti-virus or firewall, which hooks kernel calls. When the arguments\n\t\t\t\t\t\tare not validated, they could be used to bypass the protection scheme or\n\t\t\t\t\t\tattack the product itself.","\n","An ActiveX control is intended for restricted use, but it has\n\t\t\t\t\tbeen marked as safe-for-scripting.\nThis might allow attackers to use dangerous functionality via a web page\n\t\t\t\t\t\tthat accesses the control, which can lead to different resultant\n\t\t\t\t\t\tvulnerabilities, depending on the control's behavior.","\n","The product uses a regular expression that either (1) contains\n\t\t\t\t\tan executable component with user-controlled inputs, or (2) allows a user to\n\t\t\t\t\tenable execution by inserting pattern modifiers.\nCase (2) is possible in the PHP preg_replace() function, and possibly in\n\t\t\t\t\t\tother languages when a user-controlled input is inserted into a string that\n\t\t\t\t\t\tis later parsed as a regular expression.","\n","The product uses a regular expression that does not\n\t\t\t\t\tsufficiently restrict the set of allowed values.\nThis effectively causes the regexp to accept substrings that match the\n\t\t\t\t\t\tpattern, which produces a partial comparison to the target. In some cases,\n\t\t\t\t\t\tthis can lead to other weaknesses. Common errors include:","\n","The product does not properly handle null bytes or NUL\n\t\t\t\t\tcharacters when passing data between different representations or\n\t\t\t\t\tcomponents.\nA null byte (NUL character) can have different meanings across\n\t\t\t\t\t\trepresentations or languages. For example, it is a string terminator in\n\t\t\t\t\t\tstandard C libraries, but Perl and PHP strings do not treat it as a\n\t\t\t\t\t\tterminator. When two representations are crossed - such as when Perl or PHP\n\t\t\t\t\t\tinvokes underlying C functionality - this can produce an interaction error\n\t\t\t\t\t\twith unexpected results. Similar issues have been reported for ASP. Other\n\t\t\t\t\t\tinterpreters written in C might also be affected.","\n","In a language where the user can influence the name of a\n\t\t\t\t\tvariable at runtime, if the variable names are not controlled, an attacker can\n\t\t\t\t\tread or write to arbitrary variables, or access arbitrary\n\t\t\t\t\tfunctions.\nThe resultant vulnerabilities depend on the behavior of the application,\n\t\t\t\t\t\tboth at the crossover point and in any control/data flow that is reachable\n\t\t\t\t\t\tby the related variables or functions.","An attacker could gain unauthorized access to internal program variables and execute arbitrary code.","Many interpreted languages support the use of a \"$$varname\" construct to\n\t\t\t\t\t\tset a variable whose name is specified by the $varname variable. In PHP,\n\t\t\t\t\t\tthese are referred to as \"variable variables.\" Functions might also be\n\t\t\t\t\t\tinvoked using similar syntax, such as $$funcname(arg1, arg2).","\n","The product calls a function, procedure, or routine with\n\t\t\t\t\targuments that are not correctly specified, leading to always-incorrect behavior\n\t\t\t\t\tand resultant weaknesses.\nThere are multiple ways in which this weakness can be introduced,\n\t\t\t\t\t\tincluding:","This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources.","The following PHP method authenticates a user given a\n\t\t\t\t\t\tusername/password combination but is called with the parameters in reverse\n\t\t\t\t\t\torder.\n","When the product encounters an error condition or failure, its\n\t\t\t\t\tdesign requires it to fall back to a state that is less secure than other\n\t\t\t\t\toptions that are available, such as selecting the weakest encryption algorithm\n\t\t\t\t\tor using the most permissive access control restrictions.\nBy entering a less secure state, the product inherits the weaknesses\n\t\t\t\t\t\tassociated with that state, making it easier to compromise. At the least, it\n\t\t\t\t\t\tcauses administrators to have a false sense of security. This weakness\n\t\t\t\t\t\ttypically occurs as a result of wanting to \"fail functional\" to minimize\n\t\t\t\t\t\tadministration and support costs, instead of \"failing safe.\"","Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects.","Switches may revert their functionality to that of hubs when the\n\t\t\t\t\t\ttable used to map ARP information to the switch interface overflows, such as\n\t\t\t\t\t\twhen under a spoofing attack. This results in traffic being broadcast to an\n\t\t\t\t\t\teavesdropper, instead of being sent only on the relevant switch interface.\n\t\t\t\t\t\tTo mitigate this type of problem, the developer could limit the number of\n\t\t\t\t\t\tARP entries that can be recorded for a given switch interface, while other\n\t\t\t\t\t\tinterfaces may keep functioning normally. Configuration options can be\n\t\t\t\t\t\tprovided on the appropriate actions to be taken in case of a detected\n\t\t\t\t\t\tfailure, but safe defaults should be used.\n","The software uses a more complex mechanism than necessary,\n\t\t\t\t\twhich could lead to resultant weaknesses when the mechanism is not correctly\n\t\t\t\t\tunderstood, modeled, configured, implemented, or used.\nSecurity mechanisms should be as simple as possible. Complex security\n\t\t\t\t\t\tmechanisms may engender partial implementations and compatibility problems,\n\t\t\t\t\t\twith resulting mismatches in assumptions and implemented security. A\n\t\t\t\t\t\tcorollary of this principle is that data specifications should be as simple\n\t\t\t\t\t\tas possible, because complex data specifications result in complex\n\t\t\t\t\t\tvalidation code. Complex tasks and systems may also need to be guarded by\n\t\t\t\t\t\tcomplex security checks, so simple systems should be preferred.","The IPSEC specification is complex, which resulted in bugs, partial\n\t\t\t\t\t\timplementations, and incompatibilities between vendors.\n","The software does not perform access checks on a resource every\n\t\t\t\t\ttime the resource is accessed by an entity, which can create resultant\n\t\t\t\t\tweaknesses if that entity's rights or privileges change over\n\t\t\t\t\ttime.\n","A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource.","When executable library files are used on web servers, which is\n\t\t\t\t\t\tcommon in PHP applications, the developer might perform an access check in\n\t\t\t\t\t\tany user-facing executable, and omit the access check from the library file\n\t\t\t\t\t\titself. By directly requesting the library file (CWE-425), an attacker can\n\t\t\t\t\t\tbypass this access check.\n","The system's authorization functionality does not prevent one\n\t\t\t\t\tuser from gaining access to another user's data or record by modifying the key\n\t\t\t\t\tvalue identifying the data.\nRetrieval of a user record occurs in the system based on some key value\n\t\t\t\t\t\tthat is under user control. The key would typically identify a user related\n\t\t\t\t\t\trecord stored in the system and would be used to lookup that record for\n\t\t\t\t\t\tpresentation to the user. It is likely that an attacker would have to be an\n\t\t\t\t\t\tauthenticated user in the system. However, the authorization process would\n\t\t\t\t\t\tnot properly check the data access operation to ensure that the\n\t\t\t\t\t\tauthenticated user performing the operation has sufficient entitlements to\n\t\t\t\t\t\tperform the requested data access, hence bypassing any other authorization\n\t\t\t\t\t\tchecks present in the system. One manifestation of this weakness would be if\n\t\t\t\t\t\ta system used sequential or otherwise easily guessable session ids that\n\t\t\t\t\t\twould allow one user to easily switch to another user's session and\n\t\t\t\t\t\tread/modify their data.","Access control checks for specific user data or functionality can be bypassed.\nHorizontal escalation of privilege is possible (one user can view/modify information of another user).\nVertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.","\n","The software, when opening a file or directory, does not\n\t\t\t\t\tsufficiently handle when the file is a Windows shortcut (.LNK) whose target is\n\t\t\t\t\toutside of the intended control sphere. This could allow an attacker to cause\n\t\t\t\t\tthe software to operate on unauthorized files.\nThe shortcut (file with the .lnk extension) can permit an attacker to\n\t\t\t\t\t\tread/write a file that they originally did not have permissions to\n\t\t\t\t\t\taccess.","\n","The software contains a mechanism for users to recover or\n\t\t\t\t\tchange their passwords without knowing the original password, but the mechanism\n\t\t\t\t\tis weak.\nIt is common for an application to have a mechanism that provides a means\n\t\t\t\t\t\tfor a user to gain access to their account in the event they forget their\n\t\t\t\t\t\tpassword. Very often the password recovery mechanism is weak, which has the\n\t\t\t\t\t\teffect of making it more likely that it would be possible for a person other\n\t\t\t\t\t\tthan the legitimate system user to gain access to that user's\n\t\t\t\t\t\taccount.","An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.\nAn attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.\nThe system's security functionality is turned against the system by the attacker.","This entry might be reclassified as a category or \"loose composite,\" since\n\t\t\t\t\t\tit lists multiple specific errors that can make the mechanism weak. However,\n\t\t\t\t\t\tunder view 1000, it could be a weakness under protection mechanism failure,\n\t\t\t\t\t\talthough it is different from most PMF issues since it is related to a\n\t\t\t\t\t\tfeature that is designed to bypass a protection mechanism (specifically, the\n\t\t\t\t\t\tlack of knowledge of a password).","\n","The application constructs the name of a file or other resource\n\t\t\t\t\tusing input from an upstream component, but does not restrict or incorrectly\n\t\t\t\t\trestricts the resulting name.\nThis may produce resultant weaknesses. For instance, if the names of these\n\t\t\t\t\t\tresources contain scripting characters, it is possible that a script may get\n\t\t\t\t\t\texecuted in the client's browser if the application ever displays the name\n\t\t\t\t\t\tof the resource on a dynamically generated web page. Alternately, if the\n\t\t\t\t\t\tresources are consumed by some application parser, a specially crafted name\n\t\t\t\t\t\tcan exploit some vulnerability internal to the parser, potentially resulting\n\t\t\t\t\t\tin execution of arbitrary code on the server machine. The problems will vary\n\t\t\t\t\t\tbased on the context of usage of such malformed resource names and whether\n\t\t\t\t\t\tvulnerabilities are present in or assumptions are made by the targeted\n\t\t\t\t\t\ttechnology that would make code execution possible.","Execution of arbitrary code in the context of usage of the resources with dangerous names.\nCrash of the consumer code of these resources resulting in information leakage or denial of service.","\n","The software stores security-critical state information about\n\t\t\t\t\tits users, or the software itself, in a location that is accessible to\n\t\t\t\t\tunauthorized actors.\nIf an attacker can modify the state information without detection, then it\n\t\t\t\t\t\tcould be used to perform unauthorized actions or access unexpected\n\t\t\t\t\t\tresources, since the application programmer does not expect that the state\n\t\t\t\t\t\tcan be changed.","An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges.\nThe state variables may contain sensitive information that should not be known by the client.\nBy modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition.","In the following example, an authentication flag is read from a\n\t\t\t\t\t\tbrowser cookie, thus allowing for external control of user state\n\t\t\t\t\t\tdata.\n","The software uses external input to dynamically construct an\n\t\t\t\t\tXPath expression used to retrieve data from an XML database, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes that input. This allows an attacker to\n\t\t\t\t\tcontrol the structure of the query.\nThe net effect is that the attacker will have control over the information\n\t\t\t\t\t\tselected from the XML database and may use that ability to control\n\t\t\t\t\t\tapplication flow, modify logic, retrieve unauthorized data, or bypass\n\t\t\t\t\t\timportant checks (e.g. authentication).","Controlling application flow (e.g. bypassing authentication).\nThe attacker could read restricted XML content.","Consider the following simple XML document that stores\n\t\t\t\t\t\tauthentication information and a snippet of Java code that uses XPath query\n\t\t\t\t\t\tto retrieve authentication information:\n","The application does not neutralize or incorrectly neutralizes\n\t\t\t\t\tweb scripting syntax in HTTP headers that can be used by web browser components\n\t\t\t\t\tthat can process raw headers, such as Flash.\nAn attacker may be able to conduct cross-site scripting and other attacks\n\t\t\t\t\t\tagainst users who have these components enabled.","Run arbitrary code.\nAttackers may be able to obtain sensitive information.","In the following Java example, user-controlled data is added to the\n\t\t\t\t\t\tHTTP headers and returned to the client. Given that the data is not subject\n\t\t\t\t\t\tto neutralization, a malicious user may be able to inject dangerous\n\t\t\t\t\t\tscripting tags that will lead to script execution in the client\n\t\t\t\t\t\tbrowser.\n","The software contains an account lockout protection mechanism,\n\t\t\t\t\tbut the mechanism is too restrictive and can be triggered too easily. This\n\t\t\t\t\tallows attackers to deny service to legitimate users by causing their accounts\n\t\t\t\t\tto be locked out.\nAccount lockout is a security feature often present in applications as a\n\t\t\t\t\t\tcountermeasure to the brute force attack on the password based\n\t\t\t\t\t\tauthentication mechanism of the system. After a certain number of failed\n\t\t\t\t\t\tlogin attempts, the users' account may be disabled for a certain period of\n\t\t\t\t\t\ttime or until it is unlocked by an administrator. Other security events may\n\t\t\t\t\t\talso possibly trigger account lockout. However, an attacker may use this\n\t\t\t\t\t\tvery security feature to deny service to legitimate system users. It is\n\t\t\t\t\t\ttherefore important to ensure that the account lockout security mechanism is\n\t\t\t\t\t\tnot overly restrictive.","Users could be locked out of accounts.","\n","The software allows a file to be uploaded, but it relies on the\n\t\t\t\t\tfile name or extension of the file to determine the appropriate behaviors. This\n\t\t\t\t\tcould be used by attackers to cause the file to be misclassified and processed\n\t\t\t\t\tin a dangerous fashion.\nAn application might use the file name or extension of of a user-supplied\n\t\t\t\t\t\tfile to determine the proper course of action, such as selecting the correct\n\t\t\t\t\t\tprocess to which control should be passed, deciding what data should be made\n\t\t\t\t\t\tavailable, or what resources should be allocated. If the attacker can cause\n\t\t\t\t\t\tthe code to misclassify the supplied file, then the wrong action could\n\t\t\t\t\t\toccur. For example, an attacker could supply a file that ends in a\n\t\t\t\t\t\t\".php.gif\" extension that appears to be a GIF image, but would be processed\n\t\t\t\t\t\tas PHP code. In extreme cases, code execution is possible, but the attacker\n\t\t\t\t\t\tcould also cause exhaustion of resources, denial of service, exposure of\n\t\t\t\t\t\tdebug or system data (including application source code), or being bound to\n\t\t\t\t\t\ta particular server side process. This weakness may be due to a\n\t\t\t\t\t\tvulnerability in any of the technologies used by the web and application\n\t\t\t\t\t\tservers, due to misconfiguration, or resultant from another flaw in the\n\t\t\t\t\t\tapplication itself.","An attacker may be able to read sensitive data.\nAn attacker may be able to cause a denial of service.\nAn attacker may be able to gain privileges.","\n","The software defines policy namespaces and makes authorization\n\t\t\t\t\tdecisions based on the assumption that a URL is canonical. This can allow a\n\t\t\t\t\tnon-canonical URL to bypass the authorization.\nIf an application defines policy namespaces and makes authorization\n\t\t\t\t\t\tdecisions based on the URL, but it does not require or convert to a\n\t\t\t\t\t\tcanonical URL before making the authorization decision, then it opens the\n\t\t\t\t\t\tapplication to attack. For example, if the application only wants to allow\n\t\t\t\t\t\taccess to http://www.example.com/mypage, then the attacker might be able to\n\t\t\t\t\t\tbypass this restriction using equivalent URLs such as:","An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL.\nIf a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program).","\n","The application does not conform to the API requirements for a\n\t\t\t\t\tfunction call that requires extra privileges. This could allow attackers to gain\n\t\t\t\t\tprivileges by causing the function to be called\n\t\t\t\t\tincorrectly.\nWhen an application contains certain functions that perform operations\n\t\t\t\t\t\trequiring an elevated level of privilege, the caller of a privileged API\n\t\t\t\t\t\tmust be careful to:","An attacker may be able to elevate privileges.\nAn attacker may be able to obtain sensitive information.\nAn attacker may be able to execute code.","\n","The software uses obfuscation or encryption of inputs that\n\t\t\t\t\tshould not be mutable by an external actor, but the software does not use\n\t\t\t\t\tintegrity checks to detect if those inputs have been\n\t\t\t\t\tmodified.\nWhen an application relies on obfuscation or incorrectly applied / weak\n\t\t\t\t\t\tencryption to protect client-controllable tokens or parameters, that may\n\t\t\t\t\t\thave an effect on the user state, system state, or some decision made on the\n\t\t\t\t\t\tserver. Without protecting the tokens/parameters for integrity, the\n\t\t\t\t\t\tapplication is vulnerable to an attack where an adversary blindly traverses\n\t\t\t\t\t\tthe space of possible values of the said token/parameter in order to attempt\n\t\t\t\t\t\tto gain an advantage. The goal of the attacker is to find another admissible\n\t\t\t\t\t\tvalue that will somehow elevate his or her privileges in the system,\n\t\t\t\t\t\tdisclose information or change the behavior of the system in some way\n\t\t\t\t\t\tbeneficial to the attacker. If the application does not protect these\n\t\t\t\t\t\tcritical tokens/parameters for integrity, it will not be able to determine\n\t\t\t\t\t\tthat these values have been tampered with. Measures that are used to protect\n\t\t\t\t\t\tdata for confidentiality should not be relied upon to provide the integrity\n\t\t\t\t\t\tservice.","The inputs could be modified without detection, causing the software to have unexpected system state or make incorrect security decisions.","\n","The software, when opening a file or directory, does not\n\t\t\t\t\tsufficiently handle when the name is associated with a hard link to a target\n\t\t\t\t\tthat is outside of the intended control sphere. This could allow an attacker to\n\t\t\t\t\tcause the software to operate on unauthorized files.\nFailure for a system to check for hard links can result in vulnerability\n\t\t\t\t\t\tto different types of attacks. For example, an attacker can escalate their\n\t\t\t\t\t\tprivileges if a file used by a privileged program is replaced with a hard\n\t\t\t\t\t\tlink to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the\n\t\t\t\t\t\tfile, the attacker can assume the privileges of that process, or prevent the\n\t\t\t\t\t\tprogram from accurately processing data.","\n","The server contains a protection mechanism that assumes that\n\t\t\t\t\tany URI that is accessed using HTTP GET will not cause a state change to the\n\t\t\t\t\tassociated resource. This might allow attackers to bypass intended access\n\t\t\t\t\trestrictions and conduct resource modification and deletion attacks, since some\n\t\t\t\t\tapplications allow GET to modify state.\nAn application may disallow the HTTP requests to perform DELETE, PUT and\n\t\t\t\t\t\tPOST operations on the resource representation, believing that it will be\n\t\t\t\t\t\tenough to prevent unintended resource alterations. Even though the HTTP GET\n\t\t\t\t\t\tspecification requires that GET requests should not have side effects, there\n\t\t\t\t\t\tis nothing in the HTTP protocol itself that prevents the HTTP GET method\n\t\t\t\t\t\tfrom performing more than just query of the data. For instance, it is a\n\t\t\t\t\t\tcommon practice with REST based Web Services to have HTTP GET requests\n\t\t\t\t\t\tmodifying resources on the server side. Whenever that happens however, the\n\t\t\t\t\t\taccess control needs to be properly enforced in the application. No\n\t\t\t\t\t\tassumptions should be made that only HTTP DELETE, PUT, and POST methods have\n\t\t\t\t\t\tthe power to alter the representation of the resource being accessed in the\n\t\t\t\t\t\trequest.","An attacker could escalate privileges.\nAn attacker could modify resources.\nAn attacker could obtain sensitive information.","\n","The Web services architecture may require exposing a WSDL file\n\t\t\t\t\tthat contains information on the publicly accessible services and how callers of\n\t\t\t\t\tthese services should interact with them (e.g. what parameters they expect and\n\t\t\t\t\twhat types they return).\nAn information exposure may occur if any of the following apply:","The attacker may find sensitive information located in the WSDL file.","\n","The software uses external input to dynamically construct an\n\t\t\t\t\tXQuery expression used to retrieve data from an XML database, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes that input. This allows an attacker to\n\t\t\t\t\tcontrol the structure of the query.\nThe net effect is that the attacker will have control over the information\n\t\t\t\t\t\tselected from the XML database and may use that ability to control\n\t\t\t\t\t\tapplication flow, modify logic, retrieve unauthorized data, or bypass\n\t\t\t\t\t\timportant checks (e.g. authentication).","An attacker might be able to read sensitive information from the XML database.","\n","The product does not sufficiently compartmentalize\n\t\t\t\t\tfunctionality or processes that require different privilege levels, rights, or\n\t\t\t\t\tpermissions.\nWhen a weakness occurs in functionality that is accessible by\n\t\t\t\t\t\tlower-privileged users, then without strong boundaries, an attack might\n\t\t\t\t\t\textend the scope of the damage to higher-privileged users.","The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.","Single sign-on technology is intended to make it easier for users to\n\t\t\t\t\t\taccess multiple resources or domains without having to authenticate each\n\t\t\t\t\t\ttime. While this is highly convenient for the user and attempts to address\n\t\t\t\t\t\tproblems with psychological acceptability, it also means that a compromise\n\t\t\t\t\t\tof a user's credentials can provide immediate access to all other resources\n\t\t\t\t\t\tor domains.\n","A protection mechanism relies exclusively, or to a large\n\t\t\t\t\textent, on the evaluation of a single condition or the integrity of a single\n\t\t\t\t\tobject or entity in order to make a decision about granting access to restricted\n\t\t\t\t\tresources or functionality.\n","If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor.\nIt can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker.","This node is closely associated with the term \"Separation of Privilege.\"\n\t\t\t\t\t\tThis term is used in several different ways in the industry, but they\n\t\t\t\t\t\tgenerally combine two closely related principles: compartmentalization\n\t\t\t\t\t\t(CWE-653) and using only one factor in a security decision (this node).\n\t\t\t\t\t\tProper compartmentalization implicitly introduces multiple factors into a\n\t\t\t\t\t\tsecurity decision, but there can be cases in which multiple factors are\n\t\t\t\t\t\trequired for authentication or other mechanisms that do not involve\n\t\t\t\t\t\tcompartmentalization, such as performing all required checks on a submitted\n\t\t\t\t\t\tcertificate. It is likely that CWE-653 and CWE-654 will provoke further\n\t\t\t\t\t\tdiscussion.","Password-only authentication is perhaps the most well-known example\n\t\t\t\t\t\tof use of a single factor. Anybody who knows a user's password can\n\t\t\t\t\t\timpersonate that user.\n","The software has a protection mechanism that is too difficult\n\t\t\t\t\tor inconvenient to use, encouraging non-malicious users to disable or bypass the\n\t\t\t\t\tmechanism, whether by accident or on purpose.\n","By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise.","In \"Usability of Security: A Case Study\" [R.655.3], the authors\n\t\t\t\t\t\tconsider human factors in a cryptography product. Some of the weakness\n\t\t\t\t\t\trelevant discoveries of this case study were: users accidentally leaked\n\t\t\t\t\t\tsensitive information, could not figure out how to perform some tasks,\n\t\t\t\t\t\tthought they were enabling a security option when they were not, and made\n\t\t\t\t\t\timproper trust decisions.\n","The software uses a protection mechanism whose strength depends\n\t\t\t\t\theavily on its obscurity, such that knowledge of its algorithms or key data is\n\t\t\t\t\tsufficient to defeat the mechanism.\nThis reliance on \"security through obscurity\" can produce resultant\n\t\t\t\t\t\tweaknesses if an attacker is able to reverse engineer the inner workings of\n\t\t\t\t\t\tthe mechanism. Note that obscurity can be one small part of defense in\n\t\t\t\t\t\tdepth, since it can create more work for an attacker; however, it is a\n\t\t\t\t\t\tsignificant risk if used as the primary means of protection.","The security mechanism can be bypassed easily.","The design of TCP relies on the secrecy of Initial Sequence Numbers\n\t\t\t\t\t\t(ISNs), as originally covered in CVE-1999-0077. If ISNs can be guessed (due\n\t\t\t\t\t\tto predictability, CWE-330) or sniffed (due to lack of encryption, CWE-311),\n\t\t\t\t\t\tthen an attacker can hijack or spoof connections. Many TCP implementations\n\t\t\t\t\t\thave had variations of this problem over the years, including CVE-2004-0641,\n\t\t\t\t\t\tCVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163,\n\t\t\t\t\t\tCVE-2001-0162, CVE-2000-0916, and CVE-2000-0328.\n","The product violates well-established principles for secure\n\t\t\t\t\tdesign.\nThis can introduce resultant weaknesses or make it easier for developers\n\t\t\t\t\t\tto introduce related weaknesses during implementation. Because code is\n\t\t\t\t\t\tcentered around design, it can be resource-intensive to fix design\n\t\t\t\t\t\tproblems.","\n","The product does not handle or incorrectly handles a file name\n\t\t\t\t\tthat identifies a \"virtual\" resource that is not directly specified within the\n\t\t\t\t\tdirectory that is associated with the file name, causing the product to perform\n\t\t\t\t\tfile-based operations on a resource that is not a file.\nVirtual file names are represented like normal file names, but they are\n\t\t\t\t\t\teffectively aliases for other resources that do not behave like normal\n\t\t\t\t\t\tfiles. Depending on their functionality, they could be alternate entities.\n\t\t\t\t\t\tThey are not necessarily listed in directories.","\n","The software attempts to use a shared resource in an exclusive\n\t\t\t\t\tmanner, but does not prevent or incorrectly prevents use of the resource by\n\t\t\t\t\tanother thread or process.\n","\n","The software calls a non-reentrant function in a concurrent\n\t\t\t\t\tcontext in which a competing code sequence (e.g. thread or signal handler) may\n\t\t\t\t\thave an opportunity to call the same function or otherwise influence its\n\t\t\t\t\tstate.\n","\n","The software does not maintain or incorrectly maintains control\n\t\t\t\t\tover a resource throughout its lifetime of creation, use, and\n\t\t\t\t\trelease.\nResources often have explicit instructions on how to be created, used and\n\t\t\t\t\t\tdestroyed. When software does not follow these instructions, it can lead to\n\t\t\t\t\t\tunexpected behaviors and potentially exploitable states.","More work is needed on this node and its children. There are\n\t\t\t\t\t\tperspective/layering issues; for example, one breakdown is based on\n\t\t\t\t\t\tlifecycle phase (CWE-404, CWE-665), while other children are independent of\n\t\t\t\t\t\tlifecycle, such as CWE-400. Others do not specify as many bases or variants,\n\t\t\t\t\t\tsuch as CWE-704, which primarily covers numbers at this stage.","\n","The software does not initialize or incorrectly initializes a\n\t\t\t\t\tresource, which might leave the resource in an unexpected state when it is\n\t\t\t\t\taccessed or used.\nThis can have security implications when the associated resource is\n\t\t\t\t\t\texpected to have certain properties or values, such as a variable that\n\t\t\t\t\t\tdetermines whether a user has been authenticated or not.","When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.\nIf security-critical decisions rely on a variable having a \"0\" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur.\nThe uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments.","Here, a boolean initiailized field is consulted to ensure that\n\t\t\t\t\t\tinitialization tasks are only completed once. However, the field is\n\t\t\t\t\t\tmistakenly set to true during static initialization, so the initialization\n\t\t\t\t\t\tcode is never reached.\n","The software performs an operation on a resource at the wrong\n\t\t\t\t\tphase of the resource's lifecycle, which can lead to unexpected\n\t\t\t\t\tbehaviors.\nWhen a developer wants to initialize, use or release a resource, it is\n\t\t\t\t\t\timportant to follow the specifications outlined for how to operate on that\n\t\t\t\t\t\tresource and to ensure that the resource is in the expected state. In this\n\t\t\t\t\t\tcase, the software wants to perform a normally valid operation,\n\t\t\t\t\t\tinitialization, use or release, on a resource when it is in the incorrect\n\t\t\t\t\t\tphase of its lifetime.","\n","The software does not properly acquire a lock on a resource, or\n\t\t\t\t\tit does not properly release a lock on a resource, leading to unexpected\n\t\t\t\t\tresource state changes and behaviors.\n","Inconsistent locking discipline can lead to deadlock.","In the following Java snippet, methods are defined to get and set a\n\t\t\t\t\t\tlong field in an instance of a class that is shared across multiple threads.\n\t\t\t\t\t\tBecause operations on double and long are nonatomic in Java, concurrent\n\t\t\t\t\t\taccess may cause unexpected behavior. Thus, all operations on long and\n\t\t\t\t\t\tdouble fields should be synchronized.\n","The product exposes a resource to the wrong control sphere,\n\t\t\t\t\tproviding unintended actors with inappropriate access to the\n\t\t\t\t\tresource.\nResources such as files and directories may be inadvertently exposed\n\t\t\t\t\t\tthrough mechanisms such as insecure permissions, or when a program\n\t\t\t\t\t\taccidentally operates on the wrong object. For example, a program may intend\n\t\t\t\t\t\tthat private files can only be provided to a specific user. This effectively\n\t\t\t\t\t\tdefines a control sphere that is intended to prevent attackers from\n\t\t\t\t\t\taccessing these private files. If the file permissions are insecure, then\n\t\t\t\t\t\tparties other than the user will be able to access those files.","\n","The product does not properly transfer a resource/behavior to\n\t\t\t\t\tanother sphere, or improperly imports a resource/behavior from another sphere,\n\t\t\t\t\tin a manner that provides unintended control over that\n\t\t\t\t\tresource.\n","A \"control sphere\" is a set of resources and behaviors that are accessible\n\t\t\t\t\t\tto a single actor, or a group of actors. A product's security model will\n\t\t\t\t\t\ttypically define multiple spheres, possibly implicitly. For example, a\n\t\t\t\t\t\tserver might define one sphere for \"administrators\" who can create new user\n\t\t\t\t\t\taccounts with subdirectories under /home/server/, and a second sphere might\n\t\t\t\t\t\tcover the set of users who can create or delete files within their own\n\t\t\t\t\t\tsubdirectories. A third sphere might be \"users who are authenticated to the\n\t\t\t\t\t\toperating system on which the product is installed.\" Each sphere has\n\t\t\t\t\t\tdifferent sets of actors and allowable behaviors.","\n","The software constructs pathnames from user input, but it does\n\t\t\t\t\tnot handle or incorrectly handles a pathname containing a Windows device name\n\t\t\t\t\tsuch as AUX or CON. This typically leads to denial of service or an information\n\t\t\t\t\texposure when the application attempts to process the pathname as a regular\n\t\t\t\t\tfile.\nNot properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1)\n\t\t\t\t\t\tcan result in different types of vulnerabilities. In some cases an attacker\n\t\t\t\t\t\tcan request a device via injection of a virtual filename in a URL, which may\n\t\t\t\t\t\tcause an error that leads to a denial of service or an error page that\n\t\t\t\t\t\treveals sensitive information. A software system that allows device names to\n\t\t\t\t\t\tbypass filtering runs the risk of an attacker injecting malicious code in a\n\t\t\t\t\t\tfile with the name of a device.","Historically, there was a bug in the Windows operating system that caused\n\t\t\t\t\t\ta blue screen of death. Even after that issue was fixed DOS device names\n\t\t\t\t\t\tcontinue to be a factor.","\n","The code contains a control flow path that does not reflect the\n\t\t\t\t\talgorithm that the path is intended to implement, leading to incorrect behavior\n\t\t\t\t\tany time this path is navigated.\nThis weakness captures cases in which a particular code segment is always\n\t\t\t\t\t\tincorrect with respect to the algorithm that it is implementing. For\n\t\t\t\t\t\texample, if a C programmer intends to include multiple statements in a\n\t\t\t\t\t\tsingle block but does not include the enclosing braces (CWE-483), then the\n\t\t\t\t\t\tlogic is always incorrect. This issue is in contrast to most weaknesses in\n\t\t\t\t\t\twhich the code usually behaves correctly, except when it is externally\n\t\t\t\t\t\tmanipulated in malicious ways.","This node could possibly be split into lower-level nodes. \"Early Return\"\n\t\t\t\t\t\tis for returning control to the caller too soon (e.g., CWE-584). \"Excess\n\t\t\t\t\t\tReturn\" is when control is returned too far up the call stack (CWE-600,\n\t\t\t\t\t\tCWE-395). \"Improper control limitation\" occurs when the product maintains\n\t\t\t\t\t\tcontrol at a lower level of execution, when control should be returned\n\t\t\t\t\t\t\"further\" up the call stack (CWE-455). \"Incorrect syntax\" covers code that's\n\t\t\t\t\t\t\"just plain wrong\" such as CWE-484 and CWE-483.","\n","The product uses security features in a way that prevents the\n\t\t\t\t\tproduct's administrator from tailoring security settings to reflect the\n\t\t\t\t\tenvironment in which the product is being used. This introduces resultant\n\t\t\t\t\tweaknesses or prevents it from operating at a level of security that is desired\n\t\t\t\t\tby the administrator.\nIf the product's administrator does not have the ability to manage\n\t\t\t\t\t\tsecurity-related decisions at all times, then protecting the product from\n\t\t\t\t\t\toutside threats - including the product's developer - can become impossible.\n\t\t\t\t\t\tFor example, a hard-coded account name and password cannot be changed by the\n\t\t\t\t\t\tadministrator, thus exposing that product to attacks that the administrator\n\t\t\t\t\t\tcan not prevent.","\n","The software uses, accesses, or otherwise operates on a\n\t\t\t\t\tresource after that resource has been expired, released, or\n\t\t\t\t\trevoked.\n","If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity.\nWhen a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash.","The following code shows a simple example of a use after free\n\t\t\t\t\t\terror:\n","The product does not prevent the definition of control spheres\n\t\t\t\t\tfrom external actors.\nTypically, a product defines its control sphere within the code itself, or\n\t\t\t\t\t\tthrough configuration by the product's administrator. In some cases, an\n\t\t\t\t\t\texternal party can change the definition of the control sphere. This is\n\t\t\t\t\t\ttypically a resultant weakness.","Consider a blog publishing tool, which might have three explicit\n\t\t\t\t\t\tcontrol spheres: the creation of articles, only accessible to a \"publisher;\"\n\t\t\t\t\t\tcommenting on articles, only accessible to a \"commenter\" who is a registered\n\t\t\t\t\t\tuser; and reading articles, only accessible to an anonymous reader. Suppose\n\t\t\t\t\t\tthat the application is deployed on a web server that is shared with\n\t\t\t\t\t\tuntrusted parties. If a local user can modify the data files that define who\n\t\t\t\t\t\ta publisher is, then this user has modified the control sphere. In this\n\t\t\t\t\t\tcase, the issue would be resultant from another weakness such as\n\t\t\t\t\t\tinsufficient permissions.\n","The product does not properly control the amount of recursion\n\t\t\t\t\tthat takes place, which consumes excessive resources, such as allocated memory\n\t\t\t\t\tor the program stack.\n","Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash.\nIn some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path.","\n","The product performs the same operation on a resource two or\n\t\t\t\t\tmore times, when the operation should only be applied\n\t\t\t\t\tonce.\n","\n","The program invokes a potentially dangerous function that could\n\t\t\t\t\tintroduce a vulnerability if it is used incorrectly, but the function can also\n\t\t\t\t\tbe used safely.\n","If the function is used incorrectly, then it could result in security problems.","The following code attempts to create a local copy of a buffer to\n\t\t\t\t\t\tperform some manipulations to the data.\n","When converting from one data type to another, such as long to\n\t\t\t\t\tinteger, data can be omitted or translated in a way that produces unexpected\n\t\t\t\t\tvalues. If the resulting values are used in a sensitive context, then dangerous\n\t\t\t\t\tbehaviors may occur.\n","The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability.","In the following Java example, a float literal is cast to an\n\t\t\t\t\t\tinteger, thus causing a loss of precision.\n","The software performs a calculation that generates incorrect or\n\t\t\t\t\tunintended results that are later used in security-critical decisions or\n\t\t\t\t\tresource management.\nWhen software performs a security-critical calculation incorrectly, it\n\t\t\t\t\t\tmight lead to incorrect resource allocations, incorrect privilege\n\t\t\t\t\t\tassignments, or failed comparisons among other things. Many of the direct\n\t\t\t\t\t\tresults of an incorrect calculation can lead to even larger problems such as\n\t\t\t\t\t\tfailed protection mechanisms or even arbitrary code execution.","If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service.\nIf the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400).\nIn the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources.\nIf the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code.","The following image processing code allocates a table for\n\t\t\t\t\t\timages.\n","The software calls a function, procedure, or routine, but the\n\t\t\t\t\tcaller specifies the arguments in an incorrect order, leading to resultant\n\t\t\t\t\tweaknesses.\nWhile this weakness might be caught by the compiler in some languages, it\n\t\t\t\t\t\tcan occur more frequently in cases in which the called function accepts\n\t\t\t\t\t\tvariable numbers or types of arguments, such as format strings in C. It also\n\t\t\t\t\t\tcan occur in languages or environments that do not enforce strong\n\t\t\t\t\t\ttyping.","The following PHP method authenticates a user given a\n\t\t\t\t\t\tusername/password combination but is called with the parameters in reverse\n\t\t\t\t\t\torder.\n","The code does not function according to its published\n\t\t\t\t\tspecifications, potentially leading to incorrect usage.\nWhen providing functionality to an external party, it is important that\n\t\t\t\t\t\tthe software behaves in accordance with the details specified. When\n\t\t\t\t\t\trequirements of nuances are not documented, the functionality may produce\n\t\t\t\t\t\tunintended behaviors for the caller, possibly leading to an exploitable\n\t\t\t\t\t\tstate.","\n","The software calls a function, procedure, or routine, but the\n\t\t\t\t\tcaller specifies too many arguments, or too few arguments, which may lead to\n\t\t\t\t\tundefined behavior and resultant weaknesses.\n","\n","The software calls a function, procedure, or routine, but the\n\t\t\t\t\tcaller specifies an argument that is the wrong data type, which may lead to\n\t\t\t\t\tresultant weaknesses.\nThis weakness is most likely to occur in loosely typed languages, or in\n\t\t\t\t\t\tstrongly typed languages in which the types of variable arguments cannot be\n\t\t\t\t\t\tenforced at compilation time, or where there is implicit casting.","\n","The software calls a function, procedure, or routine, but the\n\t\t\t\t\tcaller specifies an argument that contains the wrong value, which may lead to\n\t\t\t\t\tresultant weaknesses.\n","This Perl code intends to record whether a user authenticated\n\t\t\t\t\t\tsuccessfully or not, and to exit if the user fails to authenticate. However,\n\t\t\t\t\t\twhen it calls ReportAuth(), the third argument is specified as 0 instead of\n\t\t\t\t\t\t1, so it does not exit.\n","The software calls a function, procedure, or routine, but the\n\t\t\t\t\tcaller specifies the wrong variable or reference as one of the arguments, which\n\t\t\t\t\tmay lead to undefined behavior and resultant weaknesses.\n","In the following Java snippet, the accessGranted() method is\n\t\t\t\t\t\taccidentally called with the static ADMIN_ROLES array rather than the user\n\t\t\t\t\t\troles.\n","The software does not properly prevent access to, or detect\n\t\t\t\t\tusage of, alternate data streams (ADS).\nAn attacker can use an ADS to hide information about a file (e.g. size,\n\t\t\t\t\t\tthe name of the process) from a system or file browser tools such as Windows\n\t\t\t\t\t\tExplorer and 'dir' at the command line utility. Alternately, the attacker\n\t\t\t\t\t\tmight be able to bypass intended access restrictions for the associated data\n\t\t\t\t\t\tfork.","Alternate data streams (ADS) were first implemented in the Windows NT\n\t\t\t\t\t\toperating system to provide compatibility between NTFS and the Macintosh\n\t\t\t\t\t\tHierarchical File System (HFS). In HFS, data and resource forks are used to\n\t\t\t\t\t\tstore information about a file. The data fork provides information about the\n\t\t\t\t\t\tcontents of the file while the resource fork stores metadata such as file\n\t\t\t\t\t\ttype.","\n","The code does not sufficiently manage its control flow during\n\t\t\t\t\texecution, creating conditions in which the control flow can be modified in\n\t\t\t\t\tunexpected ways.\n","This is a fairly high-level concept, although it covers a number of\n\t\t\t\t\t\tweaknesses in CWE that were more scattered throughout the Research view\n\t\t\t\t\t\t(CWE-1000) before Draft 9 was released.","\n","The product does not use or incorrectly uses a protection\n\t\t\t\t\tmechanism that provides sufficient defense against directed attacks against the\n\t\t\t\t\tproduct.\nThis weakness covers three distinct situations. A \"missing\" protection\n\t\t\t\t\t\tmechanism occurs when the application does not define any mechanism against\n\t\t\t\t\t\ta certain class of attack. An \"insufficient\" protection mechanism might\n\t\t\t\t\t\tprovide some defenses - for example, against the most common attacks - but\n\t\t\t\t\t\tit does not protect against everything that is intended. Finally, an\n\t\t\t\t\t\t\"ignored\" mechanism occurs when a mechanism is available and in active use\n\t\t\t\t\t\twithin the product, but the developer has not applied it in some code\n\t\t\t\t\t\tpath.","This is a fairly high-level concept, although it covers a number of\n\t\t\t\t\t\tweaknesses in CWE that were more scattered throughout the natural hierarchy\n\t\t\t\t\t\tbefore Draft 9 was released.","\n","The software uses multiple resources that can have the same\n\t\t\t\t\tidentifier, in a context in which unique identifiers are required. \nIf the software assumes that each resource has a unique identifier, the\n\t\t\t\t\t\tsoftware could operate on the wrong resource if attackers can cause multiple\n\t\t\t\t\t\tresources to be associated with the same identifier. ","If unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection.\n","\n","The software uses low-level functionality that is explicitly\n\t\t\t\t\tprohibited by the framework or specification under which the software is\n\t\t\t\t\tsupposed to operate.\nThe use of low-level functionality can violate the specification in\n\t\t\t\t\t\tunexpected ways that effectively disable built-in protection mechanisms,\n\t\t\t\t\t\tintroduce exploitable inconsistencies, or otherwise expose the functionality\n\t\t\t\t\t\tto attack.","\n","The software performs multiple related behaviors, but the\n\t\t\t\t\tbehaviors are performed in the wrong order in ways which may produce resultant\n\t\t\t\t\tweaknesses.\n","\n","The software compares two entities in a security-relevant\n\t\t\t\t\tcontext, but the comparison is insufficient, which may lead to resultant\n\t\t\t\t\tweaknesses.\nThis weakness class covers several possibilities:","\n","The web application sends a redirect to another location, but\n\t\t\t\t\tinstead of exiting, it executes additional code.\n","This weakness could affect the control flow of the application and allow execution of untrusted code."," This code queries a server and displays its status when a request\n\t\t\t\t\t\tcomes from an authorized IP address. \n","The default error page of a web application should not display\n\t\t\t\t\tsensitive information about the software system.\nA Web application must define a default error page for 4xx errors (e.g.\n\t\t\t\t\t\t404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to\n\t\t\t\t\t\tprevent attackers from mining information from the application container's\n\t\t\t\t\t\tbuilt-in error response.","A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.","In the snippet below, an unchecked runtime exception thrown from\n\t\t\t\t\t\twithin the try block may cause the container to display its default error\n\t\t\t\t\t\tpage (which may contain a full stack trace, among other\n\t\t\t\t\t\tthings).\n","The software does not properly anticipate or handle exceptional\n\t\t\t\t\tconditions that rarely occur during normal operation of the\n\t\t\t\t\tsoftware.\n","\n","The software does not correctly convert an object, resource or\n\t\t\t\t\tstructure from one type to a different type.\n","\n","The software does not properly return control flow to the\n\t\t\t\t\tproper location after it has completed a task or detected an unusual\n\t\t\t\t\tcondition.\n","\n","The software uses a name or reference to access a resource, but\n\t\t\t\t\tthe name/reference resolves to a resource that is outside of the intended\n\t\t\t\t\tcontrol sphere.\n","\n","The software does not enforce or incorrectly enforces that\n\t\t\t\t\tstructured messages or data are well-formed before being read from an upstream\n\t\t\t\t\tcomponent or sent to a downstream component.\nIf a message is malformed it may cause the message to be incorrectly\n\t\t\t\t\t\tinterpreted.","\n","The software assigns an owner to a resource, but the owner is\n\t\t\t\t\toutside of the intended control sphere.\nThis may allow the resource to be manipulated by actors outside of the\n\t\t\t\t\t\tintended control sphere.","An attacker could read and modify data for which they do not have permissions to access directly.","This overlaps verification errors, permissions, and privileges.","\n","Software operating in a MAC OS environment, where .DS_Store is\n\t\t\t\t\tin effect, must carefully manage hard links, otherwise an attacker may be able\n\t\t\t\t\tto leverage a hard link from .DS_Store to overwrite arbitrary files and gain\n\t\t\t\t\tprivileges.\n","This entry, which originated from PLOVER, probably stems from a common\n\t\t\t\t\t\tmanipulation that is used to exploit symlink and hard link following\n\t\t\t\t\t\tweaknesses, like /etc/passwd is often used for UNIX-based exploits. As such,\n\t\t\t\t\t\tit is probably too low-level for inclusion in CWE.","\n","The software does not follow certain coding rules for\n\t\t\t\t\tdevelopment, which can lead to resultant weaknesses or increase the severity of\n\t\t\t\t\tthe associated vulnerabilities.\n","\n","The software does not properly handle special paths that may\n\t\t\t\t\tidentify the data or resource fork of a file on the HFS+ file\n\t\t\t\t\tsystem.\nIf the software chooses actions to take based on the file name, then if an\n\t\t\t\t\t\tattacker provides the data or resource fork, the software may take\n\t\t\t\t\t\tunexpected actions. Further, if the software intends to restrict access to a\n\t\t\t\t\t\tfile, then an attacker might still be able to bypass intended access\n\t\t\t\t\t\trestrictions by requesting the data or resource fork for that file.","The Apple HFS+ file system permits files to have multiple data input\n\t\t\t\t\t\tstreams, accessible through special paths. The Mac OS X operating system\n\t\t\t\t\t\tprovides a way to access the different data input streams through special\n\t\t\t\t\t\tpaths and as an extended attribute:","A web server that interprets FILE.cgi as processing instructions\n\t\t\t\t\t\tcould disclose the source code for FILE.cgi by requesting\n\t\t\t\t\t\tFILE.cgi/..namedfork/data. This might occur because the web server invokes\n\t\t\t\t\t\tthe default handler which may return the contents of the file.\n","The software allows user input to control or influence paths or\n\t\t\t\t\tfile names that are used in filesystem operations.\nThis could allow an attacker to access or modify system files or other\n\t\t\t\t\t\tfiles that are critical to the application.","The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker. \nThe application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.\nThe application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.","The following code uses input from an HTTP request to create a file\n\t\t\t\t\t\tname. The programmer has not considered the possibility that an attacker\n\t\t\t\t\t\tcould provide a file name such as \"../../tomcat/conf/server.xml\", which\n\t\t\t\t\t\tcauses the application to delete one of its own configuration files\n\t\t\t\t\t\t(CWE-22).\n","The software specifies permissions for a security-critical\n\t\t\t\t\tresource in a way that allows that resource to be read or modified by unintended\n\t\t\t\t\tactors.\nWhen a resource is given a permissions setting that provides access to a\n\t\t\t\t\t\twider range of actors than required, it could lead to the exposure of\n\t\t\t\t\t\tsensitive information, or the modification of that resource by unintended\n\t\t\t\t\t\tparties. This is especially dangerous when the resource is related to\n\t\t\t\t\t\tprogram configuration, execution or sensitive user data.","An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file.\nAn attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse.\nAn attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database.","The relationships between privileges, permissions, and actors (e.g. users\n\t\t\t\t\t\tand groups) need further refinement within the Research view. One\n\t\t\t\t\t\tcomplication is that these concepts apply to two different pillars, related\n\t\t\t\t\t\tto control of resources (CWE-664) and protection mechanism failures\n\t\t\t\t\t\t(CWE-396).","The following code sets the umask of the process to 0 before\n\t\t\t\t\t\tcreating a file and writing \"Hello world\" into the file.\n","The developer builds a security-critical protection mechanism\n\t\t\t\t\tinto the software but the compiler optimizes the program such that the mechanism\n\t\t\t\t\tis removed or modified.\n","\n","The software constructs all or part of a command, data\n\t\t\t\t\tstructure, or record using externally-influenced input from an upstream\n\t\t\t\t\tcomponent, but it does not neutralize or incorrectly neutralizes special\n\t\t\t\t\telements that could modify how it is parsed or interpreted when it is sent to a\n\t\t\t\t\tdownstream component.\nSoftware has certain assumptions about what constitutes data and control\n\t\t\t\t\t\trespectively. It is the lack of verification of these assumptions for\n\t\t\t\t\t\tuser-controlled input that leads to injection problems. Injection problems\n\t\t\t\t\t\tencompass a wide variety of issues -- all mitigated in very different ways\n\t\t\t\t\t\tand usually attempted in order to alter the control flow of the process. For\n\t\t\t\t\t\tthis reason, the most effective way to discuss these weaknesses is to note\n\t\t\t\t\t\tthe distinct features which classify them as injection weaknesses. The most\n\t\t\t\t\t\timportant issue to note is that all injection problems share one thing in\n\t\t\t\t\t\tcommon -- i.e., they allow for the injection of control plane data into the\n\t\t\t\t\t\tuser-controlled data plane. This means that the execution of the process may\n\t\t\t\t\t\tbe altered by sending code in through legitimate data channels, using no\n\t\t\t\t\t\tother mechanism. While buffer overflows, and many other flaws, involve the\n\t\t\t\t\t\tuse of some further issue to gain execution, injection problems need only\n\t\t\t\t\t\tfor the data to be parsed. The most classic instantiations of this category\n\t\t\t\t\t\tof weakness are SQL injection and format string vulnerabilities.","Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.\nIn some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.\nData injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.\nOften the actions performed by injected control code are unlogged.","\n","The software provides an Applications Programming Interface\n\t\t\t\t\t(API) or similar interface for interaction with external actors, but the\n\t\t\t\t\tinterface includes a dangerous method or function that is not properly\n\t\t\t\t\trestricted.\nThis weakness can lead to a wide variety of resultant weaknesses,\n\t\t\t\t\t\tdepending on the behavior of the exposed method. It can apply to any number\n\t\t\t\t\t\tof technologies and approaches, such as ActiveX controls, Java functions,\n\t\t\t\t\t\tIOCTLs, and so on."," Exposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code. ","In the following Java example the method removeDatabase will delete\n\t\t\t\t\t\tthe database with the name specified in the input parameter.\n","The software does not adequately filter user-controlled input\n\t\t\t\t\tfor special elements with control implications.\n","\n","The software does not check or improperly checks for unusual or\n\t\t\t\t\texceptional conditions that are not expected to occur frequently during day to\n\t\t\t\t\tday operation of the software.\nThe programmer may assume that certain events or conditions will never\n\t\t\t\t\t\toccur or do not need to be worried about, such as low memory conditions,\n\t\t\t\t\t\tlack of access to resources due to restrictive permissions, or misbehaving\n\t\t\t\t\t\tclients or components. However, attackers may intentionally trigger these\n\t\t\t\t\t\tunusual conditions, thus violating the programmer's assumptions, possibly\n\t\t\t\t\t\tintroducing instability, incorrect behavior, or a vulnerability.","The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors.","Many functions will return some value about the success of their actions.\n\t\t\t\t\t\tThis will alert the program whether or not to handle any errors caused by\n\t\t\t\t\t\tthat function.","Consider the following code segment:\n","The software does not handle or incorrectly handles an\n\t\t\t\t\texceptional condition.\n","\n","The software does not return custom error pages to the user,\n\t\t\t\t\tpossibly exposing sensitive information.\n","Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.","In the snippet below, an unchecked runtime exception thrown from\n\t\t\t\t\t\twithin the try block may cause the container to display its default error\n\t\t\t\t\t\tpage (which may contain a full stack trace, among other\n\t\t\t\t\t\tthings).\n","A protocol or its implementation supports interaction between\n\t\t\t\t\tmultiple actors and allows those actors to negotiate which algorithm should be\n\t\t\t\t\tused as a protection mechanism such as encryption or authentication, but it does\n\t\t\t\t\tnot select the strongest algorithm that is available to both\n\t\t\t\t\tparties.\nWhen a security mechanism can be forced to downgrade to use a less secure\n\t\t\t\t\t\talgorithm, this can make it easier for attackers to compromise the software\n\t\t\t\t\t\tby exploiting weaker algorithm. The victim might not be aware that the less\n\t\t\t\t\t\tsecure algorithm is being used. For example, if an attacker can force a\n\t\t\t\t\t\tcommunications channel to use cleartext instead of strongly-encrypted data,\n\t\t\t\t\t\tthen the attacker could read the channel by sniffing, instead of going\n\t\t\t\t\t\tthrough extra effort of trying to decrypt the data using brute force\n\t\t\t\t\t\ttechniques.","\n","The software uses an API function, data structure, or other\n\t\t\t\t\tentity in a way that relies on properties that are not always guaranteed to hold\n\t\t\t\t\tfor that entity.\nThis can lead to resultant weaknesses when the required properties change,\n\t\t\t\t\t\tsuch as when the software is ported to a different platform or if an\n\t\t\t\t\t\tinteraction error (CWE-435) occurs.","\n","The software uses a one-way cryptographic hash against an input\n\t\t\t\t\tthat should not be reversible, such as a password, but the software does not\n\t\t\t\t\talso use a salt as part of the input.\nThis makes it easier for attackers to pre-compute the hash value using\n\t\t\t\t\t\tdictionary attack techniques such as rainbow tables.","If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables.","In cryptography, salt refers to some random addition of data to an input\n\t\t\t\t\t\tbefore hashing to make dictionary attacks more difficult.","In both of these examples, a user is logged in if their given\n\t\t\t\t\t\tpassword matches a stored password:\n","The software properly neutralizes certain special elements, but\n\t\t\t\t\tit improperly neutralizes equivalent special elements.\nThe software may have a fixed list of special characters it believes is\n\t\t\t\t\t\tcomplete. However, there may be alternate encodings, or representations that\n\t\t\t\t\t\talso have the same meaning. For example, the software may filter out a\n\t\t\t\t\t\tleading slash (/) to prevent absolute path names, but does not account for a\n\t\t\t\t\t\ttilde (~) followed by a user name, which on some *nix systems could be\n\t\t\t\t\t\texpanded to an absolute pathname. Alternately, the software might filter a\n\t\t\t\t\t\tdangerous \"-e\" command-line switch when calling an external program, but it\n\t\t\t\t\t\tmight not account for \"--exec\" or other switches that have the same\n\t\t\t\t\t\tsemantics. ","\n","The software uses a one-way cryptographic hash against an input\n\t\t\t\t\tthat should not be reversible, such as a password, but the software uses a\n\t\t\t\t\tpredictable salt as part of the input.\nThis makes it easier for attackers to pre-compute the hash value using\n\t\t\t\t\t\tdictionary attack techniques such as rainbow tables, effectively disabling\n\t\t\t\t\t\tthe protection that an unpredictable salt would provide. ","In cryptography, salt refers to some random addition of data to an input\n\t\t\t\t\t\tbefore hashing to make dictionary attacks more difficult.","\n","The application calls free() on a pointer to a memory resource\n\t\t\t\t\tthat was allocated on the heap, but the pointer is not at the start of the\n\t\t\t\t\tbuffer.\nThis can cause the application to crash, or in some cases, modify critical\n\t\t\t\t\t\tprogram variables or execute code.","Currently, CWE-763 is the parent, however it may be desirable to have an\n\t\t\t\t\t\tintermediate parent which is not function-specific, similar to how CWE-762\n\t\t\t\t\t\tis an intermediate parent between CWE-763 and CWE-590.","In this example, the programmer dynamically allocates a buffer to\n\t\t\t\t\t\thold a string and then searches for a specific character. After completing\n\t\t\t\t\t\tthe search, the programmer attempts to release the allocated memory and\n\t\t\t\t\t\treturn SUCCESS or FAILURE to the caller. Note: for simplification, this\n\t\t\t\t\t\texample uses a hard-coded \"Search Me!\" string and a constant string length\n\t\t\t\t\t\tof 20.\n","The application attempts to return a memory resource to the\n\t\t\t\t\tsystem, but it calls a release function that is not compatible with the function\n\t\t\t\t\tthat was originally used to allocate that resource.\nThis weakness can be generally described as mismatching memory management\n\t\t\t\t\t\troutines, such as:","This example allocates a BarObj object using the new operator in\n\t\t\t\t\t\tC++, however, the programmer then deallocates the object using free(), which\n\t\t\t\t\t\tmay lead to unexpected behavior.\n","The application attempts to return a memory resource to the\n\t\t\t\t\tsystem, but calls the wrong release function or calls the appropriate release\n\t\t\t\t\tfunction incorrectly.\nThis weakness can take several forms, such as:","This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code.","This area of the view CWE-1000 hierarchy needs additional work. Several\n\t\t\t\t\t\tentries will likely be created in this branch. Currently the focus is on\n\t\t\t\t\t\tfree() of memory, but delete and other related release routines may require\n\t\t\t\t\t\tthe creation of intermediate entries that are not specific to a particular\n\t\t\t\t\t\tfunction. In addition, the role of other types of invalid pointers, such as\n\t\t\t\t\t\tan expired pointer, i.e. CWE-415 Double Free and release of uninitialized\n\t\t\t\t\t\tpointers, related to CWE-457.","This code attempts to tokenize a string and place it into an array\n\t\t\t\t\t\tusing the strsep function, which inserts a \\0 byte in place of whitespace or\n\t\t\t\t\t\ta tab character. After finishing the loop, each string in the AP array\n\t\t\t\t\t\tpoints to a location within the input string.\n","The software locks a critical resource more times than\n\t\t\t\t\tintended, leading to an unexpected state in the system.\n When software is operating in a concurrent environment and repeatedly\n\t\t\t\t\t\tlocks a critical resource, the consequences will vary based on the type of\n\t\t\t\t\t\tlock, the lock's implementation, and the resource being protected. In some\n\t\t\t\t\t\tsituations such as with semaphores, the resources are pooled and extra\n\t\t\t\t\t\tlocking calls will reduce the size of the total available pool, possibly\n\t\t\t\t\t\tleading to degraded performance or a denial of service. If this can be\n\t\t\t\t\t\ttriggered by an attacker, it will be similar to an unrestricted lock\n\t\t\t\t\t\t(CWE-412). In the context of a binary lock, it is likely that any duplicate\n\t\t\t\t\t\tlocking attempts will never succeed since the lock is already held and\n\t\t\t\t\t\tprogress may not be possible.","An alternate way to think about this weakness is as an imbalance between\n\t\t\t\t\t\tthe number of locks / unlocks in the control flow. Over the course of\n\t\t\t\t\t\texecution, if each lock call is not followed by a subsequent call to unlock\n\t\t\t\t\t\tin a reasonable amount of time, then system performance may be degraded or\n\t\t\t\t\t\tat least operating at less than peak levels if there is competition for the\n\t\t\t\t\t\tlocks. This entry may need to be modified to reflect these concepts in the\n\t\t\t\t\t\tfuture.","\n","The software unlocks a critical resource more times than\n\t\t\t\t\tintended, leading to an unexpected state in the system.\nWhen software is operating in a concurrent environment and repeatedly\n\t\t\t\t\t\tunlocks a critical resource, the consequences will vary based on the type of\n\t\t\t\t\t\tlock, the lock's implementation, and the resource being protected. In some\n\t\t\t\t\t\tsituations such as with semaphores, the resources are pooled and extra calls\n\t\t\t\t\t\tto unlock will increase the count for the number of available resources,\n\t\t\t\t\t\tlikely resulting in a crash or unpredictable behavior when the system nears\n\t\t\t\t\t\tcapacity.","An alternate way to think about this weakness is as an imbalance between\n\t\t\t\t\t\tthe number of locks / unlocks in the control flow. Over the course of\n\t\t\t\t\t\texecution, if each lock call is not followed by a subsequent call to unlock\n\t\t\t\t\t\tin a reasonable amount of time, then system performance may be degraded or\n\t\t\t\t\t\tat least operating at less than peak levels if there is competition for the\n\t\t\t\t\t\tlocks. This entry may need to be modified to reflect these concepts in the\n\t\t\t\t\t\tfuture.","\n","The software declares a critical variable or field to be public\n\t\t\t\t\twhen intended security policy requires it to be private.\n"," Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.\n\t\t\t\t\t\t","The following example declares a critical variable public, making it\n\t\t\t\t\t\taccessible to anyone with access to the object in which it is\n\t\t\t\t\t\tcontained.\n","The software defines a public method that reads or modifies a\n\t\t\t\t\tprivate variable.\nIf an attacker modifies the variable to contain unexpected values, this\n\t\t\t\t\t\tcould violate assumptions from other parts of the code. Additionally, if an\n\t\t\t\t\t\tattacker can read the private variable, it may expose sensitive information\n\t\t\t\t\t\tor make it easier to launch further attacks.","This entry is closely associated with access control for public methods.\n\t\t\t\t\t\tIf the public methods are restricted with proper access controls, then the\n\t\t\t\t\t\tinformation in the private variable will not be exposed to unexpected\n\t\t\t\t\t\tparties. There may be chaining or composite relationships between improper\n\t\t\t\t\t\taccess controls and this weakness.","The following example declares a critical variable to be private,\n\t\t\t\t\t\tand then allows the variable to be modified by public methods.\n","The software contains a conditional statement with multiple\n\t\t\t\t\tlogical expressions in which one of the non-leading expressions may produce side\n\t\t\t\t\teffects. This may lead to an unexpected state in the program after the execution\n\t\t\t\t\tof the conditional, because short-circuiting logic may prevent the side effects\n\t\t\t\t\tfrom occurring.\nUsage of short circuit evaluation, though well-defined in the C standard,\n\t\t\t\t\t\tmay alter control flow in a way that introduces logic errors that are\n\t\t\t\t\t\tdifficult to detect, possibly causing errors later during the software's\n\t\t\t\t\t\texecution. If an attacker can discover such an inconsistency, it may be\n\t\t\t\t\t\texploitable to gain arbitrary control over a system.","Widely varied consequences are possible if an attacker is aware of an unexpected state in the software after a conditional. It may lead to information exposure, a system crash, or even complete attacker control of the system.","The following function attempts to take a size value from a user and\n\t\t\t\t\t\tallocate an array of that size (we ignore bounds checking for simplicity).\n\t\t\t\t\t\tThe function tries to initialize each spot with the value of its index, that\n\t\t\t\t\t\tis, A[len-1] = len - 1; A[len-2] = len - 2; ... A[1] = 1; A[0] = 0; However,\n\t\t\t\t\t\tsince the programmer uses the prefix decrement operator, when the\n\t\t\t\t\t\tconditional is evaluated with i == 1, the decrement will result in a 0 value\n\t\t\t\t\t\tfor the first part of the predicate, causing the second portion to be\n\t\t\t\t\t\tbypassed via short-circuit evaluation. This means we cannot be sure of what\n\t\t\t\t\t\tvalue will be in A[0] when we return the array to the user.\n","The software constructs all or part of a command using\n\t\t\t\t\texternally-influenced input from an upstream component, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes special elements that could modify the\n\t\t\t\t\tintended command when it is sent to a downstream\n\t\t\t\t\tcomponent.\n Command injection vulnerabilities typically occur when:"," If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed. ","The following simple program accepts a filename as a command line\n\t\t\t\t\t\targument and displays the contents of the file back to the user. The program\n\t\t\t\t\t\tis installed setuid root because it is intended for use as a learning tool\n\t\t\t\t\t\tto allow system administrators in-training to inspect privileged system\n\t\t\t\t\t\tfiles without giving them the ability to modify them or damage the\n\t\t\t\t\t\tsystem.\n","The software allocates a reusable resource or group of\n\t\t\t\t\tresources on behalf of an actor without imposing any restrictions on how many\n\t\t\t\t\tresources can be allocated, in violation of the intended security policy for\n\t\t\t\t\tthat actor.\n","When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.","\"Resource exhaustion\" (CWE-400) is currently treated as a weakness,\n\t\t\t\t\t\talthough it is more like a category of weaknesses that all have the same\n\t\t\t\t\t\ttype of consequence. While this entry treats CWE-400 as a parent in view\n\t\t\t\t\t\t1000, the relationship is probably more appropriately described as a\n\t\t\t\t\t\tchain.","This code allocates a socket and forks each time it receives a new\n\t\t\t\t\t\tconnection.\n","The software does not properly maintain a reference to a\n\t\t\t\t\tresource that has been allocated, which prevents the resource from being\n\t\t\t\t\treclaimed.\nThis does not necessarily apply in languages or frameworks that\n\t\t\t\t\t\tautomatically perform garbage collection, since the removal of all\n\t\t\t\t\t\treferences may act as a signal that the resource is ready to be\n\t\t\t\t\t\treclaimed.","When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.","\"Resource exhaustion\" (CWE-400) is currently treated as a weakness,\n\t\t\t\t\t\talthough it is more like a category of weaknesses that all have the same\n\t\t\t\t\t\ttype of consequence. While this entry treats CWE-400 as a parent in view\n\t\t\t\t\t\t1000, the relationship is probably more appropriately described as a\n\t\t\t\t\t\tchain.","\n","The software does not release a resource after its effective\n\t\t\t\t\tlifetime has ended, i.e., after the resource is no longer\n\t\t\t\t\tneeded.\nWhen a resource is not released after use, it can allow attackers to cause\n\t\t\t\t\t\ta denial of service.","When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.","\"Resource exhaustion\" (CWE-400) is currently treated as a weakness,\n\t\t\t\t\t\talthough it is more like a category of weaknesses that all have the same\n\t\t\t\t\t\ttype of consequence. While this entry treats CWE-400 as a parent in view\n\t\t\t\t\t\t1000, the relationship is probably more appropriately described as a\n\t\t\t\t\t\tchain.","The following code attempts to process a file by reading it in line\n\t\t\t\t\t\tby line until the end has been reached.\n","The software does not properly maintain references to a file\n\t\t\t\t\tdescriptor or handle, which prevents that file descriptor/handle from being\n\t\t\t\t\treclaimed.\nThis can cause the software to consume all available file descriptors or\n\t\t\t\t\t\thandles, which can prevent other processes from performing critical file\n\t\t\t\t\t\tprocessing operations.","When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.","\n","The software allocates file descriptors or handles on behalf of\n\t\t\t\t\tan actor without imposing any restrictions on how many descriptors can be\n\t\t\t\t\tallocated, in violation of the intended security policy for that\n\t\t\t\t\tactor.\nThis can cause the software to consume all available file descriptors or\n\t\t\t\t\t\thandles, which can prevent other processes from performing critical file\n\t\t\t\t\t\tprocessing operations.","When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.","\n","The software does not release a file descriptor or handle after\n\t\t\t\t\tits effective lifetime has ended, i.e., after the file descriptor/handle is no\n\t\t\t\t\tlonger needed.\nWhen a file descriptor or handle is not released after use (typically by\n\t\t\t\t\t\texplicitly closing it), attackers can cause a denial of service by consuming\n\t\t\t\t\t\tall available file descriptors/handles, or otherwise preventing other system\n\t\t\t\t\t\tprocesses from obtaining their own file descriptors/handles.","When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.","\n","The software uses XML documents and allows their structure to\n\t\t\t\t\tbe defined with a Document Type Definition (DTD), but it does not properly\n\t\t\t\t\tcontrol the number of recursive definitions of entities.\nIf the DTD contains a large number of nested or recursive entities, this\n\t\t\t\t\t\tcan lead to explosive growth of data when parsed, causing a denial of\n\t\t\t\t\t\tservice.","If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources.","The DTD and the very brief XML below illustrate what is meant by an\n\t\t\t\t\t\tXML bomb. The ZERO entity contains one character, the letter A. The choice\n\t\t\t\t\t\tof entity name ZERO is being used to indicate length equivalent to that\n\t\t\t\t\t\texponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers\n\t\t\t\t\t\tto ZERO twice, therefore the XML parser will expand ONE to a length of 2, or\n\t\t\t\t\t\t2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32\n\t\t\t\t\t\tcharacters in length, or 4 GB, probably consuming far more data than\n\t\t\t\t\t\texpected.\n","The software uses a regular expression to perform\n\t\t\t\t\tneutralization, but the regular expression is not anchored and may allow\n\t\t\t\t\tmalicious or malformed data to slip through.\nWhen performing tasks such as whitelist validation, data is examined and\n\t\t\t\t\t\tpossibly modified to ensure that it is well-formed and adheres to a list of\n\t\t\t\t\t\tsafe values. If the regular expression is not anchored, malicious or\n\t\t\t\t\t\tmalformed data may be included before or after any string matching the\n\t\t\t\t\t\tregular expression. The type of malicious data that is allowed will depend\n\t\t\t\t\t\ton the context of the application and which anchors are omitted from the\n\t\t\t\t\t\tregular expression.","An unanchored regular expression in the context of a whitelist will possibly result in a protection mechanism failure, allowing malicious or malformed data to enter trusted regions of the program. The specific consequences will depend on what functionality the whitelist was protecting.","Regular expressions are typically used to match a pattern of text. Anchors\n\t\t\t\t\t\tare used in regular expressions to specify where the pattern should match:\n\t\t\t\t\t\tat the beginning, the end, or both (the whole input).","Consider a web application that supports multiple languages. It\n\t\t\t\t\t\tselects messages for an appropriate language by using the lang\n\t\t\t\t\t\tparameter.\n","When a security-critical event occurs, the software either does\n\t\t\t\t\tnot record the event or omits important details about the event when logging\n\t\t\t\t\tit.\nWhen security-critical events are not logged properly, such as a failed\n\t\t\t\t\t\tlogin attempt, this can make malicious behavior more difficult to detect and\n\t\t\t\t\t\tmay hinder forensic analysis after an attack succeeds.","If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.","The example below shows a configuration for the service security\n\t\t\t\t\t\taudit feature in the Windows Communication Foundation (WCF). \n","The software logs too much information, making log files hard\n\t\t\t\t\tto process and possibly hindering recovery efforts or forensic analysis after an\n\t\t\t\t\tattack.\nWhile logging is a good practice in general, and very high levels of\n\t\t\t\t\t\tlogging are appropriate for debugging stages of development, too much\n\t\t\t\t\t\tlogging in a production environment might hinder a system administrator's\n\t\t\t\t\t\tability to detect anomalous conditions. This can provide cover for an\n\t\t\t\t\t\tattacker while attempting to penetrate a system, clutter the audit trail for\n\t\t\t\t\t\tforensic analysis, or make it more difficult to debug problems in a\n\t\t\t\t\t\tproduction environment.","Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system.\nLogging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack.\nIf system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise.","\n","The software constructs all or part of an OS command using\n\t\t\t\t\texternally-influenced input from an upstream component, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes special elements that could modify the\n\t\t\t\t\tintended OS command when it is sent to a downstream\n\t\t\t\t\tcomponent.\nThis could allow attackers to execute unexpected, dangerous commands\n\t\t\t\t\t\tdirectly on the operating system. This weakness can lead to a vulnerability\n\t\t\t\t\t\tin environments in which the attacker does not have direct access to the\n\t\t\t\t\t\toperating system, such as in web applications. Alternately, if the weakness\n\t\t\t\t\t\toccurs in a privileged program, it could allow the attacker to specify\n\t\t\t\t\t\tcommands that normally would not be accessible, or to call alternate\n\t\t\t\t\t\tcommands with privileges that the attacker does not have. The problem is\n\t\t\t\t\t\texacerbated if the compromised process does not follow the principle of\n\t\t\t\t\t\tleast privilege, because the attacker-controlled commands may run with\n\t\t\t\t\t\tspecial system privileges that increases the amount of damage.","Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.","This example code intends to take the name of a user and list the\n\t\t\t\t\t\tcontents of that user's home directory. It is subject to the first variant\n\t\t\t\t\t\tof OS command injection. \n","The software uses the RSA algorithm but does not incorporate\n\t\t\t\t\tOptimal Asymmetric Encryption Padding (OAEP), which might weaken the\n\t\t\t\t\tencryption.\nPadding schemes are often used with cryptographic algorithms to make the\n\t\t\t\t\t\tplaintext less predictable and complicate attack efforts. The OAEP scheme is\n\t\t\t\t\t\toften used with RSA to nullify the impact of predictable common text.","Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.","This entry could probably have a new parent related to improper padding,\n\t\t\t\t\t\thowever the role of padding in cryptographic algorithms can vary, such as\n\t\t\t\t\t\thiding the length of the plaintext and providing additional random bits for\n\t\t\t\t\t\tthe cipher. In general, cryptographic problems in CWE are not well organized\n\t\t\t\t\t\tand further research is needed.","The example below attempts to build an RSA cipher.\n","The software defines an IOCTL that uses METHOD_NEITHER for I/O,\n\t\t\t\t\tbut it does not validate or incorrectly validates the addresses that are\n\t\t\t\t\tprovided.\nWhen an IOCTL uses the METHOD_NEITHER option for I/O control, it is the\n\t\t\t\t\t\tresponsibility of the IOCTL to validate the addresses that have been\n\t\t\t\t\t\tsupplied to it. If validation is missing or incorrect, attackers can supply\n\t\t\t\t\t\tarbitrary memory addresses, leading to code execution or a denial of\n\t\t\t\t\t\tservice.","An attacker may be able to access memory that belongs to another process or user. If the attacker can control the contents that the IOCTL writes, it may lead to code execution at high privilege levels. At the least, a crash can occur.","\n","The software implements an IOCTL with functionality that should\n\t\t\t\t\tbe restricted, but it does not properly enforce access control for the\n\t\t\t\t\tIOCTL.\nWhen an IOCTL contains privileged functionality and is exposed\n\t\t\t\t\t\tunnecessarily, attackers may be able to access this functionality by\n\t\t\t\t\t\tinvoking the IOCTL. Even if the functionality is benign, if the programmer\n\t\t\t\t\t\thas assumed that the IOCTL would only be accessed by a trusted process,\n\t\t\t\t\t\tthere may be little or no validation of the incoming data, exposing\n\t\t\t\t\t\tweaknesses that would never be reachable if the attacker cannot call the\n\t\t\t\t\t\tIOCTL directly.","Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data.","\n","The program uses an expression in which operator precedence\n\t\t\t\t\tcauses incorrect logic to be used.\nWhile often just a bug, operator precedence logic errors can have serious\n\t\t\t\t\t\tconsequences if they are used in security-critical code, such as making an\n\t\t\t\t\t\tauthentication decision.","The consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state.","In the following example, the method validateUser makes a call to\n\t\t\t\t\t\tanother method to authenticate a username and password for a user and\n\t\t\t\t\t\treturns a success or failure code.\n","The application uses a protection mechanism that relies on the\n\t\t\t\t\texistence or values of a cookie, but it does not properly ensure that the cookie\n\t\t\t\t\tis valid for the associated user.\n Attackers can easily modify cookies, within the browser or by\n\t\t\t\t\t\timplementing the client-side code outside of the browser. Attackers can\n\t\t\t\t\t\tbypass protection mechanisms such as authorization and authentication by\n\t\t\t\t\t\tmodifying the cookie to contain an expected value.","It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred.","A new parent might need to be defined for this entry. This entry is\n\t\t\t\t\t\tspecific to cookies, which reflects the significant number of\n\t\t\t\t\t\tvulnerabilities being reported for cookie-based authentication in CVE during\n\t\t\t\t\t\t2008 and 2009. However, other types of inputs - such as parameters or\n\t\t\t\t\t\theaders - could also be used for similar authentication or authorization.\n\t\t\t\t\t\tSimilar issues (under the Research view) include CWE-247 and CWE-472.","The following code excerpt reads a value from a browser cookie to\n\t\t\t\t\t\tdetermine the role of the user.\n","The software invokes a function for normalizing paths or file\n\t\t\t\t\tnames, but it provides an output buffer that is smaller than the maximum\n\t\t\t\t\tpossible size, such as PATH_MAX.\nPassing an inadequately-sized output buffer to a path manipulation\n\t\t\t\t\t\tfunction can result in a buffer overflow. Such functions include realpath(),\n\t\t\t\t\t\treadlink(), PathAppend(), and others.","Windows provides a large number of utility functions that manipulate\n\t\t\t\t\t\tbuffers containing filenames. In most cases, the result is returned in a\n\t\t\t\t\t\tbuffer that is passed in as input. (Usually the filename is modified in\n\t\t\t\t\t\tplace.) Most functions require the buffer to be at least MAX_PATH bytes in\n\t\t\t\t\t\tlength, but you should check the documentation for each function\n\t\t\t\t\t\tindividually. If the buffer is not large enough to store the result of the\n\t\t\t\t\t\tmanipulation, a buffer overflow can occur.","Much of this entry was originally part of CWE-249, which was deprecated\n\t\t\t\t\t\tfor several reasons.","\n","The software reads or writes to a buffer using an index or\n\t\t\t\t\tpointer that references a memory location prior to the beginning of the buffer. \nThis typically occurs when a pointer or its index is decremented to a\n\t\t\t\t\t\tposition before the buffer, when pointer arithmetic results in a position\n\t\t\t\t\t\tbefore the beginning of the valid memory location, or when a negative index\n\t\t\t\t\t\tis used.","For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.\nIf the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. ","In the following C/C++ example, a utility function is used to trim\n\t\t\t\t\t\ttrailing whitespace from a character string. The function copies the input\n\t\t\t\t\t\tstring to a local character string and uses a while statement to remove the\n\t\t\t\t\t\ttrailing whitespace by moving backward through the string and overwriting\n\t\t\t\t\t\twhitespace with a NUL character.\n","The software writes data past the end, or before the beginning,\n\t\t\t\t\tof the intended buffer.\n This typically occurs when the pointer or its index is incremented or\n\t\t\t\t\t\tdecremented to a position beyond the bounds of the buffer or when pointer\n\t\t\t\t\t\tarithmetic results in a position outside of the valid memory location to\n\t\t\t\t\t\tname a few. This may result in corruption of sensitive information, a crash,\n\t\t\t\t\t\tor code execution among other things.","The following code attempts to save four different identification\n\t\t\t\t\t\tnumbers into an array.\n","The software reads or writes to a buffer using an index or\n\t\t\t\t\tpointer that references a memory location after the end of the buffer. \nThis typically occurs when a pointer or its index is incremented to a\n\t\t\t\t\t\tposition after the buffer, when pointer arithmetic results in a position\n\t\t\t\t\t\tafter the end of the valid memory location, or when a large, positive index\n\t\t\t\t\t\tis used that is after the boundary of the buffer. These problems may be\n\t\t\t\t\t\tresultant from trusting a user-influenced input length variable.","For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), he can redirect a function pointer to his own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.","This example takes an IP address from a user, verifies that it is\n\t\t\t\t\t\twell formed and then looks up the hostname and copies it into a\n\t\t\t\t\t\tbuffer.\n","The product allocates memory based on an untrusted size value,\n\t\t\t\t\tbut it does not validate or incorrectly validates the size, allowing arbitrary\n\t\t\t\t\tamounts of memory to be allocated. \n","Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system."," Consider the following code, which accepts an untrusted size value\n\t\t\t\t\t\tand allocates a buffer to contain a string of the given size.\n","The software does not neutralize or incorrectly neutralizes\n\t\t\t\t\tuser-controllable input before it is placed in output that is used as a web page\n\t\t\t\t\tthat is served to other users.\nCross-site scripting (XSS) vulnerabilities occur when:","The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.\nIn some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.\nThe consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server.","The same origin policy states that browsers should limit the resources\n\t\t\t\t\t\taccessible to scripts running on a given web site, or \"origin\", to the\n\t\t\t\t\t\tresources associated with that web site on the client-side, and not the\n\t\t\t\t\t\tclient-side resources of any other sites or \"origins\". The goal is to\n\t\t\t\t\t\tprevent one site from being able to modify or read the contents of an\n\t\t\t\t\t\tunrelated site. Since the World Wide Web involves interactions between many\n\t\t\t\t\t\tsites, this policy is important for browsers to enforce."," This code displays a welcome message on a web page based on the\n\t\t\t\t\t\tHTTP GET username parameter. This example covers a Reflected XSS (Type 1)\n\t\t\t\t\t\tscenario.\n","The software receives data from an upstream component, but does\n\t\t\t\t\tnot filter or incorrectly filters special elements before sending it to a\n\t\t\t\t\tdownstream component.\n","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter \"../\" from the input. It then appends this result to\n\t\t\t\t\t\tthe /home/user/ directory and attempts to read the file in the final\n\t\t\t\t\t\tresulting path.\n","The software receives data from an upstream component, but does\n\t\t\t\t\tnot completely filter special elements before sending it to a downstream\n\t\t\t\t\tcomponent.\n","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter \"../\" from the input. It then appends this result to\n\t\t\t\t\t\tthe /home/user/ directory and attempts to read the file in the final\n\t\t\t\t\t\tresulting path.\n","The software receives data from an upstream component, but does\n\t\t\t\t\tnot completely filter one or more instances of special elements before sending\n\t\t\t\t\tit to a downstream component.\nIncomplete filtering of this nature involves either","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter \"../\" from the input. It then appends this result to\n\t\t\t\t\t\tthe /home/user/ directory and attempts to read the file in the final\n\t\t\t\t\t\tresulting path.\n","The software receives data from an upstream component, but only\n\t\t\t\t\tfilters a single instance of a special element before sending it to a downstream\n\t\t\t\t\tcomponent.\nIncomplete filtering of this nature may be location-dependent, as in only\n\t\t\t\t\t\tthe first or last element is filtered.","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter \"../\" from the input. It then appends this result to\n\t\t\t\t\t\tthe /home/user/ directory and attempts to read the file in the final\n\t\t\t\t\t\tresulting path.\n","The software receives data from an upstream component, but does\n\t\t\t\t\tnot filter all instances of a special element before sending it to a downstream\n\t\t\t\t\tcomponent.\nIncomplete filtering of this nature may be applied to","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter \"../\" from the input. It then appends this result to\n\t\t\t\t\t\tthe /home/user/ directory and attempts to read the file in the final\n\t\t\t\t\t\tresulting path.\n","The software receives data from an upstream component, but only\n\t\t\t\t\taccounts for special elements at a specified location, thereby missing remaining\n\t\t\t\t\tspecial elements that may exist before sending it to a downstream\n\t\t\t\t\tcomponent.\nA filter might only account for instances of special elements when they\n\t\t\t\t\t\toccur:","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter a \"../\" element located at the beginning of the input\n\t\t\t\t\t\tstring. It then appends this result to the /home/user/ directory and\n\t\t\t\t\t\tattempts to read the file in the final resulting path.\n","The software receives data from an upstream component, but only\n\t\t\t\t\taccounts for special elements positioned relative to a marker (e.g. \"at the\n\t\t\t\t\tbeginning/end of a string; the second argument\"), thereby missing remaining\n\t\t\t\t\tspecial elements that may exist before sending it to a downstream\n\t\t\t\t\tcomponent.\n","The following code takes untrusted input and uses a regular\n\t\t\t\t\t\texpression to filter a \"../\" element located at the beginning of the input\n\t\t\t\t\t\tstring. It then appends this result to the /home/user/ directory and\n\t\t\t\t\t\tattempts to read the file in the final resulting path.\n","The software receives data from an upstream component, but only\n\t\t\t\t\taccounts for special elements at an absolute position (e.g. \"byte number 10\"),\n\t\t\t\t\tthereby missing remaining special elements that may exist before sending it to a\n\t\t\t\t\tdownstream component.\n","The following code takes untrusted input and uses a substring\n\t\t\t\t\t\tfunction to filter a 3-character \"../\" element located at the 0-index\n\t\t\t\t\t\tposition of the input string. It then appends this result to the /home/user/\n\t\t\t\t\t\tdirectory and attempts to read the file in the final resulting\n\t\t\t\t\t\tpath.\n","The software contains hard-coded credentials, such as a\n\t\t\t\t\tpassword or cryptographic key, which it uses for its own inbound authentication,\n\t\t\t\t\toutbound communication to external components, or encryption of internal\n\t\t\t\t\tdata.\nHard-coded credentials typically create a significant hole that allows an\n\t\t\t\t\t\tattacker to bypass the authentication that has been configured by the\n\t\t\t\t\t\tsoftware administrator. This hole might be difficult for the system\n\t\t\t\t\t\tadministrator to detect. Even if detected, it can be difficult to fix, so\n\t\t\t\t\t\tthe administrator may be forced into disabling the product entirely. There\n\t\t\t\t\t\tare two main variations:","If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.\nThis weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.","The following code uses a hard-coded password to connect to a\n\t\t\t\t\t\tdatabase:\n","The software does not properly limit the number or frequency of\n\t\t\t\t\tinteractions that it has with an actor, such as the number of incoming\n\t\t\t\t\trequests.\nThis can allow the actor to perform actions more frequently than expected.\n\t\t\t\t\t\tThe actor could be a human or an automated process such as a virus or bot.\n\t\t\t\t\t\tThis could be used to cause a denial of service, compromise program logic\n\t\t\t\t\t\t(such as limiting humans to a single vote), or other consequences. For\n\t\t\t\t\t\texample, an authentication routine might not limit the number of times an\n\t\t\t\t\t\tattacker can guess a password. Or, a web site might conduct a poll but only\n\t\t\t\t\t\texpect humans to vote a maximum of once a day.","In the following code a username and password is read from a socket\n\t\t\t\t\t\tand an attempt is made to authenticate the username and password. The code\n\t\t\t\t\t\twill continuously checked the socket for a username and password until it\n\t\t\t\t\t\thas been authenticated. \n","When an application exposes a remote interface for an entity\n\t\t\t\t\tbean, it might also expose methods that get or set the bean's data. These\n\t\t\t\t\tmethods could be leveraged to read sensitive information, or to change data in\n\t\t\t\t\tways that violate the application's expectations, potentially leading to other\n\t\t\t\t\tvulnerabilities.\n","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special characters such as\n\t\t\t\t\t\"<\", \">\", and \"&\" that could be interpreted as\n\t\t\t\t\tweb-scripting elements when they are sent to a downstream component that\n\t\t\t\t\tprocesses web pages.\nThis may allow such characters to be treated as control characters, which\n\t\t\t\t\t\tare executed client-side in the context of the user's session. Although this\n\t\t\t\t\t\tcan be classified as an injection problem, the more pertinent issue is the\n\t\t\t\t\t\timproper conversion of such special characters to respective\n\t\t\t\t\t\tcontext-appropriate entities before displaying them to the user.","In the following example, a guestbook comment isn't properly\n\t\t\t\t\t\tencoded, filtered, or otherwise neutralized for script-related tags before\n\t\t\t\t\t\tbeing displayed in a client browser.\n","The software uses a CAPTCHA challenge, but the challenge can be\n\t\t\t\t\tguessed or automatically recognized by a non-human actor. \nAn automated attacker could bypass the intended protection of the CAPTCHA\n\t\t\t\t\t\tchallenge and perform actions at a higher frequency than humanly possible,\n\t\t\t\t\t\tsuch as launching spam attacks.","When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA.","\n","The software uses a sequential operation to read or write a\n\t\t\t\t\tbuffer, but it uses an incorrect length value that causes it to access memory\n\t\t\t\t\tthat is outside of the bounds of the buffer. \nWhen the length value exceeds the size of the destination, a buffer\n\t\t\t\t\t\toverflow could occur.","Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.\nBuffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.","This example takes an IP address from a user, verifies that it is\n\t\t\t\t\t\twell formed and then looks up the hostname and copies it into a\n\t\t\t\t\t\tbuffer.\n","The software uses the size of a source buffer when reading from\n\t\t\t\t\tor writing to a destination buffer, which may cause it to access memory that is\n\t\t\t\t\toutside of the bounds of the buffer. \nWhen the size of the destination is smaller than the size of the source, a\n\t\t\t\t\t\tbuffer overflow could occur.","Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.","In the following example, the source character string is copied to\n\t\t\t\t\t\tthe dest character string using the method strncpy.\n","The application uses a protection mechanism that relies on the\n\t\t\t\t\texistence or values of an input, but the input can be modified by an untrusted\n\t\t\t\t\tactor in a way that bypasses the protection mechanism.\n Developers may assume that inputs such as cookies, environment variables,\n\t\t\t\t\t\tand hidden form fields cannot be modified. However, an attacker could change\n\t\t\t\t\t\tthese inputs using customized clients or other attacks. This change might\n\t\t\t\t\t\tnot be detected. When security decisions such as authentication and\n\t\t\t\t\t\tauthorization are made based on the values of these inputs, attackers can\n\t\t\t\t\t\tbypass the security of the software.","Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.","The following code excerpt reads a value from a browser cookie to\n\t\t\t\t\t\tdetermine the role of the user.\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes special characters that could be\n\t\t\t\t\tinterpreted as web-scripting elements when they are sent to an error\n\t\t\t\t\tpage.\nError pages may include customized 403 Forbidden or 404 Not Found\n\t\t\t\t\t\tpages.","\n","The web application does not neutralize or incorrectly\n\t\t\t\t\tneutralizes scripting elements within attributes of HTML IMG tags, such as the\n\t\t\t\t\tsrc attribute.\nAttackers can embed XSS exploits into the values for IMG attributes (e.g.\n\t\t\t\t\t\tSRC) that is streamed and then executed in a victim's browser. Note that\n\t\t\t\t\t\twhen the page is loaded into a user's browsers, the exploit will\n\t\t\t\t\t\tautomatically execute.","\n","The software utilizes a shared resource in a concurrent manner\n\t\t\t\t\tbut does not attempt to synchronize access to the resource. \n If access to a shared resource is not synchronized, then the resource may\n\t\t\t\t\t\tnot be in a state that is expected by the software. This might lead to\n\t\t\t\t\t\tunexpected or insecure behaviors, especially if an attacker can influence\n\t\t\t\t\t\tthe shared resource.","The following code intends to fork a process, then have both the\n\t\t\t\t\t\tparent and child processes print a single line.\n","The software utilizes a shared resource in a concurrent manner\n\t\t\t\t\tbut it does not correctly synchronize access to the\n\t\t\t\t\tresource.\n If access to a shared resource is not correctly synchronized, then the\n\t\t\t\t\t\tresource may not be in a state that is expected by the software. This might\n\t\t\t\t\t\tlead to unexpected or insecure behaviors, especially if an attacker can\n\t\t\t\t\t\tinfluence the shared resource.","\n","The program obtains a value from an untrusted source, converts\n\t\t\t\t\tthis value to a pointer, and dereferences the resulting pointer. \nAn attacker can supply a pointer for memory locations that the program is\n\t\t\t\t\t\tnot expecting. If the pointer is dereferenced for a write operation, the\n\t\t\t\t\t\tattack might allow modification of critical program state variables, cause a\n\t\t\t\t\t\tcrash, or execute code. If the dereferencing operation is for a read, then\n\t\t\t\t\t\tthe attack might allow reading of sensitive data, cause a crash, or set a\n\t\t\t\t\t\tprogram variable to an unexpected value (since the value will be read from\n\t\t\t\t\t\tan unexpected memory location).","If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.\nIf the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" or larger than expected by a read or write operation, the application may terminate unexpectedly.\nIf the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.","There are close relationships between incorrect pointer dereferences and\n\t\t\t\t\t\tother weaknesses related to buffer operations. There may not be sufficient\n\t\t\t\t\t\tcommunity agreement regarding these relationships. Further study is needed\n\t\t\t\t\t\tto determine when these relationships are chains, composites,\n\t\t\t\t\t\tperspective/layering, or other types of relationships. As of September 2010,\n\t\t\t\t\t\tmost of the relationships are being captured as chains.","\n","The program performs pointer arithmetic on a valid pointer, but\n\t\t\t\t\tit uses an offset that can point outside of the intended range of valid memory\n\t\t\t\t\tlocations for the resulting pointer. \nWhile a pointer can contain a reference to any arbitrary memory location,\n\t\t\t\t\t\ta program typically only intends to use the pointer to access limited\n\t\t\t\t\t\tportions of memory, such as contiguous memory used to access an individual\n\t\t\t\t\t\tarray. ","If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.\nIf the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" or larger than expected by a read or write operation, the application may terminate unexpectedly.\nIf the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.","There are close relationships between incorrect pointer dereferences and\n\t\t\t\t\t\tother weaknesses related to buffer operations. There may not be sufficient\n\t\t\t\t\t\tcommunity agreement regarding these relationships. Further study is needed\n\t\t\t\t\t\tto determine when these relationships are chains, composites,\n\t\t\t\t\t\tperspective/layering, or other types of relationships. As of September 2010,\n\t\t\t\t\t\tmost of the relationships are being captured as chains.","\n","The program accesses or uses a pointer that has not been\n\t\t\t\t\tinitialized. \nIf the pointer contains an uninitialized value, then the value might not\n\t\t\t\t\t\tpoint to a valid memory location. This could cause the program to read from\n\t\t\t\t\t\tor write to unexpected memory locations, leading to a denial of service. If\n\t\t\t\t\t\tthe uninitialized pointer is used as a function call, then arbitrary\n\t\t\t\t\t\tfunctions could be invoked. If an attacker can influence the portion of\n\t\t\t\t\t\tuninitialized memory that is contained in the pointer, this weakness could\n\t\t\t\t\t\tbe leveraged to execute code or perform other attacks. ","If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.\nIf the uninitialized pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.\nIf the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.","There are close relationships between incorrect pointer dereferences and\n\t\t\t\t\t\tother weaknesses related to buffer operations. There may not be sufficient\n\t\t\t\t\t\tcommunity agreement regarding these relationships. Further study is needed\n\t\t\t\t\t\tto determine when these relationships are chains, composites,\n\t\t\t\t\t\tperspective/layering, or other types of relationships. As of September 2010,\n\t\t\t\t\t\tmost of the relationships are being captured as chains.","\n","The program dereferences a pointer that contains a location for\n\t\t\t\t\tmemory that was previously valid, but is no longer valid.\nWhen a program releases memory, but it maintains a pointer to that memory,\n\t\t\t\t\t\tthen the memory might be re-allocated at a later time. If the original\n\t\t\t\t\t\tpointer is accessed to read or write data, then this could cause the program\n\t\t\t\t\t\tto read or modify data that is in use by a different function or process.\n\t\t\t\t\t\tDepending on how the newly-allocated memory is used, this could lead to a\n\t\t\t\t\t\tdenial of service, information exposure, or code execution.","If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application.\nIf the expired pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.\nIf the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.","There are close relationships between incorrect pointer dereferences and\n\t\t\t\t\t\tother weaknesses related to buffer operations. There may not be sufficient\n\t\t\t\t\t\tcommunity agreement regarding these relationships. Further study is needed\n\t\t\t\t\t\tto determine when these relationships are chains, composites,\n\t\t\t\t\t\tperspective/layering, or other types of relationships. As of September 2010,\n\t\t\t\t\t\tmost of the relationships are being captured as chains.","The following code shows a simple example of a use after free\n\t\t\t\t\t\terror:\n","The program releases a resource that is still intended to be\n\t\t\t\t\tused by the program itself or another actor.\nThis weakness focuses on errors in which the program should not release a\n\t\t\t\t\t\tresource, but performs the release anyway. This is different than a weakness\n\t\t\t\t\t\tin which the program releases a resource at the appropriate time, but it\n\t\t\t\t\t\tmaintains a reference to the resource, which it later accesses. For this\n\t\t\t\t\t\tweaknesses, the resource should still be valid upon the subsequent\n\t\t\t\t\t\taccess.","If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity.\nWhen the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash.\nWhen the resource is released, the software might modify some of its structure. This might affect program logic in the sections of code that still assume the resource is active.","\n","The software does not restrict a reference to a Document Type\n\t\t\t\t\tDefinition (DTD) to the intended control sphere. This might allow attackers to\n\t\t\t\t\treference arbitrary DTDs, possibly causing the software to expose files, consume\n\t\t\t\t\texcessive system resources, or execute arbitrary http requests on behalf of the\n\t\t\t\t\tattacker.\nAs DTDs are processed, they might try to read or include files on the\n\t\t\t\t\t\tmachine performing the parsing. If an attacker is able to control the DTD,\n\t\t\t\t\t\tthen the attacker might be able to specify sensitive resources or requests\n\t\t\t\t\t\tor provide malicious content."," If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system. \nThe DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776).\nThe DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.","\n","The software defines a signal handler that contains code\n\t\t\t\t\tsequences that are not asynchronous-safe, i.e., the functionality is not\n\t\t\t\t\treentrant, or it can be interrupted.\nThis can lead to an unexpected system state with a variety of potential\n\t\t\t\t\t\tconsequences depending on context, including denial of service and code\n\t\t\t\t\t\texecution."," The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.","This code registers the same signal handler function with two\n\t\t\t\t\t\tdifferent signals (CWE-831). If those signals are sent to the process, the\n\t\t\t\t\t\thandler creates a log message (specified in the first argument to the\n\t\t\t\t\t\tprogram) and exits.\n","The software imports, requires, or includes executable\n\t\t\t\t\tfunctionality (such as a library) from a source that is outside of the intended\n\t\t\t\t\tcontrol sphere. \nWhen including third-party functionality, such as a web widget, library,\n\t\t\t\t\t\tor other source of functionality, the software must effectively trust that\n\t\t\t\t\t\tfunctionality. Without sufficient protection mechanisms, the functionality\n\t\t\t\t\t\tcould be malicious in nature (either by coming from an untrusted source,\n\t\t\t\t\t\tbeing spoofed, or being modified in transit from a trusted source). The\n\t\t\t\t\t\tfunctionality might also contain its own weaknesses, or grant access to\n\t\t\t\t\t\tadditional functionality and state information that should be kept private\n\t\t\t\t\t\tto the base system, such as system state information, sensitive application\n\t\t\t\t\t\tdata, or the DOM of a web application.","An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.","This login webpage includes a weather widget from an external\n\t\t\t\t\t\twebsite:\n","The software does not neutralize or incorrectly neutralizes\n\t\t\t\t\t\"javascript:\" or other URIs from dangerous attributes within tags, such as\n\t\t\t\t\tonmouseover, onload, onerror, or style.\n","\n","The software includes web functionality (such as a web widget)\n\t\t\t\t\tfrom another domain, which causes it to operate within the domain of the\n\t\t\t\t\tsoftware, potentially granting total access and control of the software to the\n\t\t\t\t\tuntrusted source.\nIncluding third party functionality in a web-based environment is risky,\n\t\t\t\t\t\tespecially if the source of the functionality is untrusted. ","This login webpage includes a weather widget from an external\n\t\t\t\t\t\twebsite:\n","The software defines a function that is used as a handler for\n\t\t\t\t\tmore than one signal.\nWhile sometimes intentional and safe, when the same function is used to\n\t\t\t\t\t\thandle multiple signals, a race condition could occur if the function uses\n\t\t\t\t\t\tany state outside of its local declaration, such as global variables or\n\t\t\t\t\t\tnon-reentrant functions, or has any side effects."," The most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.","This code registers the same signal handler function with two\n\t\t\t\t\t\tdifferent signals.\n","The software attempts to unlock a resource that is not\n\t\t\t\t\tlocked.\nDepending on the locking functionality, an unlock of a non-locked resource\n\t\t\t\t\t\tmight cause memory corruption or other modification to the resource (or its\n\t\t\t\t\t\tassociated metadata that is used for tracking locks)."," Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the software, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur.","\n","The software contains multiple threads or executable segments\n\t\t\t\t\tthat are waiting for each other to release a necessary lock, resulting in\n\t\t\t\t\tdeadlock.\n"," Each thread of execution will \"hang\" and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop.","\n","The software performs an iteration or loop without sufficiently\n\t\t\t\t\tlimiting the number of times that the loop is executed.\nIf the iteration can be influenced by an attacker, this weakness could\n\t\t\t\t\t\tallow attackers to consume excessive resources such as CPU or memory. In\n\t\t\t\t\t\tmany cases, a loop does not need to be infinite in order to cause enough\n\t\t\t\t\t\tresource consumption to adversely affect the software or its host system; it\n\t\t\t\t\t\tdepends on the amount of resources consumed per iteration."," Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error.","\n","The program contains an iteration or loop with an exit\n\t\t\t\t\tcondition that cannot be reached, i.e., an infinite loop.\nIf the loop can be influenced by an attacker, this weakness could allow\n\t\t\t\t\t\tattackers to consume excessive resources such as CPU or memory."," An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond.","In the following code the method processMessagesFromServer attempts\n\t\t\t\t\t\tto establish a connection to a server and read and process messages from the\n\t\t\t\t\t\tserver. The method uses a do/while loop to continue trying to establish the\n\t\t\t\t\t\tconnection to the server when an attempt fails.\n","The software records password hashes in a data store, receives\n\t\t\t\t\ta hash of a password from a client, and compares the supplied hash to the hash\n\t\t\t\t\tobtained from the data store. \nSome authentication mechanisms rely on the client to generate the hash for\n\t\t\t\t\t\ta password, possibly to reduce load on the server or avoid sending the\n\t\t\t\t\t\tpassword across the network. However, when the client is used to generate\n\t\t\t\t\t\tthe hash, an attacker can bypass the authentication by obtaining a copy of\n\t\t\t\t\t\tthe hash, e.g. by using SQL injection to compromise a database of\n\t\t\t\t\t\tauthentication credentials, or by exploiting an information exposure. The\n\t\t\t\t\t\tattacker could then use a modified client to replay the stolen hash without\n\t\t\t\t\t\thaving knowledge of the original password.","An attacker could bypass the authentication routine without knowing the original password.","\n","The software requires that an actor should only be able to\n\t\t\t\t\tperform an action once, or to have only one unique action, but the software does\n\t\t\t\t\tnot enforce or improperly enforces this restriction. \nIn various applications, a user is only expected to perform a certain\n\t\t\t\t\t\taction once, such as voting, requesting a refund, or making a purchase. When\n\t\t\t\t\t\tthis restriction is not enforced, sometimes this can have security\n\t\t\t\t\t\timplications. For example, in a voting application, an attacker could\n\t\t\t\t\t\tattempt to \"stuff the ballot box\" by voting multiple times. If these votes\n\t\t\t\t\t\tare counted separately, then the attacker could directly affect who wins the\n\t\t\t\t\t\tvote. This could have significant business impact depending on the purpose\n\t\t\t\t\t\tof the software.","An attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the software.","\n","The software uses or specifies an encoding when generating\n\t\t\t\t\toutput to a downstream component, but the specified encoding is not the same as\n\t\t\t\t\tthe encoding that is expected by the downstream component.\nThis weakness can cause the downstream component to use a decoding method\n\t\t\t\t\t\tthat produces different data than what the software intended to send. When\n\t\t\t\t\t\tthe wrong encoding is used - even if closely related - the downstream\n\t\t\t\t\t\tcomponent could decode the data incorrectly. This can have security\n\t\t\t\t\t\tconsequences when the provided boundaries between control and data are\n\t\t\t\t\t\tinadvertently broken, because the resulting data could introduce control\n\t\t\t\t\t\tcharacters or special elements that were not sent by the software. The\n\t\t\t\t\t\tresulting data could then be used to bypass protection mechanisms such as\n\t\t\t\t\t\tinput validation, and enable injection attacks.","An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands."," This code dynamically builds an HTML page using POST data: \n","The program checks a value to ensure that it does not exceed a\n\t\t\t\t\tmaximum, but it does not verify that the value exceeds the\n\t\t\t\t\tminimum.\nSome programs use signed integers or floats even when their values are\n\t\t\t\t\t\tonly expected to be positive or 0. An input validation check might assume\n\t\t\t\t\t\tthat the value is positive, and only check for the maximum value. If the\n\t\t\t\t\t\tvalue is negative, but the code assumes that the value is positive, this can\n\t\t\t\t\t\tproduce an error. The error may have security consequences if the negative\n\t\t\t\t\t\tvalue is used for memory allocation, array access, buffer access, etc.\n\t\t\t\t\t\tUltimately, the error could lead to a buffer overflow or other type of\n\t\t\t\t\t\tmemory corruption.","An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.\nin some contexts, a negative value could lead to resource consumption.\nIf a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer.","The following code is intended to read an incoming packet from a\n\t\t\t\t\t\tsocket and extract one or more headers.\n","The web application improperly neutralizes user-controlled\n\t\t\t\t\tinput for executable script disguised with URI encodings.\n","\n","The software supports a session in which more than one behavior\n\t\t\t\t\tmust be performed by an actor, but it does not properly ensure that the actor\n\t\t\t\t\tperforms the behaviors in the required sequence.\nBy performing actions in an unexpected order, or by omitting steps, an\n\t\t\t\t\t\tattacker could manipulate the business logic of the software or cause it to\n\t\t\t\t\t\tenter an invalid state. In some cases, this can also expose resultant\n\t\t\t\t\t\tweaknesses.","An attacker could cause the software to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.","This code is part of an FTP server and deals with various commands\n\t\t\t\t\t\tthat could be sent by a user. It is intended that a user must successfully\n\t\t\t\t\t\tlogin before performing any other action such as retrieving or listing\n\t\t\t\t\t\tfiles.\n","The software or the administrator places a user into an\n\t\t\t\t\tincorrect group.\nIf the incorrect group has more access or privileges than the intended\n\t\t\t\t\t\tgroup, the user might be able to bypass intended security policy to access\n\t\t\t\t\t\tunexpected resources or perform unexpected actions. The access-control\n\t\t\t\t\t\tsystem might not be able to detect malicious usage of this group\n\t\t\t\t\t\tmembership.","\n","The program allocates or initializes a resource such as a\n\t\t\t\t\tpointer, object, or variable using one type, but it later accesses that resource\n\t\t\t\t\tusing a type that is incompatible with the original type.\nWhen the program accesses the resource using an incompatible type, this\n\t\t\t\t\t\tcould trigger logical errors because the resource does not have expected\n\t\t\t\t\t\tproperties. In languages without memory safety, such as C and C++, type\n\t\t\t\t\t\tconfusion can lead to out-of-bounds memory access.","The following code uses a union to support the representation of\n\t\t\t\t\t\tdifferent types of messages. It formats messages differently, depending on\n\t\t\t\t\t\ttheir type.\n","The web application does not filter user-controlled input for\n\t\t\t\t\texecutable script disguised using doubling of the involved\n\t\t\t\t\tcharacters.\n","\n","The software does not neutralize or incorrectly neutralizes\n\t\t\t\t\tinvalid characters or byte sequences in the middle of tag names, URI schemes,\n\t\t\t\t\tand other identifiers.\n Some web browsers may remove these sequences, resulting in output that\n\t\t\t\t\t\tmay have unintended control implications. For example, the software may\n\t\t\t\t\t\tattempt to remove a \"javascript:\" URI scheme, but a \"java%00script:\" URI may\n\t\t\t\t\t\tbypass this check and still be rendered as active javascript by some\n\t\t\t\t\t\tbrowsers, allowing XSS or other attacks. ","\n","The software does not perform an authorization check when an\n\t\t\t\t\tactor attempts to access a resource or perform an action.\nAssuming a user with a given identity, authorization is the process of\n\t\t\t\t\t\tdetermining whether that user can access a given resource, based on the\n\t\t\t\t\t\tuser's privileges and any permissions or other access-control specifications\n\t\t\t\t\t\tthat apply to the resource.","An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.\nAn attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.\nAn attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.","An access control list (ACL) represents who/what has permissions to a\n\t\t\t\t\t\tgiven object. Different operating systems implement (ACLs) in different\n\t\t\t\t\t\tways. In UNIX, there are three types of permissions: read, write, and\n\t\t\t\t\t\texecute. Users are divided into three classes for file access: owner, group\n\t\t\t\t\t\towner, and all other users where each class has a separate set of rights. In\n\t\t\t\t\t\tWindows NT, there are four basic types of permissions for files: \"No\n\t\t\t\t\t\taccess\", \"Read access\", \"Change access\", and \"Full control\". Windows NT\n\t\t\t\t\t\textends the concept of three types of users in UNIX to include a list of\n\t\t\t\t\t\tusers and groups along with their associated permissions. A user can create\n\t\t\t\t\t\tan object (file) and assign specified permissions to that object.","This function runs an arbitrary SQL query on a given database,\n\t\t\t\t\t\treturning the result of the query.\n","The software performs an authorization check when an actor\n\t\t\t\t\tattempts to access a resource or perform an action, but it does not correctly\n\t\t\t\t\tperform the check. This allows attackers to bypass intended access\n\t\t\t\t\trestrictions.\nAssuming a user with a given identity, authorization is the process of\n\t\t\t\t\t\tdetermining whether that user can access a given resource, based on the\n\t\t\t\t\t\tuser's privileges and any permissions or other access-control specifications\n\t\t\t\t\t\tthat apply to the resource.","An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.\nAn attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.\nAn attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.","An access control list (ACL) represents who/what has permissions to a\n\t\t\t\t\t\tgiven object. Different operating systems implement (ACLs) in different\n\t\t\t\t\t\tways. In UNIX, there are three types of permissions: read, write, and\n\t\t\t\t\t\texecute. Users are divided into three classes for file access: owner, group\n\t\t\t\t\t\towner, and all other users where each class has a separate set of rights. In\n\t\t\t\t\t\tWindows NT, there are four basic types of permissions for files: \"No\n\t\t\t\t\t\taccess\", \"Read access\", \"Change access\", and \"Full control\". Windows NT\n\t\t\t\t\t\textends the concept of three types of users in UNIX to include a list of\n\t\t\t\t\t\tusers and groups along with their associated permissions. A user can create\n\t\t\t\t\t\tan object (file) and assign specified permissions to that object.","The following code could be for a medical records application. It\n\t\t\t\t\t\tdisplays a record to already authenticated users, confirming the user's\n\t\t\t\t\t\tauthorization using a value stored in a cookie. \n","The software does not neutralize or incorrectly neutralizes\n\t\t\t\t\tuser-controlled input for alternate script syntax.\n","In the following example, an XSS neutralization routine checks for\n\t\t\t\t\t\tthe lower-case \"script\" string but does not account for alternate strings\n\t\t\t\t\t\t(\"SCRIPT\", for example).\n","The software does not sufficiently delimit the arguments being\n\t\t\t\t\tpassed to a component in another control sphere, allowing alternate arguments to\n\t\t\t\t\tbe provided, leading to potentially security-relevant\n\t\t\t\t\tchanges.\n","An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.","The following simple program accepts a filename as a command line\n\t\t\t\t\t\targument and displays the contents of the file back to the user. The program\n\t\t\t\t\t\tis installed setuid root because it is intended for use as a learning tool\n\t\t\t\t\t\tto allow system administrators in-training to inspect privileged system\n\t\t\t\t\t\tfiles without giving them the ability to modify them or damage the\n\t\t\t\t\t\tsystem.\n","The software constructs all or part of an SQL command using\n\t\t\t\t\texternally-influenced input from an upstream component, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes special elements that could modify the\n\t\t\t\t\tintended SQL command when it is sent to a downstream\n\t\t\t\t\tcomponent.\nWithout sufficient removal or quoting of SQL syntax in user-controllable\n\t\t\t\t\t\tinputs, the generated SQL query can cause those inputs to be interpreted as\n\t\t\t\t\t\tSQL instead of ordinary user data. This can be used to alter query logic to\n\t\t\t\t\t\tbypass security checks, or to insert additional statements that modify the\n\t\t\t\t\t\tback-end database, possibly including execution of system commands.","Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.\nIf poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.\nIf authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.\nJust as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.","In 2008, a large number of web servers were compromised using the\n\t\t\t\t\t\tsame SQL injection attack string. This single string worked against many\n\t\t\t\t\t\tdifferent programs. The SQL injection was then used to modify the web sites\n\t\t\t\t\t\tto serve malicious code. [1]\n","If elevated access rights are assigned to EJB methods, then an\n\t\t\t\t\tattacker can take advantage of the permissions to exploit the software\n\t\t\t\t\tsystem.\nIf the EJB deployment descriptor contains one or more method permissions\n\t\t\t\t\t\tthat grant access to the special ANYONE role, it indicates that access\n\t\t\t\t\t\tcontrol for the application has not been fully thought through or that the\n\t\t\t\t\t\tapplication is structured in such a way that reasonable access control\n\t\t\t\t\t\trestrictions are impossible.","The following deployment descriptor grants ANYONE permission to\n\t\t\t\t\t\tinvoke the Employee EJB's method named getSalary().\n","The software constructs all or part of an LDAP query using\n\t\t\t\t\texternally-influenced input from an upstream component, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes special elements that could modify the\n\t\t\t\t\tintended LDAP query when it is sent to a downstream\n\t\t\t\t\tcomponent.\n","An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.","The code below constructs an LDAP query using user input address\n\t\t\t\t\t\tdata:\n","The software uses a resource that has not been properly\n\t\t\t\t\tinitialized.\nThis can have security implications when the associated resource is\n\t\t\t\t\t\texpected to have certain properties or values.","When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.\nThe uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.","Here, a boolean initiailized field is consulted to ensure that\n\t\t\t\t\t\tinitialization tasks are only completed once. However, the field is\n\t\t\t\t\t\tmistakenly set to true during static initialization, so the initialization\n\t\t\t\t\t\tcode is never reached.\n","The software does not initialize a critical\n\t\t\t\t\tresource.\nMany resources require initialization before they can be properly used. If\n\t\t\t\t\t\ta resource is not initialized, it could contain unpredictable or expired\n\t\t\t\t\t\tdata, or it could be initialized to defaults that are invalid. This can have\n\t\t\t\t\t\tsecurity implications when the resource is expected to have certain\n\t\t\t\t\t\tproperties or values.","When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.\nThe uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.","Here, a boolean initiailized field is consulted to ensure that\n\t\t\t\t\t\tinitialization tasks are only completed once. However, the field is\n\t\t\t\t\t\tmistakenly set to true during static initialization, so the initialization\n\t\t\t\t\t\tcode is never reached.\n","The software does not properly neutralize special elements that\n\t\t\t\t\tare used in XML, allowing attackers to modify the syntax, content, or commands\n\t\t\t\t\tof the XML before it is processed by an end system.\nWithin XML, special elements could include reserved words or characters\n\t\t\t\t\t\tsuch as \"<\", \">\", \"\"\", and \"&\", which could then be\n\t\t\t\t\t\tused to add new data or modify XML syntax.","The description for this entry is generally applicable to XML, but the\n\t\t\t\t\t\tname includes \"blind XPath injection\" which is more closely associated with\n\t\t\t\t\t\tCWE-643. Therefore this entry might need to be deprecated or converted to a\n\t\t\t\t\t\tgeneral category - although injection into raw XML is not covered by CWE-643\n\t\t\t\t\t\tor CWE-652.","\n","The software uses or accesses a file descriptor after it has\n\t\t\t\t\tbeen closed.\nAfter a file descriptor for a particular file or device has been released,\n\t\t\t\t\t\tit can be reused. The code might not write to the original file, since the\n\t\t\t\t\t\treused file descriptor might reference a different file or device.","The program could read data from the wrong file.\nAccessing a file descriptor that has been closed can cause a crash.","\n","The software uses a reference count to manage a resource, but\n\t\t\t\t\tit does not update or incorrectly updates the reference\n\t\t\t\t\tcount.\nReference counts can be used when tracking how many objects contain a\n\t\t\t\t\t\treference to a particular resource, such as in memory management or garbage\n\t\t\t\t\t\tcollection. When the reference count reaches zero, the resource can be\n\t\t\t\t\t\tde-allocated or reused because there are no more objects that use it. If the\n\t\t\t\t\t\treference count accidentally reaches zero, then the resource might be\n\t\t\t\t\t\treleased too soon, even though it is still in use. If all objects no longer\n\t\t\t\t\t\tuse the resource, but the reference count is not zero, then the resource\n\t\t\t\t\t\tmight not ever be released.","\n","The software contains functionality that is not documented, not\n\t\t\t\t\tpart of the specification, and not accessible through an interface or command\n\t\t\t\t\tsequence that is obvious to the software's users or\n\t\t\t\t\tadministrators.\nHidden functionality can take many forms, such as intentionally malicious\n\t\t\t\t\t\tcode, \"Easter Eggs\" that contain extraneous functionality such as games,\n\t\t\t\t\t\tdeveloper-friendly shortcuts that reduce maintenance or support costs such\n\t\t\t\t\t\tas hard-coded accounts, etc. From a security perspective, even when the\n\t\t\t\t\t\tfunctionality is not intentionally malicious or damaging, it can increase\n\t\t\t\t\t\tthe software's attack surface and expose additional weaknesses beyond what\n\t\t\t\t\t\tis already exposed by the intended functionality. Even if it is not easily\n\t\t\t\t\t\taccessible, the hidden functionality could be useful for attacks that modify\n\t\t\t\t\t\tthe control flow of the application.","\n","The software does not properly restrict reading from or writing\n\t\t\t\t\tto dynamically-managed code resources such as variables, objects, classes,\n\t\t\t\t\tattributes, functions, or executable instructions or\n\t\t\t\t\tstatements.\nMany languages offer powerful features that allow the programmer to\n\t\t\t\t\t\tdynamically create or modify existing code, or resources used by code such\n\t\t\t\t\t\tas variables and objects. While these features can offer significant\n\t\t\t\t\t\tflexibility and reduce development time, they can be extremely dangerous if\n\t\t\t\t\t\tattackers can directly influence these code resources in unexpected\n\t\t\t\t\t\tways.","\n","\n","The software does not properly restrict reading from or writing\n\t\t\t\t\tto dynamically-identified variables.\nMany languages offer powerful features that allow the programmer to access\n\t\t\t\t\t\tarbitrary variables that are specified by an input string. While these\n\t\t\t\t\t\tfeatures can offer significant flexibility and reduce development time, they\n\t\t\t\t\t\tcan be extremely dangerous if attackers can modify unintended variables that\n\t\t\t\t\t\thave security implications.","An attacker could modify sensitive data or program variables.\n\n"," This code uses the credentials sent in a POST request to login a\n\t\t\t\t\t\tuser. \n","The software receives input from an upstream component that\n\t\t\t\t\tspecifies multiple attributes, properties, or fields that are to be initialized\n\t\t\t\t\tor updated in an object, but it does not properly control which attributes can\n\t\t\t\t\tbe modified.\nIf the object contains attributes that were only intended for internal\n\t\t\t\t\t\tuse, then their unexpected modification could lead to a\n\t\t\t\t\t\tvulnerability.","An attacker could modify sensitive data or program variables.\n\n","The relationships between CWE-502 and CWE-915 need further exploration.\n\t\t\t\t\t\tCWE-915 is more narrowly scoped to object modification, and is not\n\t\t\t\t\t\tnecessarily used for deserialization.","\n","The software generates a hash for a password, but it uses a\n\t\t\t\t\tscheme that does not provide a sufficient level of computational effort that\n\t\t\t\t\twould make password cracking attacks infeasible or\n\t\t\t\t\texpensive.\nMany password storage mechanisms compute a hash and store the hash,\n\t\t\t\t\t\tinstead of storing the original password in plaintext. In this design,\n\t\t\t\t\t\tauthentication involves accepting an incoming password, computing its hash,\n\t\t\t\t\t\tand comparing it to the stored hash.","If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.","\n","The software constructs all or part of an expression language\n\t\t\t\t\t(EL) statement in a Java Server Page (JSP) using externally-influenced input\n\t\t\t\t\tfrom an upstream component, but it does not neutralize or incorrectly\n\t\t\t\t\tneutralizes special elements that could modify the intended EL statement before\n\t\t\t\t\tit is executed.\n","\n","\n","The web server receives a URL or similar request from an\n\t\t\t\t\tupstream component and retrieves the contents of this URL, but it does not\n\t\t\t\t\tsufficiently ensure that the request is being sent to the expected\n\t\t\t\t\tdestination.\nBy providing URLs to unexpected hosts or ports, attackers can make it\n\t\t\t\t\t\tappear that the server is sending the request, possibly bypassing access\n\t\t\t\t\t\tcontrols such as firewalls that prevent the attackers from accessing the\n\t\t\t\t\t\tURLs directly. The server can be used as a proxy to conduct port scanning of\n\t\t\t\t\t\thosts in internal networks, use other URLs such as that can access documents\n\t\t\t\t\t\ton the system (using file://), or use other protocols such as gopher:// or\n\t\t\t\t\t\ttftp://, which may provide greater control over the contents of\n\t\t\t\t\t\trequests.","\n","\n","This entry has been deprecated. It originally came from PLOVER,\n\t\t\t\t\twhich sometimes defined \"other\" and \"miscellaneous\" categories in order to\n\t\t\t\t\tsatisfy exhaustiveness requirements for taxonomies. Within the context of CWE,\n\t\t\t\t\tthe use of a more abstract entry is preferred in mapping situations. CWE-75 is a\n\t\t\t\t\tmore appropriate mapping.\n","\n","The software operates in an environment in which power is a\n\t\t\t\t\tlimited resource that cannot be automatically replenished, but the software does\n\t\t\t\t\tnot properly restrict the amount of power that its operation\n\t\t\t\t\tconsumes.\nIn environments such as embedded or mobile devices, power can be a limited\n\t\t\t\t\t\tresource such as a battery, which cannot be automatically replenished by the\n\t\t\t\t\t\tsoftware itself, and the device might not always be directly attached to a\n\t\t\t\t\t\treliable power source. If the software uses too much power too quickly, then\n\t\t\t\t\t\tthis could cause the device (and subsequently, the software) to stop\n\t\t\t\t\t\tfunctioning until power is restored, or increase the financial burden on the\n\t\t\t\t\t\tdevice owner because of increased power costs.","The power source could be drained, causing the application - and the entire device - to cease functioning.","\n","The software stores sensitive information in a file system or\n\t\t\t\t\tdevice that does not have built-in access control.\nWhile many modern file systems or devices utilize some form of access\n\t\t\t\t\t\tcontrol in order to restrict access to data, not all storage mechanisms have\n\t\t\t\t\t\tthis capability. For example, memory cards, floppy disks, CDs, and USB\n\t\t\t\t\t\tdevices are typically made accessible to any user within the system. This\n\t\t\t\t\t\tcan become a problem when sensitive data is stored in these mechanisms in a\n\t\t\t\t\t\tmulti-user environment, because anybody on the system can read or write this\n\t\t\t\t\t\tdata.","Attackers can read sensitive information by accessing the unrestricted storage mechanism.\nAttackers can modify or delete sensitive information by accessing the unrestricted storage mechanism.","\n","The software stores sensitive information without properly\n\t\t\t\t\tlimiting read or write access by unauthorized actors.\nIf read access is not properly restricted, then attackers can steal the\n\t\t\t\t\t\tsensitive information. If write access is not properly restricted, then\n\t\t\t\t\t\tattackers can modify and possibly delete the data, causing incorrect results\n\t\t\t\t\t\tand possibly a denial of service.","Attackers can read sensitive information by accessing the unrestricted storage mechanism.\nAttackers can read sensitive information by accessing the unrestricted storage mechanism.","This is a high-level node that includes children from various parts of the\n\t\t\t\t\t\tCWE research view (CWE-1000). Currently, most of the information is in these\n\t\t\t\t\t\tchild entries. This entry will be made more comprehensive in later CWE\n\t\t\t\t\t\tversions.","\n","The software establishes a communication channel to (or from)\n\t\t\t\t\tan endpoint for privileged or protected operations, but it does not properly\n\t\t\t\t\tensure that it is communicating with the correct endpoint.\nAttackers might be able to spoof the intended endpoint from a different\n\t\t\t\t\t\tsystem or process, thus gaining the same level of access as the intended\n\t\t\t\t\t\tendpoint.","If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.","This entry will be made more comprehensive in later CWE versions.","\n","The software establishes a communication channel with an\n\t\t\t\t\tendpoint and receives a message from that endpoint, but it does not sufficiently\n\t\t\t\t\tensure that the message was not modified during\n\t\t\t\t\ttransmission.\nA man-in-the-middle (MITM) attacker might be able to modify the message\n\t\t\t\t\t\tand spoof the endpoint.","If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.","This entry will be made more comprehensive in later CWE versions.","\n","The Android application uses a Broadcast Receiver that receives\n\t\t\t\t\tan Intent but does not properly verify that the Intent came from an authorized\n\t\t\t\t\tsource.\nCertain types of Intents, identified by action string, can only be\n\t\t\t\t\t\tbroadcast by the operating system itself, not by third-party applications.\n\t\t\t\t\t\tHowever, when an application registers to receive these implicit system\n\t\t\t\t\t\tintents, it is also registered to receive any explicit intents. While a\n\t\t\t\t\t\tmalicious application cannot send an implicit system intent, it can send an\n\t\t\t\t\t\texplicit intent to the target application, which may assume that any\n\t\t\t\t\t\treceived intent is a valid implicit system intent and not an explicit intent\n\t\t\t\t\t\tfrom another application. This may lead to unintended behavior.","Another application can impersonate the operating system and cause the software to perform an unintended action.","This entry will be made more comprehensive in later CWE versions.","\n","The Android application exports a component for use by other\n\t\t\t\t\tapplications, but does not properly restrict which applications can launch the\n\t\t\t\t\tcomponent or access the data it contains.\nThe attacks and consequences of improperly exporting a component may\n\t\t\t\t\t\tdepend on the exported component: ","Other applications, possibly untrusted, can launch the Activity.\nOther applications, possibly untrusted, can bind to the Service.\nOther applications, possibly untrusted, can read or modify the data that is offered by the Content Provider.","There are three types of components that can be exported in an Android\n\t\t\t\t\t\tapplication.","This application is exporting an activity and a service in its\n\t\t\t\t\t\tmanifest.xml:\n","The Android application uses an implicit intent for\n\t\t\t\t\ttransmitting sensitive data to other applications.\nSince an implicit intent does not specify a particular application to\n\t\t\t\t\t\treceive the data, any application can process the intent by using an Intent\n\t\t\t\t\t\tFilter for that intent. This can allow untrusted applications to obtain\n\t\t\t\t\t\tsensitive data. There are two variations on the standard broadcast intent,\n\t\t\t\t\t\tordered and sticky.","Other applications, possibly untrusted, can read the data that is offered through the Intent.\nThe application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions.","This entry will be made more comprehensive in later CWE versions.","This application wants to create a user account in several trusted\n\t\t\t\t\t\tapplications using one broadcast intent:\n","The software uses CRLF (carriage return line feeds) as a\n\t\t\t\t\tspecial element, e.g. to separate lines or records, but it does not neutralize\n\t\t\t\t\tor incorrectly neutralizes CRLF sequences from inputs.\n","If user input data that eventually makes it to a log message isn't\n\t\t\t\t\t\tchecked for CRLF characters, it may be possible for an attacker to forge\n\t\t\t\t\t\tentries in a log file.\n","The software uses a handler for a custom URL scheme, but it\n\t\t\t\t\tdoes not properly restrict which actors can invoke the handler using the scheme. \nMobile platforms and other architectures allow the use of custom URL\n\t\t\t\t\t\tschemes to facilitate communication between applications. In the case of\n\t\t\t\t\t\tiOS, this is the only method to do inter-application communication. The\n\t\t\t\t\t\timplementation is at the developer's discretion which may open security\n\t\t\t\t\t\tflaws in the application. An example could be potentially dangerous\n\t\t\t\t\t\tfunctionality such as modifying files through a custom URL scheme.","This iOS application uses a custom URL scheme. The replaceFileText\n\t\t\t\t\t\taction in the URL scheme allows an external application to interface with\n\t\t\t\t\t\tthe file incomingMessage.txt and replace the contents with the text field of\n\t\t\t\t\t\tthe query string.\n","The software constructs all or part of a code segment using\n\t\t\t\t\texternally-influenced input from an upstream component, but it does not\n\t\t\t\t\tneutralize or incorrectly neutralizes special elements that could modify the\n\t\t\t\t\tsyntax or behavior of the intended code segment.\nWhen software allows a user's input to contain code syntax, it might be\n\t\t\t\t\t\tpossible for an attacker to craft the code in such a way that it will alter\n\t\t\t\t\t\tthe intended control flow of the software. Such an alteration could lead to\n\t\t\t\t\t\tarbitrary code execution.","In some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjected code can access resources that the attacker is directly prevented from accessing.\nCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.\nOften the actions performed by injected control code are unlogged.","This example attempts to write user messages to a message file and\n\t\t\t\t\t\tallow users to view them.\n","The software establishes a communication channel to handle an\n\t\t\t\t\tincoming request that has been initiated by an actor, but it does not properly\n\t\t\t\t\tverify that the request is coming from the expected origin. \nWhen an attacker can successfully establish a communication channel from\n\t\t\t\t\t\tan untrusted origin, the attacker may be able to gain privileges and access\n\t\t\t\t\t\tunexpected functionality.","An attacker can access any functionality that is inadvertently accessible to the source.","This Android application will remove a user account when it receives\n\t\t\t\t\t\tan intent to do so:\n","The software creates a communication channel to initiate an\n\t\t\t\t\toutgoing request to an actor, but it does not correctly specify the intended\n\t\t\t\t\tdestination for that actor. \nAttackers at the destination may be able to spoof trusted servers to steal\n\t\t\t\t\t\tdata or cause a denial of service. ","This entry will be made more comprehensive in later CWE versions."," This code listens on a port for DNS requests and sends the result\n\t\t\t\t\t\tto the requesting address. \n","The software uses a cross-domain policy file that includes\n\t\t\t\t\tdomains that should not be trusted.\nA cross-domain policy file (\"crossdomain.xml\" in Flash and\n\t\t\t\t\t\t\"clientaccesspolicy.xml\" in Silverlight) defines a whitelist of domains from\n\t\t\t\t\t\twhich a server is allowed to make cross-domain requests. When making a\n\t\t\t\t\t\tcross-domain request, the Flash or Silverlight client will first look for\n\t\t\t\t\t\tthe policy file on the target server. If it is found, and the domain hosting\n\t\t\t\t\t\tthe application is explicitly allowed to make requests, the request is made. ","An attacker may be able to bypass the web browser's same-origin policy. ","These cross-domain policy files mean to allow Flash and Silverlight\n\t\t\t\t\t\tapplications hosted on other domains to access its data:\n","The application generates a query intended to access or\n\t\t\t\t\tmanipulate data in a data store such as a database, but it does not neutralize\n\t\t\t\t\tor incorrectly neutralizes special elements that can modify the intended logic\n\t\t\t\t\tof the query.\nDepending on the capabilities of the query language, an attacker could\n\t\t\t\t\t\tinject additional logic into the query to:","This entry will be made more comprehensive in future CWE versions.","\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes code syntax before using the\n\t\t\t\t\tinput in a dynamic evaluation call (e.g. \"eval\").\nThis may allow an attacker to execute arbitrary code, or at least modify\n\t\t\t\t\t\twhat code can be executed.","The injected code could access restricted data / files.\nIn some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjected code can access resources that the attacker is directly prevented from accessing.\nCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.\nOften the actions performed by injected control code are unlogged.","edit-config.pl: This CGI script is used to modify settings in a\n\t\t\t\t\t\tconfiguration file.\n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not neutralize or incorrectly neutralizes code syntax before inserting the\n\t\t\t\t\tinput into an executable resource, such as a library, configuration file, or\n\t\t\t\t\ttemplate.\n","The injected code could access restricted data / files.\nIn some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjected code can access resources that the attacker is directly prevented from accessing.\nCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.\nOften the actions performed by injected control code are unlogged.","This example attempts to write user messages to a message file and\n\t\t\t\t\t\tallow users to view them.\n","The software generates a web page, but does not neutralize or\n\t\t\t\t\tincorrectly neutralizes user-controllable input that could be interpreted as a\n\t\t\t\t\tserver-side include (SSI) directive.\n","\n","The PHP application receives input from an upstream component,\n\t\t\t\t\tbut it does not restrict or incorrectly restricts the input before its usage in\n\t\t\t\t\t\"require,\" \"include,\" or similar functions.\nIn certain versions and configurations of PHP, this can allow an attacker\n\t\t\t\t\t\tto specify a URL to a remote location from which the software will obtain\n\t\t\t\t\t\tthe code to execute. In other cases in association with path traversal, the\n\t\t\t\t\t\tattacker can specify a local file that may contain executable statements\n\t\t\t\t\t\tthat can be parsed by PHP.","The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers.","The following code attempts to include a function contained in a\n\t\t\t\t\t\tseparate PHP page on the server. It builds the path to the file by using the\n\t\t\t\t\t\tsupplied 'module_name' parameter and appending the string '/function.php' to\n\t\t\t\t\t\tit. \n","The software receives input from an upstream component, but it\n\t\t\t\t\tdoes not restrict or incorrectly restricts the input before it is used as an\n\t\t\t\t\tidentifier for a resource that may be outside the intended sphere of\n\t\t\t\t\tcontrol.\nA resource injection issue occurs when the following two conditions are\n\t\t\t\t\t\tmet:","An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.","The relationship between CWE-99 and CWE-610 needs further investigation\n\t\t\t\t\t\tand clarification. They might be duplicates. CWE-99 \"Resource Injection,\" as\n\t\t\t\t\t\toriginally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the\n\t\t\t\t\t\t\"identifier used to access a system resource\" such as a file name or port\n\t\t\t\t\t\tnumber, yet it explicitly states that the \"resource injection\" term does not\n\t\t\t\t\t\tapply to \"path manipulation,\" which effectively identifies the path at which\n\t\t\t\t\t\ta resource can be found and could be considered to be one aspect of a\n\t\t\t\t\t\tresource identifier. Also, CWE-610 effectively covers any type of resource,\n\t\t\t\t\t\twhether that resource is at the system layer, the application layer, or the\n\t\t\t\t\t\tcode layer.","The following Java code uses input from an HTTP request to create a\n\t\t\t\t\t\tfile name. The programmer has not considered the possibility that an\n\t\t\t\t\t\tattacker could provide a file name such as \"../../tomcat/conf/server.xml\",\n\t\t\t\t\t\twhich causes the application to delete one of its own configuration\n\t\t\t\t\t\tfiles.\n","The software uses a cookie to store sensitive information, but\n\t\t\t\t\tthe cookie is not marked with the HttpOnly flag.\nThe HttpOnly flag directs compatible browsers to prevent client-side\n\t\t\t\t\t\tscript from accessing cookies. Including the HttpOnly flag in the Set-Cookie\n\t\t\t\t\t\tHTTP response header helps mitigate the risk associated with Cross-Site\n\t\t\t\t\t\tScripting (XSS) where an attacker's script code might attempt to read the\n\t\t\t\t\t\tcontents of a cookie and exfiltrate information obtained. When set, browsers\n\t\t\t\t\t\tthat support the flag will not reveal the contents of the cookie to a third\n\t\t\t\t\t\tparty via client-side script executed via XSS.","If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.\nIf the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.","An HTTP cookie is a small piece of data attributed to a specific website\n\t\t\t\t\t\tand stored on the user's computer by the user's web browser. This data can\n\t\t\t\t\t\tbe leveraged for a variety of purposes including saving information entered\n\t\t\t\t\t\tinto form fields, recording user activity, and for authentication purposes.\n\t\t\t\t\t\tCookies used to save or record information generated by the user are\n\t\t\t\t\t\taccessed and modified by script code embedded in a web page. While cookies\n\t\t\t\t\t\tused for authentication are created by the website's server and sent to the\n\t\t\t\t\t\tuser to be attached to future requests. These authentication cookies are\n\t\t\t\t\t\toften not meant to be accessed by the web page sent to the user, and are\n\t\t\t\t\t\tinstead just supposed to be attached to future requests to verify\n\t\t\t\t\t\tauthentication details.","In this example, a cookie is used to store a session ID for a\n\t\t\t\t\t\tclient's interaction with a website. The intention is that the cookie will\n\t\t\t\t\t\tbe sent to the website with each request made by the client.\n"]